<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WngHilin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-23T05:57:45.748Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WngHilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Servlet-运行在服务器端的小程序</title>
    <link href="http://yoursite.com/JavaWeb-Servlet/"/>
    <id>http://yoursite.com/JavaWeb-Servlet/</id>
    <published>2019-08-21T07:18:08.000Z</published>
    <updated>2019-08-23T05:57:45.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><ul><li><p>概念：运行在服务器端的小程序  server applet</p><ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到（tomcat识别）的规则</li></ul></li><li><p>使用</p><ol><li><p>创建JavaEE项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span></span><br></pre></td></tr></table></figure></li><li><p>定义一个类，实现Servlet接口</p></li><li><p>实现接口中的抽象方法</p></li><li><p>配置在Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.wnghilin.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>执行原理：</p><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的&lt;url-pattern&gt;标签体内容</li><li>如果有，则再找到对应的&lt;servlet-class&gt;全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li></ul><ul><li><p>Servlet中的生命周期：</p><ol><li><p>被创建：执行init方法，只执行一次</p><ul><li><p>默认情况下，第一次被访问时，Servlet被创建</p></li><li><p>可以配置执行Servlet的创建时机</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.wnghilin.servlet.ServletDemo2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定Servlet创建时机</span></span><br><span class="line"><span class="comment">            1.第一次被访问时，创建</span></span><br><span class="line"><span class="comment">                &lt;load-on-startup&gt;的值为负数</span></span><br><span class="line"><span class="comment">            2.服务器启动时，创建</span></span><br><span class="line"><span class="comment">                &lt;load-on-startup&gt;的值为0或正整数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>提供服务：执行service方法，执行多次</p></li><li><p>被销毁：执行destroy方法，只执行一次</p></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Servlet&quot;&gt;&lt;a href=&quot;#Servlet&quot; class=&quot;headerlink&quot; title=&quot;Servlet&quot;&gt;&lt;/a&gt;Servlet&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概念：运行在服务器端的小程序  server applet&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Web服务器软件：Tomcat</title>
    <link href="http://yoursite.com/JavaWeb-Tomcat/"/>
    <id>http://yoursite.com/JavaWeb-Tomcat/</id>
    <published>2019-08-19T08:13:58.000Z</published>
    <updated>2019-08-21T07:17:27.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web相关概念"><a href="#Web相关概念" class="headerlink" title="Web相关概念"></a>Web相关概念</h2><ol><li>软件架构<ol><li><strong>C/S</strong>：客户端/服务器端</li><li><strong>B/S</strong>：浏览器/服务器端</li></ol></li><li>资源分类<ol><li><strong>静态资源</strong>：所有用户访问后，得到的结果都一样，静态资源可以直接被浏览器解析<ul><li>如：html，css，JavaScript</li></ul></li><li><strong>动态资源</strong>：每一个用户访问相同资源后得到的结果可能不一样。动态资源被访问后，需要先转换为静态资源，再返回给浏览器<ul><li>如：servlet/jsp，php，asp…</li></ul></li></ol></li><li>网络通信三要素<ol><li><strong>IP</strong>：电子设备在网络中的唯一标识</li><li><strong>端口</strong>：应用程序在计算机中的唯一标识。0~65536</li><li><strong>传输协议</strong>：规定了数据传输的规则<ol><li>基础协议：<ol><li><strong>tcp</strong>：安全协议，三次握手。速度稍慢</li><li><strong>udp</strong>：不安全协议。速度快</li></ol></li></ol></li></ol></li></ol><h2 id="Web服务器软件"><a href="#Web服务器软件" class="headerlink" title="Web服务器软件"></a>Web服务器软件</h2><ul><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户请求，处理请求，做出响应</li><li>web服务器软件：接收用户请求，处理请求，做出响应<ul><li>在Web服务器软件中，可以部署web项目，让用户通过浏览器来访问</li><li>web容器</li></ul></li></ul><ul><li>常见的java相关的Web服务器软件：<ul><li>webLogic：Oracle公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li><li>webSphere：IBM公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li><li>JBOSS：JBOSS公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li><li>Tomcat：Apache基金组织，中小型JavaEE服务器，仅仅支持少量JavaEE规范，开源的，免费的。</li></ul></li><li>JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</li></ul><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><ol><li>下载：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></li></ol><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190819163625.png" alt></p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190819163747.png" alt></p><ol start="2"><li>安装：解压压缩包即可<ul><li><strong>注意</strong>：安装目录建议不要有中文</li></ul></li><li>卸载：删除目录即可</li><li>启动</li></ol><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20190821110351.png" alt></p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821110902.png" alt></p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821111428.png" alt></p><ul><li><p>可能遇到的问题：</p><ol><li><p>黑窗口一闪而过：</p><ul><li>原因：没有正确配置JAVA_HOME环境变量</li><li>解决方案：正确配置JAVA_HOME环境变量即可（在环境变量中新建JAVA_HOME环境变量，再将path中的jdk路径修改为%JAVA_HOME%\bin）</li></ul></li><li><p>启动报错</p><ol><li><p>暴力：找到占用的端口号，并找到对应的进程，杀死该进程</p><ul><li><p>netstat -ano：在列表中找到对应端口号的PID</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821112940.png" alt></p></li><li><p>使任务管理器显示PID</p><ul><li><p>win7：任务管理器–&gt;查看–&gt;选择列–&gt;勾选PID</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821113252.png" alt></p></li><li><p>win10：在名称栏处右键，勾选PID</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt></p></li></ul></li><li><p>关闭相应进程</p></li></ul></li><li><p>温柔：修改自身端口号</p><ul><li>安装目录/conf/server.xml，编辑该文件</li></ul><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821113904.png" alt></p><p>注意该文件中的其他端口号也要改，如redirectPort等</p><ul><li>一般会将tomcat的默认端口号修改为80。80端口是http协议的默认端口号，访问时可以不用输入端口号</li></ul></li></ol></li></ol></li></ul><ol start="5"><li><p>关闭</p><ul><li>正常关闭：<ul><li>bin\shutdown.bat</li><li>在启动窗口按ctrl+c</li></ul></li><li>强制关闭：<ul><li>点击启动窗口的×</li></ul></li></ul></li><li><p>配置</p><ul><li><p>部署项目的方式：</p><ol><li>直接将项目放到webapps文件夹下即可（localhost\项目名称\资源文件 可以直接访问）<ul><li>\项目名称：项目的访问路径–&gt;虚拟目录</li><li>简化方式：将项目打包成一个war包，再将war包放置在webapps目录下。<ul><li>在webapps目录下，war包会自动解压</li><li>可以通过将项目压缩为zip文件再改后缀名得到war包，也可通过专门的war打包软件获得</li></ul></li></ul></li><li>/conf/server.xml文件的Host标签提中添加配置</li></ol><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821144851.png" alt></p><ol start="3"><li><p>在\conf\Catalina\localhost文件夹下新建deploy.xml（名字随意），添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"D:\hello"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol><pre><code>此时的虚拟目录：xml文件的名称</code></pre><ul><li><p>静态项目和动态项目</p><ul><li><p>目录结构</p><ul><li><p>静态项目放置静态资源</p></li><li><p>java动态项目的目录结构：</p><p>– 项目的根目录</p><p>​    – WEB-INF目录：</p><p>​        – web.xml：web项目的核心配置文件</p><p>​        – classes目录：防止字节码文件的目录</p><p>​        – lib目录：防止依赖的jar包</p></li></ul></li></ul></li></ul><h2 id="Tomcat集成到IDEA中"><a href="#Tomcat集成到IDEA中" class="headerlink" title="Tomcat集成到IDEA中"></a>Tomcat集成到IDEA中</h2><ol><li><p>打开IDEA</p></li><li><p>Run–&gt;Edit Configurations</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821150338.png" alt></p></li><li><p>选择Template–&gt;Tomcat Server–&gt;Local–&gt;Configure..</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821150548.png" alt></p></li><li><p>选择自己的Tomcat目录</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821150650.png" alt></p></li><li><p>完成配置</p></li><li><p>创建JavaWeb项目</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821151107.png" alt></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Web相关概念&quot;&gt;&lt;a href=&quot;#Web相关概念&quot; class=&quot;headerlink&quot; title=&quot;Web相关概念&quot;&gt;&lt;/a&gt;Web相关概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;软件架构&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;C/S&lt;/strong&gt;：客户端/服务器端&lt;/
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>XML入门</title>
    <link href="http://yoursite.com/JavaWeb-XML/"/>
    <id>http://yoursite.com/JavaWeb-XML/</id>
    <published>2019-08-18T07:11:35.000Z</published>
    <updated>2019-08-19T07:45:56.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h2><ol><li>概念：Extensible Markup Language 可扩展标记语言<ul><li>可扩展：标签都是自定义的</li></ul></li><li>功能：<ul><li>存储数据：<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li><strong>xml</strong>与<strong>html</strong>的区别<ul><li>xml标签都是自定义，html标签时预定义</li><li>xml语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据的</li></ul></li></ol><ul><li>w3c：万维网联盟</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><p>基本语法：</p><ol><li>文档后缀名 .xml</li><li>xml第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号引起来（单双都可）</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol></li><li><p>组成部分：</p><ol><li><p><strong>文档声明</strong></p><ol><li>格式：&lt;?xml$ 属性列表 ?&gt;</li><li>属性列表：<ul><li>version：版本号，必需的属性</li><li>encoding：编码方式，告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</li><li>standalone：是否独立<ul><li>取值<ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul></li></ul></li></ol></li><li><p>指令（了解）：结合css</p><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>标签</strong>：标签名称自定义</p><ul><li>名称可以含字母、数字以及其他的字符</li><li>名称不能以数字或者标点符号开始</li><li>名称不能以字符 “xml”（或者 XML、Xml）开始</li><li>名称不能包含空格</li></ul></li><li><p><strong>属性</strong>：</p><ul><li>id属性值唯一</li></ul></li><li><p><strong>文本</strong></p><ul><li>CDATA区：该区域内的数据会被原样展示<ul><li>格式：&lt;![CDATA[数据]]&gt;</li></ul></li></ul></li></ol></li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>概念：规定xml文档的书写规则<ul><li>在xml中引入约束文档</li><li>读懂约束文档</li></ul></li><li>分类：<ol><li>DTD：一种简单的约束技术</li><li>Schema：一种复杂的约束技术</li></ol></li></ul><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><ul><li><p>引入dtd文档到xml文档中：</p><ul><li>内部dtd：将约束规则定义在xml文档中（较少使用）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE students [</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT students (student*) &gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT student (name,age,sex)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT name (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT age (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT sex (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST student number ID #REQUIRED&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外部dtd：将约束的规则定义在外部的dtd文件中<ul><li>本地：&lt;!DOCTYPE 根标签名 SYSTEM “dtd文件的位置”&gt;</li><li>网络：&lt;!DOCTYPE 根标签名 PUBLIC “dtd文件名字” “dtd文件的位置URL”&gt;</li></ul></li></ul></li></ul><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><ul><li><p>引入过程</p><ol><li><p>填写xml文档的根元素</p></li><li><p>引入xsi前缀.  xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;" target="_blank" rel="noopener">http://www.w3.org/2001/XMLSchema-instance&quot;</a></p></li><li><p>引入xsd文件命名空间.  xsi:schemaLocation=”命名空间url  文件名.xsd”</p></li><li><p>为每一个xsd约束声明一个前缀,作为标识  xmlns:前缀=”命名空间”</p></li></ol></li></ul><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ul><li>概念：操作xml文档，将文档中的数据读取到内存中<ul><li>操作xml文档<ol><li><strong>解析</strong>(读取)：将文档中的数据读取当内存中</li><li>写入：将内存中的数据保存到xml文档中</li></ol></li><li>解析xml方式：<ol><li><strong>DOM</strong>：将标记语言文档一次性加载进内存，形成一棵DOM树<ul><li>优点：操作方便，可以对文件进行CRUD所有操作</li><li>缺点：占内存</li></ul></li><li><strong>SAX</strong>：逐行读取，基于事件驱动<ul><li>优点：不占内存</li><li>缺点：只能<strong>读取</strong>，不能增删改</li></ul></li></ol></li></ul></li><li>xml常见解析器：<ol><li>JAXP：Sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li>PULL：Android内置的解析器，sax方式</li></ol></li></ul><h3 id="Jsoup解析器"><a href="#Jsoup解析器" class="headerlink" title="Jsoup解析器"></a>Jsoup解析器</h3><ul><li>步骤：<ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jsoupDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//2.获取Document对象，根据xml文档获取</span></span><br><span class="line">        <span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">        String path = jsoupDemo1.class.getClassLoader().getResource(<span class="string">"student.xml"</span>).getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载进内训，获取dom树</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象 Element对象</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>对象的使用：</p><ol><li><p><strong>Jsoup</strong>：工具类，可以解析html或xml文档，返回Document</p><ul><li><p>parse：解析html或xml文档，返回Document</p><ul><li><strong>parse</strong>(File in, String charsetName)：解析xml或html文件</li><li><strong>parse</strong>(String html)：解析xml或html字符串，参数为html或xml代码</li><li><strong>parse</strong>(URL url, int timeoutMillis)：通过网络路径获取指定的文档对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://网址"</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><ol start="2"><li><p><strong>Document</strong>：文档对象。代表内存中的dom树</p><ul><li>获取Element对象<ul><li>getElementById(String id)：根据id属性值获取唯一的元素对象</li><li><strong>getElementsByTag</strong>(<strong>String</strong> <strong>TagName</strong>)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值来获取元素对象</li></ul></li></ul></li><li><p><strong>Elements</strong>：元素Element对象的a’t’h集合。可以当作ArrayList&lt;Elements&gt;来使用</p></li><li><p><strong>Element</strong>：元素对象</p><ol><li>获取子元素对象<ul><li>getElementById(String id)：根据id属性值获取唯一的元素对象</li><li><strong>getElementsByTag</strong>(<strong>String</strong> <strong>TagName</strong>)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值来获取元素对象</li></ul></li><li>获取属性值<ul><li>String attr(String key)：根据属性名称获取属性值</li></ul></li><li>获取文本内容<ul><li>String text()：获取文本内容</li><li>String html()：获取标签体的所有内容（包括子标签的字符串内容）</li></ul></li></ol></li><li><p><strong>Node</strong>：节点对象</p><ul><li>是Document和Element的父类</li></ul></li></ol><ul><li><p>快捷查询方式：</p><ol><li><p>selector：选择器</p><ul><li>方法：Elements select(String cssQuery)<ul><li>语法：参考Selector类中定义的语法</li></ul></li></ul></li><li><p>XPath：<strong>XPath</strong>即为<strong>XML路径语言</strong>（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。</p><ul><li>使用Jsoup的Xpath需要额外导入jar包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">    JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//4.结合xpath语法查询（具体查看文档）</span></span><br><span class="line">    List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XML简介&quot;&gt;&lt;a href=&quot;#XML简介&quot; class=&quot;headerlink&quot; title=&quot;XML简介&quot;&gt;&lt;/a&gt;XML简介&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;概念：Extensible Markup Language 可扩展标记语言&lt;ul&gt;
&lt;li&gt;可扩展：标签
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="xml" scheme="http://yoursite.com/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>前端开发框架——Bootstrap</title>
    <link href="http://yoursite.com/JavaWeb-Bootstrap/"/>
    <id>http://yoursite.com/JavaWeb-Bootstrap/</id>
    <published>2019-08-17T07:59:03.000Z</published>
    <updated>2019-08-17T13:14:12.881Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Bootstrap是美国<a href="https://baike.baidu.com/item/Twitter/2443267" target="_blank" rel="noopener">Twitter</a>公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、<a href="https://baike.baidu.com/item/JavaScript/321142" target="_blank" rel="noopener">JavaScript</a> 开发的简洁、直观、强悍的<a href="https://baike.baidu.com/item/前端/5956545" target="_blank" rel="noopener">前端</a>开发框架，使得 Web 开发更加快捷。</p></blockquote><h2 id="Bootstrap简介"><a href="#Bootstrap简介" class="headerlink" title="Bootstrap简介"></a>Bootstrap简介</h2><ol><li><p>好处</p><ol><li>Bootstrap定义了很多css样式和js插件，可以提供极为丰富的页面效果</li><li>响应式布局。<ul><li>同一套页面可以兼容不同分辨率的设备</li></ul></li></ol></li><li><p>使用</p><ol><li><p>下载Bootstra <a href="https://v3.bootcss.com/" target="_blank" rel="noopener">https://v3.bootcss.com/</a></p></li><li><p>将3个文件夹复制进项目</p></li><li><p>创建html页面，引入必要的资源文件，以下为基本模板（去掉了兼容ie8的设置）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><ul><li><p>同一套页面可以建中不同分辨率的设备</p></li><li><p>实现：依赖于<strong>栅格系统</strong></p><ul><li>栅格系统：将一行平均分为12个格子，可以指定元素占几个格子</li></ul></li><li><p>步骤：</p><ol><li><p>定义<strong>容器</strong>。相当于table</p><ol><li>分类：<ol><li><strong>container</strong>：两边留白</li><li><strong>container-fluid</strong>：每种设备都占满100%宽度</li></ol></li></ol></li><li><p>定义<strong>行</strong>。相当于tr      样式：<strong>row</strong></p></li><li><p>定义<strong>元素</strong>。指定该元素在不同的设备上所占的格子的数目    样式：<strong>col-设备代号-格子数目</strong></p><ul><li><p>设备代号：</p><ol><li><strong>xs</strong>：超小屏幕  手机( &lt;768px )</li><li><strong>sm</strong>：小屏幕  平板( ≥768px )</li><li><strong>md</strong>：中等屏幕  桌面显示器( ≥1200px )</li><li><strong>lg</strong>：大屏幕  大桌面显示器( 大于等于1200px )</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.定义容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.定义行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 3.定义元素</span></span><br><span class="line"><span class="comment">                大显示器一行12个格子</span></span><br><span class="line"><span class="comment">                pad上一行6个格子</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注</strong>：</p><ol><li>一行中格子数目超过12，超出部分自动换行</li><li>栅格类属性可以向上兼容（适用于与屏幕宽度大于或等于分界点大小的设备）</li><li>如果设备宽度小于设置栅格类属性设备代码的最小值，会一个元素占满一整行</li></ol></li></ul></li></ol></li></ul><h2 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h2><h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h3><ul><li><p>全局CSS样式</p><ul><li><p><strong>按钮</strong>：<a href="https://v3.bootcss.com/css/#buttons" target="_blank" rel="noopener">官方文档</a></p><ul><li><p>设置默认按钮：<a href="https://v3.bootcss.com/css/#buttons-tags" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置按钮样式: <a href="https://v3.bootcss.com/css/#buttons-options" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>（默认样式）Default<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>（首选项）Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>（成功）Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>（一般信息）Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>（警告）Warning<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>（危险）Danger<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-link"</span>&gt;</span>（链接）Link<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置按钮尺寸：<a href="https://v3.bootcss.com/css/#buttons-sizes" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-lg"</span>&gt;</span>（大按钮）Large button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>（默认尺寸）Default button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-sm"</span>&gt;</span>（小按钮）Small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-xs"</span>&gt;</span>（超小尺寸）Extra small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><strong>图片</strong></p><ul><li><p>图片在任意尺寸都占100%</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span> <span class="attr">alt</span>=<span class="string">"Responsive image"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>图片的形状</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方形--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--圆形--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-circle"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--相框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>表格</strong>：<a href="https://v3.bootcss.com/css/#tables" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>表单</strong>：<a href="https://v3.bootcss.com/css/#forms" target="_blank" rel="noopener">官方文档</a></p><ul><li><p>可以给表单项添加：class=”form-control”(所有设置了 <code>.form-control</code> 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%;</code>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail1"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail1"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputPassword1"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputPassword1"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputFile"</span>&gt;</span>File input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"exampleInputFile"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Example block-level help text here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Check me out</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>组件：</p><ul><li><p>导航条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>分页条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="JS插件"><a href="#JS插件" class="headerlink" title="JS插件"></a>JS插件</h3><ul><li>轮播图：<a href="https://v3.bootcss.com/javascript/#carousel" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Bootstrap是美国&lt;a href=&quot;https://baike.baidu.com/item/Twitter/2443267&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Twitter&lt;/a&gt;公司的设计师Mark Otto
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Bootstrap" scheme="http://yoursite.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>数据库连接池与JDBC Template</title>
    <link href="http://yoursite.com/JavaWeb_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8EJDBC-Template/"/>
    <id>http://yoursite.com/JavaWeb_数据库连接池与JDBC-Template/</id>
    <published>2019-08-15T07:32:58.000Z</published>
    <updated>2019-08-16T04:02:01.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ul><li>概念：一个容器（集合），用来存放数据库连接。当系统初始化好后，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器</li><li>优势:<ol><li>节约资源</li><li>用户访问高效</li></ol></li><li>实现：<ol><li>标准接口：DataSource    javax.sql包下的<ol><li>方法：<ul><li>获取连接：getConnection()</li><li>归还连接：如果连接对象Conection是从连接池中获取，调用Connection.close()，则不会再关闭连接，而是归还连接</li></ul></li></ol></li><li>由数据库厂商来实现<ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供</li></ol></li></ol></li></ul><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><ul><li><p>步骤：</p><ol><li>导入jar包：c3p0-0.9.5.2.jar和mchange-commons-java-0.2.12.jar（不能忘记导入数据库驱动jar包）</li><li>定义配置文件<ul><li>名称：c3p0.properties 或 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可</li></ul></li><li>创建核心对象   数据库连接池对象  ComboPooledDataSource</li><li>获取连接：getConnection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建数据库连接池</span></span><br><span class="line">DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">//2.获取连接对象s</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure></li></ul><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><ul><li>步骤：<ol><li>导入jar包：druid-1.0.9.jar(和数据库驱动jar包)</li><li>定义配置文件<ol><li>properties形式</li><li>可以叫任意名称，可以放在任意目录下</li></ol></li><li>加载配置文件.properties</li><li>获取数据库连接池对象：通过工厂类来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.配置文件</span></span><br><span class="line">        <span class="comment">//3.加载配置文件</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = DruidDemo1.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line">        <span class="comment">//4.获取连接池对象</span></span><br><span class="line">        DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.获取连接</span></span><br><span class="line">        Connection conn = ds.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义工具类<ol><li>定义一个类 JDBCUtils</li><li>提供方法：<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li></ol></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义成员变量Datasource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>));</span><br><span class="line">            <span class="comment">//获取Datasource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源，此处close为归还连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span></span>&#123;略，同上&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, DataStatement stmt, Connection conn)</span></span>&#123;略，同上&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSourse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li>Spring框架对JDBC的简单封装。提供JDBCTemplate对象简化JDBC的开发</li><li>步骤<ol><li>导入jar包</li><li>创建JdbcTemplate对象。依赖于数据源的DataSource<ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul></li><li>调用JdbcTemplate的方法完成CRUD操作<ul><li>update()：执行DML语句</li><li>queryForMap()：查询结果，将结果封装为map集合<ul><li>查询的结果集长度只能是1，即只能查找一条结果</li></ul></li><li>queryForList()：查询结果，将结果封装为list集合<ul><li>将每一条记录封装成map集合，再将这些map封装成list集合</li></ul></li><li>query()：查询结果，将结果封装为JavaBean对象<ul><li>参数：RowMapper<ul><li>一般使用BeanPropertyRowMapper，见下方实例</li></ul></li></ul></li><li>queryForObject()：查询结果，将结果封装为对象</li></ul></li></ol></li></ul><p>update方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTemplateDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        String sql = <span class="string">"update account set balance = 5000 where id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">3</span>);<span class="comment">//将?的值设置为3</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>query方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTemplateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试query()方法,自写RowMapper实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">        List&lt;Account&gt; accounts = template.query(sql, <span class="keyword">new</span> RowMapper&lt;Account&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Account ac = <span class="keyword">new</span> Account();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                <span class="keyword">int</span> balance = rs.getInt(<span class="string">"balance"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">                ac.setBalance(balance);</span><br><span class="line">                ac.setName(name);</span><br><span class="line">                ac.setId(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ac;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(accounts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用写好的BeanProperRowMapper类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Account&gt; accounts = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class));</span><br><span class="line"></span><br><span class="line">        System.out.println(accounts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库连接池&quot;&gt;&lt;a href=&quot;#数据库连接池&quot; class=&quot;headerlink&quot; title=&quot;数据库连接池&quot;&gt;&lt;/a&gt;数据库连接池&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;概念：一个容器（集合），用来存放数据库连接。当系统初始化好后，容器中会申请一些连接对象，当用户来
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JDBC-在Java中操作数据库</title>
    <link href="http://yoursite.com/JavaWeb-JDBC/"/>
    <id>http://yoursite.com/JavaWeb-JDBC/</id>
    <published>2019-08-14T09:02:19.000Z</published>
    <updated>2019-08-15T07:04:31.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JDBC基础"><a href="#JDBC基础" class="headerlink" title="JDBC基础"></a>JDBC基础</h2><ul><li><p>概念：Java Database Connectivity  Java数据库连接</p><ul><li>本质：官方定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商实现这套接口，提供数据库驱动 jar 包，可以使用（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul></li><li><p>快速入门：</p><ul><li><p>步骤：</p><ol><li>导入驱动jar包 mysql-connector-java-版本号-bin.jar<ol><li>复制到mysql-connector-java-版本号-bin.jar到项目的libs目录下</li><li>右键 –&gt; Add As Libary</li></ol></li><li>注册驱动</li><li>获取数据库的连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class JDBCdemo1 &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.导入驱动jar包</span><br><span class="line">        //2.注册驱动</span><br><span class="line">        Class.forName("com.mysql.jdbc.Driver");</span><br><span class="line">        //3.获取数据库连接对象 Connection</span><br><span class="line">        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db2", "用户名", "密码");</span><br><span class="line">        //4.定义sql语句</span><br><span class="line">        String sql = "sql语句";</span><br><span class="line">        //5.获取执行sql的对象 Statement</span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        //6.执行sql</span><br><span class="line">        int count = stmt.executeUpdate(sql);</span><br><span class="line">        //7.处理结果</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        //8.释放资源</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="详解各个对象"><a href="#详解各个对象" class="headerlink" title="详解各个对象"></a>详解各个对象</h2><h3 id="DriverManager：驱动管理对象"><a href="#DriverManager：驱动管理对象" class="headerlink" title="DriverManager：驱动管理对象"></a>DriverManager：驱动管理对象</h3><ul><li><p>功能：</p><ol><li><p>注册驱动：该执行哪一个jar包</p><ol><li><p>static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。 </p></li><li><p>写代码使用：  Class.forName(“com.mysql.jdbc.Driver”);</p><ul><li>在com.mysql.jdbc.Driver类中存在静态代码块，该代码的内容为调用registerDriver方法，所以方法2较为方便。</li></ul><p><strong>注</strong>：mysql5之后的驱动jar包可以省略注册驱动的步骤</p></li></ol></li><li><p>获取数据库连接</p><ul><li>方法：static Connection getConnection(String url, String user, String password) </li><li>参数：<ul><li>url：指定连接的路径<ul><li>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</li><li>如果连接的是本机的mysql服务器，并且mysql服务器默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</li></ul></li><li>user：用户名</li><li>password：密码</li></ul></li></ul></li></ol></li></ul><h3 id="Connection：数据库连接对象"><a href="#Connection：数据库连接对象" class="headerlink" title="Connection：数据库连接对象"></a>Connection：数据库连接对象</h3><ul><li>功能：<ol><li>获取执行sql的对象：<ul><li>Statement createStatement()</li><li>PreparedStatement prepareStatement(String sql)</li></ul></li><li>管理事务：<ul><li>开启事务：void setAutoCommit(boolean autoCommit)   <ul><li>调用该方法，设置参数为false，即开启事务</li></ul></li><li>提交事务：commit()</li><li>回滚事务：rollback()</li></ul></li></ol></li></ul><h3 id="Statement：执行sql的对象"><a href="#Statement：执行sql的对象" class="headerlink" title="Statement：执行sql的对象"></a>Statement：执行sql的对象</h3><ul><li>执行sql<ul><li>boolean execute(String sql)：可以执行任意sql语句（了解）</li><li>int executeUpdate(String sql)：执行DML语句、DDL语句<ul><li>返回值：影响的行数，通过影响的行数判断执行是否成功(若大于 0 则执行成功)，创建表返回值为0</li></ul></li><li>ResultSet executeQuery(String sql)：执行DQL(select)语句</li></ul></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCdemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2.定义SQL</span></span><br><span class="line">            String sql = <span class="string">"insert into account values(null, 'wangwu', 3000)"</span>;</span><br><span class="line">            <span class="comment">//3.获取Connection对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql:///db2"</span>, <span class="string">"root"</span>, <span class="string">"wnghilin"</span>);</span><br><span class="line">            <span class="comment">//4.获取Statement对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.执行Sql</span></span><br><span class="line">            <span class="keyword">int</span> count = stmt.executeUpdate(sql); <span class="comment">//影响的行数</span></span><br><span class="line">            <span class="comment">//6.处理结果</span></span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//7.释放资源</span></span><br><span class="line">            <span class="comment">//注意避免空指针异常</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ResultSet：结果集对象"><a href="#ResultSet：结果集对象" class="headerlink" title="ResultSet：结果集对象"></a>ResultSet：结果集对象</h3><ul><li><p>功能：封装查找结果</p><ul><li>next()：游标向下移动一行(游标最开始指向如图所示位置)</li></ul><p><img src="https://s2.ax1x.com/2019/08/15/mA4oKx.png" alt></p><ul><li>getXxx(参数)：获取数据<ul><li>Xxx：代表数据    如：int getInt(),   String getString()</li><li>参数：<ul><li>int：代表列的编号，如：getString(1)，获取第一列，不是从0开始</li><li>String：代表列的名称，如：getInt(“id”)</li></ul></li></ul></li></ul></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCdemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2.定义SQL</span></span><br><span class="line">            String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">            <span class="comment">//3.获取Connection对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql:///db2"</span>, <span class="string">"root"</span>, <span class="string">"wnghilin"</span>);</span><br><span class="line">            <span class="comment">//4.获取Statement对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.执行Sql</span></span><br><span class="line">            result = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//6.处理结果</span></span><br><span class="line">            <span class="comment">//6.1让游标向下移动一行</span></span><br><span class="line">            result.next();</span><br><span class="line">            <span class="comment">//6.2获取数据</span></span><br><span class="line">            <span class="keyword">int</span> id = result.getInt(<span class="string">"id"</span>);</span><br><span class="line">            String name = result.getString(<span class="string">"name"</span>);</span><br><span class="line">            <span class="keyword">double</span> balance = result.getDouble(<span class="number">3</span>);</span><br><span class="line">            System.out.println(id + <span class="string">"---"</span> + name + <span class="string">"---"</span> + balance);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//7.释放资源</span></span><br><span class="line">            <span class="comment">//注意避免空指针异常</span></span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        stmt.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        conn.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreparedStatement：执行sql的对象"><a href="#PreparedStatement：执行sql的对象" class="headerlink" title="PreparedStatement：执行sql的对象"></a>PreparedStatement：执行sql的对象</h3><ol><li><p>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接，会造成安全问题</p><ol><li><p>输入用户随便，输入密码a’ or ‘a’ = ‘a</p></li><li><p>sql: select * from user where username = ‘随便’ and password = ‘a’ or ‘a’ = ‘a’</p><p>一定返回true</p></li></ol></li><li><p>解决：使用PreparedStatement</p></li><li><p>预编译的SQL：参数使用?作为占位符</p></li><li><p>步骤</p><ol><li>导入驱动jar包 mysql-connector-java-版本号-bin.jar</li><li>注册驱动</li><li>获取数据库的连接对象 Connection</li><li>定义sql<ul><li>注意：sql参数使用?作为占位符，如select * from user where username=? and password = ?;</li></ul></li><li>获取执行sql语句的对象 PreparedStatement<ul><li>Connection.prepareStatement(String sql)</li></ul></li><li>给?赋值<ul><li>方法：setXxx(参数1, 参数2)</li><li>参数1：?的位置，从1开始</li><li>参数2：?的值</li></ul></li><li>执行sql，接受返回结果，不需要再传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li><p><strong>优势</strong>：</p><ul><li>可以防止SQL注入</li><li>效率更高</li></ul></li></ol><hr><h2 id="抽取JDBC工具类：JDBCUtils"><a href="#抽取JDBC工具类：JDBCUtils" class="headerlink" title="抽取JDBC工具类：JDBCUtils"></a>抽取JDBC工具类：JDBCUtils</h2><ul><li>目的：简化书写</li><li>分析：<ul><li>注册驱动抽取</li><li>抽取方法获取连接对象<ul><li>不传递参数，但需要保证类的通用性</li><li>解决方案：配置文件</li></ul></li><li>抽取方法释放资源</li></ul></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次就可以拿到这些值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Properties集合类</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式:ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">            <span class="comment">//2.加载文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            <span class="comment">//4.注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JDBC基础&quot;&gt;&lt;a href=&quot;#JDBC基础&quot; class=&quot;headerlink&quot; title=&quot;JDBC基础&quot;&gt;&lt;/a&gt;JDBC基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概念：Java Database Connectivity  Java数据库连接&lt;/p&gt;

      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL简要学习</title>
    <link href="http://yoursite.com/JavaWeb_MySQL/"/>
    <id>http://yoursite.com/JavaWeb_MySQL/</id>
    <published>2019-08-11T08:43:16.000Z</published>
    <updated>2019-08-14T07:51:05.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><hr><ul><li><strong>数据库</strong>(database)：<ul><li>用于存储和管理数据的仓库</li><li>特点：<ol><li>持久化存储数据（数据库就是一个文件系统）</li><li>方便存储和管理数据</li><li>使用同意的方式操作数据库  — SQL</li></ol></li><li>数据库软件：Oracle、MySQL、Microsoft SQL Server、DB2</li></ul></li></ul><hr><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>服务启动：<ul><li>net start mysql：需要管理员权限</li><li>services.msc</li></ul></li><li>登录：<ol><li>mysql -uroot -p<strong>自己的密码</strong>(mysql -uroot -p也可)</li><li>mysql -h<strong>ip</strong> -uroot -p<strong>链接目标的密码</strong>（ip替换为目标的ip地址）</li><li>mysql –host=<strong>ip</strong> –user=root –password=root</li></ol></li><li>退出：<ol><li>exit</li><li>quit</li></ol></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ol><li>安装目录<ul><li>配置文件：my.ini</li></ul></li><li>数据目录<ul><li>数据库：文件夹</li><li>表：文件</li><li>数据：文件中储存的数据</li></ul></li></ol><hr><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>Struct Query Language：结构化查询语言</li><li>操作所有关系型数据库的规则</li><li>每一种数据库操作方式存在不一样的地方，称为“方言”</li></ul><h3 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h3><ol><li>SQL语句可以单行或多行书写，以分号结尾</li><li>使用空格和缩进增强语句可读性</li><li>MySQL的SQL语句不区分大小写，但关键字建议用大写</li><li>3种注释：<ul><li>单行注释：<strong>– 注释内容</strong>或 <strong># 注释内容</strong>（注意空格）</li><li>多行注释：<strong>/* 注释 */</strong></li></ul></li></ol><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><strong>DDL(Data Definition Language)数据定义语言</strong><ul><li>用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</li></ul></li><li><strong>DML(Data Manipulation Language)数据操作语言</strong><ul><li>用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</li></ul></li><li><strong>DQL(Data Query Language)数据查询语言</strong><ul><li>用来查询数据库中表的记录(数据)。关键字：select, where 等</li></ul></li><li><strong>DCL(Data Control Language)数据控制语言</strong>(了解)<ul><li>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</li></ul></li></ol><h3 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h3><ol><li><p>操作数据库：CRUD</p><ol><li><p>C(<strong>Create</strong>)：创建</p><ul><li>创建数据库<ul><li>create database 数据库名;</li><li>create database if not exists 数据库名;– 如果数据库不存在，则创建数据库</li><li>create database 数据库名 character set 字符集名;– 手动指定字符集</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建db4并且将其字符集设置为gbk</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> db4 <span class="built_in">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>R(<strong>Retrieve</strong>)：查询</p><ul><li>查询所有数据库的名称：<ul><li>show databases;</li></ul></li><li>查看某个数据库的字符集，查询某个数据库的创建语句<ul><li>show create database 数据库名称;</li></ul></li></ul></li><li><p>U(<strong>Update</strong>)：修改</p><ul><li>修改数据库的字符集<ul><li>alter database 数据库名称 character set 字符集名称;</li></ul></li></ul></li><li><p>D(<strong>Delete</strong>)：删除</p><ul><li>删除数据库<ul><li>drop database 数据库名称;</li><li>drop database if exisits 数据库名称; – 判断数据库是否存在</li><li><strong>慎用</strong></li></ul></li></ul></li><li><p>使用数据库</p><ul><li>查询当前正在使用的数据库名称<ul><li>select database();</li></ul></li><li>使用数据库<ul><li>use 数据库名称;</li></ul></li></ul></li></ol><ol start="2"><li><p>操作表：CRUD</p><ol><li><p>C(<strong>Create</strong>)：创建</p><ul><li><p>数据类型：</p><ul><li>int：整数类型<ul><li>age int;</li></ul></li><li>double：小数类型<ul><li>score double(5, 2); – 一共5位，保留两位小数</li></ul></li><li>date：日期，只包含年月日，yyyy-MM-dd</li><li>datetime：日期，包含年月日时分秒，yyyy-MM-dd HH:mm:ss</li><li>timestamp：事件错类型，包含年月日时分秒，yyyy-MM-dd HH:mm:ss<ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间自动赋值</li></ul></li><li>varchar：字符串类型<ul><li>name varchar(20); – 姓名最大20个字符</li><li>zhangsan 8个字符， 张三 2个字符</li></ul></li></ul></li><li><p>创建表</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名<span class="number">1</span> 数据类型<span class="number">1</span>,</span><br><span class="line">    列名<span class="number">2</span> 数据类型<span class="number">2</span>,</span><br><span class="line">    ......</span><br><span class="line">    列名n 数据类型n</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 注意最后一列不用加逗号(,)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>复制表：create table 表名 like 被复制表名;</p></li></ul></li><li><p>R(<strong>Retrieve</strong>)：查询</p><ul><li>查询某个数据库中所有的表名称<ul><li>show tables;</li></ul></li><li>查询表结构<ul><li>desc 表名;</li></ul></li></ul></li><li><p>U(<strong>Update</strong>)：修改</p><ul><li>修改表名<ul><li>alter table 表名 rename to 新的表名;</li></ul></li><li>修改字符集<ul><li>show create table 表名;– 查看表的字符集</li><li>alter table 表名 character set 字符集;</li></ul></li><li>添加一列<ul><li>alter table 表名 add 列名 数据类型;</li></ul></li><li>修改列名称 类型<ul><li>alter table 表名 change 列名 新列名 新数据类型;</li><li>alter table 表名 modify 列名 新数据类型;</li></ul></li><li>删除列<ul><li>alter table 表名 drop 列名;</li></ul></li></ul></li><li><p>D(<strong>Delete</strong>)：删除</p><ul><li>drop table if exists 表名;</li><li>drop table 表名;</li></ul></li></ol></li></ol><h3 id="DML：增删改标中数据"><a href="#DML：增删改标中数据" class="headerlink" title="DML：增删改标中数据"></a>DML：增删改标中数据</h3><ol><li><p>添加数据</p><ul><li><p>语法：</p><ul><li>insert into 表名(列名1, 列名2, …… 列名n) values(值1, 值2, …… 值n);</li></ul></li><li><p>注意：</p><ul><li><p>列名和值应该一一对应</p></li><li><p>如果表名后，不定义列名，则默认给所有列添加值</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INEINSERT INTO stu <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'秀吉'</span>,<span class="number">18</span>,<span class="number">99.2</span>,<span class="string">'2000-08-23'</span>,<span class="literal">NULL</span>,<span class="string">"秀吉"</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>出了数字类型，其他类型需要’ ‘或” “引起来</p></li></ul></li></ul></li><li><p>删除数据</p><ul><li><p>语法：</p><ul><li><p>delete from 表名 [where 条件];</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>注意</strong>：</p><ul><li>如果不加条件，则删除表中所有记录</li><li>truncate table 表名; – 删除表，再创建一个一模一样的空表，建议用这种方式删除全部记录</li><li>delete from 表名; – 执行次数为记录条数，效率较低</li></ul></li></ul></li><li><p>修改数据</p><ul><li>语法：<ul><li>update 表名 set 列名1 = 值1, 列名2 = 值2, … [where 条件];</li></ul></li><li><strong>注意</strong><ul><li>如果不加条件，则修改表中所有数据</li></ul></li></ul></li></ol><h3 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h3><ol><li>语法：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组之后的条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">排序</span><br><span class="line"><span class="keyword">limit</span></span><br><span class="line">分页限定</span><br></pre></td></tr></table></figure><ol start="2"><li><p>基础查询</p><ol><li><p>多个字段的查询</p><ul><li>select 字段名1, 字段名2… from 表名;</li><li>可用*来替代所有字段</li></ul></li><li><p>去除重复</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 去除重复的结果集</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> address <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>计算列</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算math和english两列的和</span></span><br><span class="line"><span class="comment">-- 如果有null参加运算，则结果仍为null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, math, english, math + english <span class="keyword">FROM</span> student3;</span><br><span class="line"><span class="comment">-- 将NULL替换为0</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, math, <span class="keyword">IFNULL</span>(english), math + english <span class="keyword">FROM</span> student3;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>起别名</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, math, english, math + english <span class="keyword">AS</span> 总分 <span class="keyword">FROM</span> student3;</span><br><span class="line"><span class="comment">-- 简化形式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, math 数学, english 英语, math + english 总分 <span class="keyword">FROM</span> student3;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>条件查询</p><ol><li><p>where后跟条件</p></li><li><p>运算符</p><ul><li>“&gt;”, “&lt;”, “&lt;=”, “&gt;=”, “=”, “&lt;&gt;”</li><li>BETWEEN…AND</li><li>IN（集合）</li><li>LIKE<ul><li>占位符：<ul><li>_：单个任意字符</li><li>%：多个任意字符</li></ul></li></ul></li><li>IS NULL</li><li>and 或 &amp;&amp;</li><li>or 或 ||</li><li>not 或 !</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄在20到30之间的（包含20和30）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 查询英语成绩为空</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">-- 查询英语成绩不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>模糊查询</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有姓王的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'王%'</span>;</span><br><span class="line"><span class="comment">-- 查询名字有三个字的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'___'</span>;</span><br><span class="line"><span class="comment">-- 查询姓名中有“国”字的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'%国%'</span>;</span><br></pre></td></tr></table></figure></li><li></li></ul></li></ol><ul><li><p>排序查询</p><ul><li><p>语法：</p><ul><li>order by 排序字段1 排序方式1, 排序字段2 排序方式2, …;</li><li>先按字段1排序，如有相同，按字段2排序，以此类推。</li></ul></li><li><p>排序方式</p><ul><li><p>ASC：升序，默认</p></li><li><p>DESC：降序</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">ORDER</span> <span class="keyword">BY</span> math <span class="keyword">ASC</span>, english <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>聚合函数：将一列数据作为一个整体，进行纵向的计算。</p><ol><li>count：计算个数</li><li>max：计算最大值</li><li>min：计算最小值</li><li>sum：计算和</li><li>avg：计算平均值<ul><li><strong>注</strong>：所有聚合函数会排除为NULL的数据</li></ul></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(math) <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>排除NULL的解决方案</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">IFNULL</span>(english,<span class="number">0</span>)) <span class="keyword">FROM</span> student;<span class="comment">-- 把NULL替换成0，以便统计人数等（不会修改原数据）</span></span><br><span class="line"><span class="comment">-- 或选择非空的列进行计算</span></span><br></pre></td></tr></table></figure></li><li><p>分组查询：</p><ul><li>语法：group by 分组字段;</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照性别分组，并分别求数学的平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> sex, <span class="keyword">AVG</span>(math) <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"><span class="comment">-- 加入分组限定条件</span></span><br><span class="line"><span class="keyword">SELECT</span> sex, <span class="keyword">AVG</span>(math), <span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"><span class="keyword">SELECT</span> sex, <span class="keyword">AVG</span>(math), <span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">id</span>)&gt;<span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：<ol><li>分组之后查询的字段：分组字段，聚合函数</li><li>where 和 having的区别<ol><li>where在分组前限定，如不满足条件，则不参与分组；having在分组后进行限定，如果不满足结果，则不会被查询出来。</li><li>where后不可以跟聚合函数，having可以</li></ol></li></ol></li></ul></li><li><p>分页查询：</p><ul><li>语法：limit 开始的索引, 每页查询的条数;</li><li>开始的索引 = （当前的页码 - 1） *  每页显示的条数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 每一页显示3条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">3</span>; <span class="comment">-- 第一页</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LIMIT</span> <span class="number">3</span>,<span class="number">3</span>; <span class="comment">-- 第二页</span></span><br></pre></td></tr></table></figure><ul><li>分页操作是一个MySQL“ 方言 ” </li></ul></li></ul><h3 id="DCL：管理用户-amp-授权"><a href="#DCL：管理用户-amp-授权" class="headerlink" title="DCL：管理用户&amp;授权"></a>DCL：管理用户&amp;授权</h3><ol><li><p>管理用户</p><ol><li><p>添加用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span> =  <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> = <span class="string">'用户名'</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>);</span><br></pre></td></tr></table></figure><ul><li>忘记root密码<ol><li>管理员运行cmd –&gt; net stop mysql</li><li>使用无验证方式启动mysql：mysqld –skip-grant-tables;</li><li>修改root密码</li><li>在任务管理器中关闭mysqld.exe进程</li></ol></li></ul></li><li><p>查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 切换到mysql数据库</span></span><br><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="comment">-- 查询user表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：% 表示可以在任意主机使用用户登录</li></ul></li></ol></li></ol><ol start="2"><li><p>权限管理</p><ol><li><p>查询权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"><span class="comment">-- 授予所有权限，在任意数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="3"><li><p>撤销权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul><li><p><strong>概念</strong>：对标重的数据进行限定，保证数据的正确性、有效性和完整性。</p></li><li><p><strong>分类</strong>:</p><ol><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ol></li><li><p><strong>非空约束 not null</strong>：</p><ul><li>创建表时添加约束：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="comment">-- name 为非空约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>创建表后添加约束：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><ul><li>删除非空约束 <a name="DeleteNotNULL" href></a></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>唯一约束：unique</strong></p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>, </span><br><span class="line">phone_number <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> phone_number <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>;</span><br><span class="line"><span class="comment">-- 若已有重复数据，则无法添加唯一约束</span></span><br><span class="line"><span class="comment">-- mysql中 唯一约束限定的列的值可以有多个null</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> <span class="keyword">INDEX</span> phone_number;</span><br><span class="line"><span class="comment">-- 注意，与非空约束方法不同</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>主键约束：primary key</strong></p><ul><li><p>基本概念：</p><ol><li>含义：非空且唯一</li><li>一张表只有一个字段为主键</li><li>主键就是表中记录的唯一标识</li></ol></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) </span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">id</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line"><span class="comment">-- 有重复或空则无法添加主键约束</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>自动增长：</p><ul><li>概念：如果某一列是数值类型，使用 auto_increment 可以完成值的自动增长</li><li>创建表时，添加主键乐数，并完成主键自增长</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 之后不用输入id也可实现id的自增长，但也可手动输入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">'ccc'</span>);</span><br></pre></td></tr></table></figure><ul><li>删除：与非空约束方法相同，<a id="gotoMoreDeleteNotNULL" href="#DeleteNotNULL">非空约束的删除</a></li></ul></li></ul></li><li><p><strong>外键约束：foreign key</strong>，让表与表产生关系，从而保证数据的正确性</p><ol><li><p>在创建表时可以添加外键</p><ul><li><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    ......</span><br><span class="line">    外键列,<span class="comment">-- 注意这个逗号</span></span><br><span class="line">    <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> <span class="keyword">key</span> (外键列名称) <span class="keyword">references</span> 主表名称(主表列的名称)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="built_in">INT</span>,</span><br><span class="line">dep_id <span class="built_in">INT</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> emp_dept_fk <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (dep_id) <span class="keyword">REFERENCES</span> department(<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> emp_dept_fk;</span><br></pre></td></tr></table></figure></li><li><p>创建表后创建外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (外键列名称) <span class="keyword">REFERENCES</span> 主表名称(主表列的名称);</span><br></pre></td></tr></table></figure></li><li><p>级联操作：</p><ul><li><p>设置级联更新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (外键列名称) <span class="keyword">REFERENCES</span> 主表名称(主表列的名称) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure></li><li><p>设置级联删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 二者可以同时存在</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (外键列名称) <span class="keyword">REFERENCES</span> 主表名称(主表列的名称) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><hr><h2 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h2><h3 id="多表之间的关系"><a href="#多表之间的关系" class="headerlink" title="多表之间的关系"></a>多表之间的关系</h3><ol><li>一对一<ul><li>一个人只有一张身份证，一个身份证只能对应一个人</li></ul></li><li>一对多（多对一）<ul><li>一个部门有多个员工，一个员工只属于一个部门</li></ul></li><li>多对多<ul><li>一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li></ul></li></ol><ul><li>多表关系的实现<ul><li>一对多（多对一）：<ul><li>在多的一方建立外键，指向一的一方的主键</li></ul></li><li>多对多：<ul><li>需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键。</li></ul></li><li>一对一：<ul><li>在任意一方添加唯一外键指向另一方的主键</li></ul></li></ul></li></ul><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><blockquote><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p></blockquote><ul><li>分类<ol><li>第一范式(1NF)：每一列都是不可分割的原子数据项</li><li>第二范式(2NF)：在1NF基础上，非码属性必须完全依赖于候选码（在1NF基础上<strong>消除</strong>非主属性对主码的<strong>部分函数依赖</strong>）<ul><li>函数依赖：A–&gt;B，通过A的属性值，可以确定唯一B属性的值，则称B依赖于A。<ul><li>如：学号–&gt;姓名  （学号，课程名称）–&gt; 分数</li></ul></li><li>完全函数依赖：A–&gt;B，如果A是一个<strong>属性组</strong>，则B属性值的确定需要依赖于A属性组中<strong>所有</strong>的属性值<ul><li>如：（学号，课程名称）–&gt; 分数</li></ul></li><li>部分函数依赖：A–&gt;B，如果A 是一个<strong>属性组</strong>，则B属性值的确定只需要依赖于A属性值中<strong>某一些</strong>值即可<ul><li>如：（学号，课程名称）–&gt; 姓名</li></ul></li><li>传递函数依赖：A–&gt;B，B–C，称C传递依赖于A</li><li>码：如果在一张表中，一个属性或属性组，被其他<strong>所有属性</strong>所完全依赖，则称这个属性（属性组）为该表的码<ul><li>主属性：码属性组中的所有属性</li><li>非主属性：除去码属性组的属性</li></ul></li></ul></li><li>第三范式(3NF)：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</li></ol></li></ul><hr><h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><ol><li>命令行<ul><li>语法：<ul><li>备份：mysqldump -u用户名 -p密码 数据库的名称 &gt; 保存的路径</li><li>还原：<ol><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行文件：source 文件路径</li></ol></li></ul></li></ul></li><li>图形化工具</li></ol><hr><h2 id="MySQL多表-amp-事务"><a href="#MySQL多表-amp-事务" class="headerlink" title="MySQL多表&amp;事务"></a>MySQL多表&amp;事务</h2><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ul><li><p>查询语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">列名列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line">where......</span><br><span class="line"><span class="comment">-- 查询出的结果为多个表的笛卡儿积</span></span><br></pre></td></tr></table></figure></li><li><p>分类</p><ol><li><p>内连接查询</p><ul><li><p>隐式内连接：使用where条件消除无用数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp, department <span class="keyword">WHERE</span> emp.id = department.id;</span><br><span class="line"><span class="comment">-- 或者使用别名</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">t1.name,</span><br><span class="line">t1.gender,</span><br><span class="line">t2.name</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">emp t1, department t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">t1.id = t2.id;</span><br></pre></td></tr></table></figure></li><li><p>显式内连接：</p><ul><li>select 字段列表 from 表名1 inner join 表名2 on 条件;</li><li>select 字段列表 from 表名1 join 表名2 on 条件;</li></ul></li><li><p>注意事项</p><ul><li>从哪些表查找数据、条件是什么、查询哪些字段</li></ul></li></ul></li><li><p>外连接查询</p><ul><li>左外连接<ul><li>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件;</li><li>查询的是<strong>左表</strong>所有数据以及其交集部分</li></ul></li><li>右外连接<ul><li>语法：select 字段列表 from 表1 right [outer] join 表2 on 条件;</li><li>查询的是<strong>右表</strong>所有数据以及其交集部分</li></ul></li></ul></li><li><p>子查询</p><ul><li><p>概念：查询中嵌套查询，称嵌套查询为子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例子：查找工资最高的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`salary`</span>=(<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure></li><li><p>不同情况</p><ol><li><p>结果是<strong>单行单列</strong></p><ul><li>子查询可以作为条件，使用运算符判断，如上方例子</li><li>$&gt;,&lt;,&gt;=,&lt;=,=$，</li></ul></li><li><p>结果是<strong>多行单列</strong></p><ul><li><p>子查询可以作为条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例子：查询财务部和市场部的所有人员</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'财务部'</span> <span class="keyword">OR</span> <span class="keyword">NAME</span> = <span class="string">'市场部'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>结果是<strong>多行多列</strong></p><ul><li><p>子查询可以作为一张虚拟表来进行表的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> </span><br><span class="line">dept t1, (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`join_date`</span> &gt; <span class="string">'2011-11-11'</span>) t2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">t1.id = t2.dept_id;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul></li></ol></li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ol><li><p>基本介绍</p><ul><li><p>如果一个包含多个步骤的<strong>业务操作</strong>，被<strong>事务</strong>管理，那么这些操作要么同时成功，要么同时失败</p></li><li><p>操作：</p><ol><li>开启事务（start transaction）</li><li>回滚（rollback）</li><li>提交（commit）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">balance <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> (<span class="keyword">NAME</span>, balance) <span class="keyword">VALUES</span> (<span class="string">'zhangsan'</span>, <span class="number">1000</span>), (<span class="string">'lisi'</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="comment">-- 张三给李四转账500元</span></span><br><span class="line"><span class="comment">-- 张三账户-500</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance - <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment">-- 李四账户+500</span></span><br><span class="line">这里出错了......</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance + <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'lisi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 发现执行没有问题，提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 发现出问题，回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>MySQL数据库总事务默认自动提交</p><ul><li><p>一条DML(增删改)语句，会自动提交一次</p></li><li><p>事务提交的方式：</p><ul><li>自动提交</li><li>手动提交：<ul><li>需要先开启事务</li></ul></li></ul></li><li><p>修改默认提交方式</p><ul><li><p>查看默认提交方式：</p><p>SELECT @@autocommit; – 1代表自动提交，0代表手动提交</p></li><li><p>修改 ：SET @@autocommit = 0;</p></li></ul></li></ul></li></ol></li></ul></li><li><p>四大特征</p><ul><li><strong>原子性</strong>：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li><strong>持久性</strong>：当事务提交或回滚后，数据库会持久化地保存数据。</li><li><strong>隔离性</strong>：多个事务之间，相互独立。</li><li><strong>一致性</strong>：事务操作前后，数据总量不变。</li></ul></li><li><p>事务隔离级别（了解）</p><ul><li><p>多个事务操作同一批数据，可能出现问题。可通过设置不同隔离级别来解决这些问题。</p></li><li><p>问题</p><ol><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复读（虚读）：在同一个食物中，两次读取到的数据不一样</li><li>幻读：一个事务操作（DML）数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改</li></ol></li><li><p>隔离级别</p><ol><li>read uncommitted<ul><li>产生问题：脏读、不可重复读、幻读</li></ul></li><li>read committed（Oracle默认）<ul><li>产生问题：不可重复读、幻读</li></ul></li><li>repeatable read（MySQL默认）<ul><li>产生问题：幻读</li></ul></li><li>serializable：串行化<ul><li>可以解决所有问题</li></ul></li></ol><p><strong>注</strong>：隔离级别从小到大安全性越来越高，效率越来越低</p><ul><li><p>查询隔离级别：SELECT @@tx_isolation;</p></li><li><p>设置隔离级别：set global transaction isolation level 级别字符串;（需要重新打开生效）</p></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库的基本概念&quot;&gt;&lt;a href=&quot;#数据库的基本概念&quot; class=&quot;headerlink&quot; title=&quot;数据库的基本概念&quot;&gt;&lt;/a&gt;数据库的基本概念&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据库&lt;/strong&gt;(database)：&lt;ul&gt;
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript简要学习</title>
    <link href="http://yoursite.com/Javascript%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/Javascript简要学习/</id>
    <published>2019-08-01T02:47:11.000Z</published>
    <updated>2019-08-16T10:09:23.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript：</p><ul><li>是<strong>基于对象</strong>和<strong>事件驱动</strong>的语言，应用于<strong>客户端</strong><ul><li>基于对象：<ul><li>提供了很多对象，可直接使用</li></ul></li><li>事件驱动：<ul><li>可以实现动态效果</li></ul></li><li>客户端：指浏览器</li></ul></li><li>特点：<ul><li>交互性<ul><li>信息的动态交互</li></ul></li><li>安全性：<ul><li>js不能访问本地磁盘的文件</li></ul></li><li>跨平台性：<ul><li>通过浏览器实现</li></ul></li></ul></li><li>组成：<ul><li>（1）<strong>ECMAScript</strong><ul><li>ECMA ：欧洲计算机协会</li><li>由ECMA组织指定的js语法和语句</li></ul></li><li>（2）<strong>BOM</strong><ul><li>browser object model 浏览器对象模型</li></ul></li><li>（3）<strong>DOM</strong><ul><li>document object model 文档对象模型</li></ul></li></ul></li></ul><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="JS和HTML的结合方式"><a href="#JS和HTML的结合方式" class="headerlink" title="JS和HTML的结合方式"></a>JS和HTML的结合方式</h3><ul><li><p>（1）使用script标签</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>（2）引入外部的js文件</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">srt</span>=<span class="string">"*.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>script标签放置：可以放在任何位置，但html是从上到下解析，所以最好放在后面，否则JavaScript可能获取不到input等标签里面的值。</p></li></ul><h3 id="原始类型和声明变量"><a href="#原始类型和声明变量" class="headerlink" title="原始类型和声明变量"></a>原始类型和声明变量</h3><ul><li><p>js是弱类型语言</p></li><li><p>定义变量 使用关键字var</p></li><li><p>原始类型：</p><ul><li>string：字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li>number：数字类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><ul><li>boolean：true or false</li><li>null：获取对象的引用，null表示对象引用为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>undefined：定义一个变量，没有赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aa;</span><br></pre></td></tr></table></figure></li><li><p>typeof()：可以查看变量的类型</p></li></ul><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul><li><p>种类：</p><ul><li><p>if判断</p></li><li><p>switch语句：js所有类型都支持</p></li><li><p>循环 for while do-while</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>与java类似</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>与java中不同的：<ul><li>js中不区分整数和小数，123 / 1000 == 0.123</li><li>字符串相加和相减：<ul><li>“456” + 1 == “4561”（相加做字符串连接）</li><li>“456” - 1 == “455”（相减进行真正的相减）</li><li>“abc” - 1会提示NaN表示不是一个数字</li></ul></li><li>boolean操作：<ul><li>true + 1 == 2</li><li>false + 1 == 1</li><li>即true是1，false是0</li></ul></li><li>“ === ”和“ == ”：<ul><li>==：值是否相等</li><li>===：值和类型是否相等</li></ul></li><li>补充：document.write()：<ul><li>直接向页面写入内容，可以写入变量，固定值，html代码</li></ul></li></ul></li></ul><p><a name="Array" href></a></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>定义：</p><ul><li><p>（1）var[] arr = {1, 2, 3}; //数组可以存放不同的数据类型</p></li><li><p>（2）使用内置Array对象</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>); <span class="comment">//建立有5个元素的数组</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">//创建数组&#123;3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>属性：</p><ul><li>（1）length：arr.length;</li><li><a id="gotoMoreArray" href="#LearnMoreArray">深入学习数组</a></li></ul></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>定义函数：</p><ul><li>（1）使用function关键字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 方法名(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    （返回值）;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数列表直接写参数名称，不用写var</span></span><br></pre></td></tr></table></figure><ul><li>（2）匿名函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体和返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（3）使用内置对象Function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"参数列表"</span>, <span class="string">"方法体和返回值"</span>);</span><br><span class="line"><span class="comment">//使用较少</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><ul><li><strong>全局变量</strong>：在script标签里定义一个变量，其在<strong>整个页面</strong>的js部分都可使用<ul><li>方法内外，在另一个script标签使用</li></ul></li><li><strong>局部变量</strong>：在方法内部定义一个变量，只能在方法内部使用</li></ul><p><a name="Reload" href></a></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><ul><li>定义：函数名相同，函数参数列表不同(参数个数和参数类型)，根据参数不同去执行不同操作，但在js中，同一个作用域，出现两个名字一样的函数，后面的会覆盖前面的。故<strong>JavaScript没有真正意义上的重载</strong>。</li></ul><hr><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li><strong>创建</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>属性</strong>：</p><ul><li><strong>length</strong>：字符串的长度</li></ul></li><li><p><strong>方法</strong>：</p><ul><li><p>（1）与HTML相关：</p><ul><li><strong>bold</strong>：实现加粗</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(str.bold());</span><br></pre></td></tr></table></figure><ul><li><strong>fontcolor</strong>：修改字符串的颜色</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str2.fontcolor(<span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>fontsize</strong>：修改字体大小</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str3.fontsize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>link</strong>：将字符串显示为超链接</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str4.link(<span class="string">"wnghilin.top"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>sub</strong>、<strong>sup</strong>：将字符串显示为上下标</li></ul></li><li><p>（2）与Java类似：</p><ul><li><strong>concat</strong>：连接两个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"gds"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str1.concat(str2));</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">abcgds</span><br></pre></td></tr></table></figure><ul><li><strong>charAt</strong>：返回指定位置的字符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = <span class="string">"abcdefg"</span>;</span><br><span class="line">str3.charAt(<span class="number">0</span>);<span class="comment">//返回a</span></span><br><span class="line">str3.charAt(<span class="number">20</span>);<span class="comment">//返回空字符串</span></span><br></pre></td></tr></table></figure><ul><li><strong>indexOf</strong>：返回字符串位置，若不存在，返回-1</li><li><strong>split</strong>：切分字符串，分为数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str4 = <span class="string">"a-b-c-d"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = str4.split(<span class="string">"-"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>replace</strong>：替换字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str6.replace(<span class="string">"a"</span>, <span class="string">"6"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>substr</strong> 和 <strong>substring</strong>：截取子字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str5 = <span class="string">"abcdefghuiop"</span>;</span><br><span class="line">str5.substr(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">//fgh 从5开始向后开始截取3个字符</span></span><br><span class="line">str5.substring(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">//de 从3位开始，第5位结束但不包含第5位</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><a name="LearnMoreArray" href></a></p><h3 id="Array：数组对象"><a href="#Array：数组对象" class="headerlink" title="Array：数组对象"></a>Array：数组对象</h3><ul><li><p>创建：<a id="goArray" href="#Array">链接</a></p></li><li><p>属性：</p><ul><li>length：数组的长度</li></ul></li><li><p>方法：</p><ul><li><strong>concat</strong>：数组拼接，用法类似字符串</li><li><strong>join</strong>：根据指定字符分隔数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr); <span class="comment">//输出：a, b, c</span></span><br><span class="line"><span class="built_in">document</span>.write(arr.join(<span class="string">"-"</span>)); <span class="comment">//输出：a-b-c</span></span><br></pre></td></tr></table></figure><ul><li><strong>push</strong>：向数组末尾添加一个或多个新的元素，并返回数组新的长度</li></ul><p><strong>&lt;注&gt;</strong>如果向末尾添加的是数组，会将整个数组看作一个元素将其加入到原有数组中</p><ul><li><strong>pop</strong>：删除并返回最后一个元素</li><li><strong>reverse</strong>：反转数组</li></ul></li></ul><h3 id="Date：日期对象"><a href="#Date：日期对象" class="headerlink" title="Date：日期对象"></a>Date：日期对象</h3><ul><li>获取当前时间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date; <span class="comment">//Fri Aug 02 2019 15:51:13 GMT+0800 (中国标准时间)</span></span><br><span class="line">date.toLocaleString();<span class="comment">// 2019/8/2 下午3:53:45</span></span><br></pre></td></tr></table></figure><ul><li>获取当前年月日和星期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date.getFullYear(); <span class="comment">//2019</span></span><br><span class="line">date.getMonth(); <span class="comment">//7，因为返回结果是0-11月，需要再加一返回真实月数</span></span><br><span class="line">date.getDate(); <span class="comment">//2</span></span><br><span class="line">date.getDay(); <span class="comment">//5，返回0-6，星期日是0</span></span><br></pre></td></tr></table></figure><ul><li>获取当前时分秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date.getHours(); <span class="comment">//16</span></span><br><span class="line">date.getMinutes(); <span class="comment">//5</span></span><br><span class="line">date.getSeconds(); <span class="comment">//36</span></span><br></pre></td></tr></table></figure><ul><li>获取毫秒数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.getTime(); <span class="comment">//1564733221660，1970年1月1日至今的毫秒数</span></span><br></pre></td></tr></table></figure><h3 id="Math：数学对象"><a href="#Math：数学对象" class="headerlink" title="Math：数学对象"></a>Math：数学对象</h3><p>都是静态方法，只能通过<strong>类名</strong>+<strong>方法</strong>调用</p><ul><li><p>方法：</p><ul><li><strong>cell</strong>：上舍入</li><li><strong>floor</strong>：下舍入</li><li><strong>round</strong>：四舍五入</li><li><strong>random</strong>：产生0.0到1.0之间的随机数</li></ul></li><li><p>属性</p><ul><li><strong>PI</strong>：圆周率</li><li><strong>E</strong>：自然对数的底数</li></ul></li></ul><h3 id="RegExp：正则表达式对象"><a href="#RegExp：正则表达式对象" class="headerlink" title="RegExp：正则表达式对象"></a>RegExp：正则表达式对象</h3><ol><li><p><strong>正则表达式</strong>：定义字符串的组成规则</p><ol><li><p>单个字符：[ ]</p><p>如：[a] [ab] [a-zA-Z0-9_]</p><p>特殊符号代表特殊含义的单个字符：</p><ul><li>\d：单个数字字符[0-9]</li><li>\w：单个单词字符[a-zA-Z0-9_]</li></ul></li><li><p>量词符号：</p><ul><li><p>*：表示出现0次或多次</p></li><li><p>?：表示出现0次或1次</p></li><li><p>+：表示出现1次或多次</p></li><li><p>{m,n}：表示 $m&lt;=数量&lt;=n$（逗号之后不能打空格）</p><ul><li>m如果缺省，{ ,n}：最多n次</li><li>n如果缺省，{m, }：最少m次</li></ul></li></ul></li><li><p>开始结束符号：</p><ul><li>^：开始</li><li>$：结束</li></ul></li></ol></li><li><p>对象：</p><ol><li><p>创建：</p><ol><li>var reg = new RegExp(“正则表达式”);</li><li>var reg = /正则表达式/;</li></ol></li><li><p>方法：</p><p>test(参数)：验证指定的字符串是否符合正则定义的规范</p></li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RegExp对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\w&#123;6,12&#125;"</span>); <span class="comment">//此处两个\\，防止\w被转义为其他字符</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg2 = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span></span><br><span class="line"></span><br><span class="line">        alert(reg1);</span><br><span class="line">        alert(reg2);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = <span class="string">"zhangsan"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag = reg1.test(name);</span></span><br><span class="line">        alert(flag);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h3><ol><li><p>特点：全局对象，不需要对象名就可以直接使用</p><ul><li><strong>eval</strong>：如果字符串是js代码，使用该方法直接执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"alert(1234)"</span>;</span><br><span class="line"><span class="built_in">eval</span>(str); <span class="comment">//执行alert(1234)</span></span><br></pre></td></tr></table></figure><ul><li><strong>encodeURI</strong> 和 <strong>decodeURI</strong>：对字符进行编码和解码<ul><li>将中文先编码再解码可以有效防止乱码</li></ul></li><li><strong>encodeURIComponent</strong> 和 <strong>decodeURIComponent</strong>：<ul><li>与上面只有编码字符多少的差别</li></ul></li><li><strong>isNaN</strong>：判断当前字符串是否是数字，若是，返回false<ul><li>NaN参与的” == “比较，全部为false，包括NaN==NaN</li></ul></li><li><strong>parseInt</strong>：解析字符串并返回一个整数<ul><li>逐一判断每一个字符是否是数字，直到不是数字位置，将前面数字转为number</li><li>若第一个字符就是字母，则转为NaN</li></ul></li></ul></li></ol><h3 id="重载-1"><a href="#重载-1" class="headerlink" title="重载"></a>重载</h3><p>有没有重载？<a id="goReload" href="#Reload">链接</a></p><ul><li>重载可模拟实现<ul><li>使用arguments对象实现，这个方法的缺点是麻烦。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'一个参数'</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'两个参数'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数通过arguments[0]...来使用</span></span><br></pre></td></tr></table></figure><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li><p><strong>BOM</strong>：浏览器对象模型</p></li><li><p>有哪些对象：</p><ul><li><p>navigator：可以获取客户机的信息（浏览器的信息）</p><ul><li>navigator.appName; //显示浏览器的名称</li></ul></li><li><p>screen：可返回屏幕信息</p><ul><li>screen.width; //返回屏幕的宽</li><li>screen.height; //返回屏幕的高</li></ul></li><li><p>location：请求url地址</p><ul><li><p>href属性</p><ul><li><p>获取请求的url地址，即浏览器地址栏的地址</p></li><li><p>设置url地址</p><ul><li>可以设置页面按钮的事件，将其跳转到另外一个页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"跳转"</span> <span class="attr">onclick</span>=<span class="string">"href1()"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">href1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        location.href=<span class="string">"http://www.baidu.com"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>history：请求url的历史记录</p><ul><li>可以通过其实现浏览器前进后退功能<ul><li>history.back(); //到上一个页面</li><li>history.forward(); //到下一个页面</li><li>history.go(1); //到下一个页面</li><li>history.go(-1); //到下一个页面</li></ul></li></ul></li><li><p><strong>window</strong></p></li></ul></li></ul><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><ul><li><p>窗口对象</p></li><li><p><strong>顶层对象</strong>（所用的bom对象都是在window对象的里面操作的）</p></li></ul><ul><li><p>方法：</p><ul><li><p>window.alert()：弹出一个消息提示框</p><ul><li>简写alert();</li></ul></li><li><p>confirm()：确认提示框，参数为提示内容</p><ul><li>返回值：若点击确认，则返回true，否则返回false</li></ul></li><li><p>prompt(text, defaultText)：输入对话框</p><ul><li>text为提示输入，defaultText为默认输入内容</li></ul></li><li><p><strong>open(URL,name,features,replace)</strong>：打开一个新窗口，并返回窗口对象</p><ul><li><p><strong>URL</strong>： 一个可选的字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者它的值是空字符串，那么新窗口就不会显示任何文档。</p></li><li><p><strong>name</strong>： 一个可选的字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 <a> 和 <form> 的属性 </form></a></p></li><li><p>*<em>target *</em>的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</p></li><li><p><strong>features</strong>： 一个可选的字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在窗口特征这个表格中，我们对该字符串的格式进行了详细的说明。</p></li><li><p><strong>replace</strong>： 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：</p><pre><code>**true - URL**： 替换浏览历史中的当前条目。</code></pre><p>​             <strong>false - URL：</strong> 在浏览历史中创建新的条目。</p></li></ul></li><li><p>close()：关闭窗口，浏览器兼容性较差</p></li><li><p><strong>做定时器</strong>：</p><ul><li>setInterval(code, millisec)：每millisec毫秒执行一次code代码。</li><li>setTimeout(code, millisec)：在millisec毫秒后执行一次code代码，且只会执行一次</li><li>clearInterval(setInterval的返回值)：清除setInterval设置的定时器</li><li>clearTimeout(setTimeout的返回值)：清除setTimeout设置的定时器</li></ul></li></ul></li></ul><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><ul><li><p>DOM：文档对象模型</p></li><li><p>功能：控制html文档的内容</p></li><li><p>代码：获取页面标签（元素）对象  Element</p><ul><li>document.getElementById(“id值”);  通过元素的id来获得元素对象</li></ul></li><li><p>操作Element对象：</p><ol><li><p>修改属性值：</p></li><li><p>修改标签体内容：</p><p>属性：innerHTML</p></li></ol></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><p>功能：某些组件被执行了某些操作后，触发某些代码的执行</p></li><li><p>绑定事件</p><ol><li><p>直接在html标签上，指定事件的属性，属性值就是js代码</p><ol><li><p>事件：onclick：点击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"light"</span> <span class="attr">src</span>=<span class="string">"img/off.gif"</span> <span class="attr">onclick</span>=<span class="string">"function();"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过js获取元素对象，指定事件属性，设置一个函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> light = <span class="built_in">document</span>.getElementById(<span class="string">"light"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;&#125;</span></span><br><span class="line">        light.onclick = fun2();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;JavaScript：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是&lt;strong&gt;基于对象&lt;/strong&gt;和&lt;strong&gt;事件驱动&lt;/strong&gt;的
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript简要学习</title>
    <link href="http://yoursite.com/JavaWeb_Javascript%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/JavaWeb_Javascript简要学习/</id>
    <published>2019-08-01T02:47:11.000Z</published>
    <updated>2019-08-17T07:49:15.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript：</p><ul><li>是<strong>基于对象</strong>和<strong>事件驱动</strong>的语言，应用于<strong>客户端</strong><ul><li>基于对象：<ul><li>提供了很多对象，可直接使用</li></ul></li><li>事件驱动：<ul><li>可以实现动态效果</li></ul></li><li>客户端：指浏览器</li></ul></li><li>特点：<ul><li>交互性<ul><li>信息的动态交互</li></ul></li><li>安全性：<ul><li>js不能访问本地磁盘的文件</li></ul></li><li>跨平台性：<ul><li>通过浏览器实现</li></ul></li></ul></li><li>组成：<ul><li>（1）<strong>ECMAScript</strong><ul><li>ECMA ：欧洲计算机协会</li><li>由ECMA组织指定的js语法和语句</li></ul></li><li>（2）<strong>BOM</strong><ul><li>browser object model 浏览器对象模型</li></ul></li><li>（3）<strong>DOM</strong><ul><li>document object model 文档对象模型</li></ul></li></ul></li></ul><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="JS和HTML的结合方式"><a href="#JS和HTML的结合方式" class="headerlink" title="JS和HTML的结合方式"></a>JS和HTML的结合方式</h3><ul><li><p>（1）使用script标签</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>（2）引入外部的js文件</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">srt</span>=<span class="string">"*.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>script标签放置：可以放在任何位置，但html是从上到下解析，所以最好放在后面，否则JavaScript可能获取不到input等标签里面的值。</p></li></ul><h3 id="原始类型和声明变量"><a href="#原始类型和声明变量" class="headerlink" title="原始类型和声明变量"></a>原始类型和声明变量</h3><ul><li><p>js是弱类型语言</p></li><li><p>定义变量 使用关键字var</p></li><li><p>原始类型：</p><ul><li>string：字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li>number：数字类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><ul><li>boolean：true or false</li><li>null：获取对象的引用，null表示对象引用为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>undefined：定义一个变量，没有赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aa;</span><br></pre></td></tr></table></figure></li><li><p>typeof()：可以查看变量的类型</p></li></ul><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul><li><p>种类：</p><ul><li><p>if判断</p></li><li><p>switch语句：js所有类型都支持</p></li><li><p>循环 for while do-while</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>与java类似</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>与java中不同的：<ul><li>js中不区分整数和小数，123 / 1000 == 0.123</li><li>字符串相加和相减：<ul><li>“456” + 1 == “4561”（相加做字符串连接）</li><li>“456” - 1 == “455”（相减进行真正的相减）</li><li>“abc” - 1会提示NaN表示不是一个数字</li></ul></li><li>boolean操作：<ul><li>true + 1 == 2</li><li>false + 1 == 1</li><li>即true是1，false是0</li></ul></li><li>“ === ”和“ == ”：<ul><li>==：值是否相等</li><li>===：值和类型是否相等</li></ul></li><li>补充：document.write()：<ul><li>直接向页面写入内容，可以写入变量，固定值，html代码</li></ul></li></ul></li></ul><p><a name="Array" href></a></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>定义：</p><ul><li><p>（1）var[] arr = {1, 2, 3}; //数组可以存放不同的数据类型</p></li><li><p>（2）使用内置Array对象</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>); <span class="comment">//建立有5个元素的数组</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">//创建数组&#123;3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>属性：</p><ul><li>（1）length：arr.length;</li><li><a id="gotoMoreArray" href="#LearnMoreArray">深入学习数组</a></li></ul></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>定义函数：</p><ul><li>（1）使用function关键字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 方法名(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    （返回值）;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数列表直接写参数名称，不用写var</span></span><br></pre></td></tr></table></figure><ul><li>（2）匿名函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体和返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（3）使用内置对象Function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"参数列表"</span>, <span class="string">"方法体和返回值"</span>);</span><br><span class="line"><span class="comment">//使用较少</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><ul><li><strong>全局变量</strong>：在script标签里定义一个变量，其在<strong>整个页面</strong>的js部分都可使用<ul><li>方法内外，在另一个script标签使用</li></ul></li><li><strong>局部变量</strong>：在方法内部定义一个变量，只能在方法内部使用</li></ul><p><a name="Reload" href></a></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><ul><li>定义：函数名相同，函数参数列表不同(参数个数和参数类型)，根据参数不同去执行不同操作，但在js中，同一个作用域，出现两个名字一样的函数，后面的会覆盖前面的。故<strong>JavaScript没有真正意义上的重载</strong>。</li></ul><hr><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li><strong>创建</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>属性</strong>：</p><ul><li><strong>length</strong>：字符串的长度</li></ul></li><li><p><strong>方法</strong>：</p><ul><li><p>（1）与HTML相关：</p><ul><li><strong>bold</strong>：实现加粗</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(str.bold());</span><br></pre></td></tr></table></figure><ul><li><strong>fontcolor</strong>：修改字符串的颜色</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str2.fontcolor(<span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>fontsize</strong>：修改字体大小</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str3.fontsize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>link</strong>：将字符串显示为超链接</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str4.link(<span class="string">"wnghilin.top"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>sub</strong>、<strong>sup</strong>：将字符串显示为上下标</li></ul></li><li><p>（2）与Java类似：</p><ul><li><strong>concat</strong>：连接两个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"gds"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str1.concat(str2));</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">abcgds</span><br></pre></td></tr></table></figure><ul><li><strong>charAt</strong>：返回指定位置的字符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = <span class="string">"abcdefg"</span>;</span><br><span class="line">str3.charAt(<span class="number">0</span>);<span class="comment">//返回a</span></span><br><span class="line">str3.charAt(<span class="number">20</span>);<span class="comment">//返回空字符串</span></span><br></pre></td></tr></table></figure><ul><li><strong>indexOf</strong>：返回字符串位置，若不存在，返回-1</li><li><strong>split</strong>：切分字符串，分为数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str4 = <span class="string">"a-b-c-d"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = str4.split(<span class="string">"-"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>replace</strong>：替换字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str6.replace(<span class="string">"a"</span>, <span class="string">"6"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>substr</strong> 和 <strong>substring</strong>：截取子字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str5 = <span class="string">"abcdefghuiop"</span>;</span><br><span class="line">str5.substr(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">//fgh 从5开始向后开始截取3个字符</span></span><br><span class="line">str5.substring(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">//de 从3位开始，第5位结束但不包含第5位</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><a name="LearnMoreArray" href></a></p><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li><p>创建：<a id="goArray" href="#Array">链接</a></p></li><li><p>属性：</p><ul><li>length：数组的长度</li></ul></li><li><p>方法：</p><ul><li><strong>concat</strong>：数组拼接，用法类似字符串</li><li><strong>join</strong>：根据指定字符分隔数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr); <span class="comment">//输出：a, b, c</span></span><br><span class="line"><span class="built_in">document</span>.write(arr.join(<span class="string">"-"</span>)); <span class="comment">//输出：a-b-c</span></span><br></pre></td></tr></table></figure><ul><li><strong>push</strong>：向数组末尾添加一个或多个新的元素，并返回数组新的长度</li></ul><p><strong>&lt;注&gt;</strong>如果向末尾添加的是数组，会将整个数组看作一个元素将其加入到原有数组中</p><ul><li><strong>pop</strong>：删除并返回最后一个元素</li><li><strong>reverse</strong>：反转数组</li></ul></li></ul><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><ul><li>获取当前时间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date; <span class="comment">//Fri Aug 02 2019 15:51:13 GMT+0800 (中国标准时间)</span></span><br><span class="line">date.toLocaleString();<span class="comment">// 2019/8/2 下午3:53:45</span></span><br></pre></td></tr></table></figure><ul><li>获取当前年月日和星期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date.getFullYear(); <span class="comment">//2019</span></span><br><span class="line">date.getMonth(); <span class="comment">//7，因为返回结果是0-11月，需要再加一返回真实月数</span></span><br><span class="line">date.getDate(); <span class="comment">//2</span></span><br><span class="line">date.getDay(); <span class="comment">//5，返回0-6，星期日是0</span></span><br></pre></td></tr></table></figure><ul><li>获取当前时分秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date.getHours(); <span class="comment">//16</span></span><br><span class="line">date.getMinutes(); <span class="comment">//5</span></span><br><span class="line">date.getSeconds(); <span class="comment">//36</span></span><br></pre></td></tr></table></figure><ul><li>获取毫秒数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.getTime(); <span class="comment">//1564733221660，1970年1月1日至今的毫秒数</span></span><br></pre></td></tr></table></figure><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>都是静态方法，只能通过<strong>类名</strong>+<strong>方法</strong>调用</p><ul><li><p>方法：</p><ul><li><strong>cell</strong>：上舍入</li><li><strong>floor</strong>：下舍入</li><li><strong>round</strong>：四舍五入</li><li><strong>random</strong>：产生0.0到1.0之间的随机数</li></ul></li><li><p>属性</p><ul><li><strong>PI</strong>：圆周率</li><li><strong>E</strong>：自然对数的底数</li></ul></li></ul><h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><ul><li><p>不属于任何对象，致谢写名称使用</p><ul><li><strong>eval</strong>：如果字符串是js代码，使用该方法直接执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"alert(1234)"</span>;</span><br><span class="line"><span class="built_in">eval</span>(str); <span class="comment">//执行alert(1234)</span></span><br></pre></td></tr></table></figure><ul><li><strong>encodeURI</strong> 和 <strong>decodeURI</strong>：对字符进行编码和解码<ul><li>将中文先编码再解码可以有效防止乱码</li></ul></li><li><strong>encodeURIComponent</strong> 和 <strong>decodeURIComponent</strong>：<ul><li>与上面只有编码字符多少的差别</li></ul></li><li><strong>isNaN</strong>：判断当前字符串是否是数字，若是，返回false</li><li><strong>parseInt</strong>：解析字符串并返回一个整数</li></ul></li></ul><h3 id="重载-1"><a href="#重载-1" class="headerlink" title="重载"></a>重载</h3><p>有没有重载？<a id="goReload" href="#Reload">链接</a></p><ul><li>重载可模拟实现<ul><li>使用arguments对象实现，这个方法的缺点是麻烦。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'一个参数'</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'两个参数'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数通过arguments[0]...来使用</span></span><br></pre></td></tr></table></figure><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li><p><strong>BOM</strong>：浏览器对象模型</p></li><li><p>有哪些对象：</p><ul><li><p>navigator：可以货期客户机的信息（浏览器的信息）</p><ul><li>navigator.appName; //显示浏览器的名称</li></ul></li><li><p>screen：可返回屏幕信息</p><ul><li>screen.width; //返回屏幕的宽</li><li>screen.height; //返回屏幕的高</li></ul></li><li><p>location：请求url地址</p><ul><li><p>reload()  重新加载当前文档，刷新</p></li><li><p>href属性</p><ul><li><p>获取请求的url地址，即浏览器地址栏的地址</p></li><li><p>设置url地址</p><ul><li>可以设置页面按钮的事件，将其跳转到另外一个页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"跳转"</span> <span class="attr">onclick</span>=<span class="string">"href1()"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">href1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          location.href=<span class="string">"http://www.baidu.com"</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>history：请求url的历史记录</p><ul><li>可以通过其实现浏览器前进后退功能<ul><li>history.back(); //到上一个页面</li><li>history.forward(); //到下一个页面</li></ul></li><li>history.go(1); //到下一个页面<ul><li>history.go(-1); //到下一个页面</li></ul></li></ul></li><li><p><strong>window</strong></p></li></ul></li></ul><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><ul><li><p>窗口对象</p></li><li><p><strong>顶层对象</strong>（所用的bom对象都是在window对象的里面操作的）</p></li></ul><ul><li><p>方法：</p><ul><li><p>window.alert()：弹出一个消息提示框</p><ul><li>简写alert();</li></ul></li><li><p>confirm()：确认提示框，参数为提示内容</p><ul><li>返回值：若点击确认，则返回true，否则返回false</li></ul></li><li><p>prompt(text, defaultText)：输入对话框</p><ul><li>text为提示输入，defaultText为默认输入内容</li></ul></li><li><p><strong>open(URL,name,features,replace)</strong>：打开一个新窗口，并返回窗口对象</p><ul><li><p><strong>URL</strong>： 一个可选的字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者它的值是空字符串，那么新窗口就不会显示任何文档。</p></li><li><p><strong>name</strong>： 一个可选的字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 <a> 和 <form> 的属性 </form></a></p></li><li><p>*<em>target *</em>的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</p></li><li><p><strong>features</strong>： 一个可选的字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在窗口特征这个表格中，我们对该字符串的格式进行了详细的说明。</p></li><li><p><strong>replace</strong>： 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：</p><pre><code>**true - URL**： 替换浏览历史中的当前条目。</code></pre><p>​             <strong>false - URL：</strong> 在浏览历史中创建新的条目。</p></li></ul></li><li><p>close()：关闭窗口，浏览器兼容性较差</p><ul><li>关闭调用该方法的窗口</li></ul></li><li><p><strong>定时器有关方法</strong>：</p><ul><li>setInterval(code, millisec)：每millisec毫秒执行一次code（js代码或方法对象）代码<ul><li>setInterval(“fun();”, 3000);</li><li>setInterval(fun, 3000);</li></ul></li><li>setTimeout(code, millisec)：在millisec毫秒后执行一次code代码，且只会执行一次</li><li>clearInterval(setInterval的返回值)：清除setInterval设置的定时器</li><li>clearTimeout(setTimeout的返回值)：清除setTimeout设置的定时器</li></ul></li></ul></li></ul><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><ul><li><p>DOM：文档对象模型</p><ul><li><p>文档：超文本标记文档</p></li><li><p>可以用DOM提供的对象，对标记型文档进行操作，但需要把标记型文档里的所有内容封装成对象</p></li><li><p>用DOM解析html：根据html层级结构，在内存中分配一个树形结构，需要把html中的每部分封装成对象</p><p><img src="https://www.w3school.com.cn/i/ct_htmltree.gif" alt></p><ul><li><p><strong>注意每个标签节点后还有文本节点</strong></p></li><li><p><strong>Document对象</strong>：整个html文档</p></li><li><p><strong>Element对象</strong>：标签对象</p></li><li><p><strong>Attribute对象</strong>：属性对象</p></li><li><p><strong>Text对象</strong>：文本对象</p></li><li><p><strong>Comment对象</strong>：注释对象</p></li><li><p>Node节点对象：是这些对象的父对象</p></li></ul></li></ul></li></ul><h4 id="核心DOM模型"><a href="#核心DOM模型" class="headerlink" title="核心DOM模型"></a>核心DOM模型</h4><ul><li><p><strong>Document对象</strong>：整个html文档</p><ol><li>创建（获取）<ul><li>window.document(window可省略)</li></ul></li><li>方法<ol><li>获取Element对象<ol><li>getElementById()  查找具有指定的唯一 ID 的元素</li><li>getElementsByTagName()  根据元素名称获取元素对象（多个），返回值是数组</li><li>getElementsByClassName()  根据Class属性值获取元素对象们，返回值是数组</li><li>getElementsByName()  根据name属性值获取元素对象们</li></ol></li><li>创建其他DOM对象<ol><li>createAttribute(name)</li><li>createComment()</li><li>createElement()</li><li>createTextNode()</li></ol></li></ol></li><li>属性</li></ol></li><li><p><strong>Element对象</strong>：标签对象</p><ul><li>通过Document对象获取</li><li>方法<ul><li>removeAttribute()：删除属性</li><li>setAttribute()：设置属性</li></ul></li></ul></li></ul><ul><li><p>Node：节点对象</p><ul><li>特点：所有DOM对象都可以被认为是节点</li><li>方法：<ul><li>CRUD DOM树：<ul><li>appendChild()：项节点的子节点列表的结尾添加新的子节点</li><li>removeChild()：删除（并返回）当前节点指定的子节点</li><li>replaceChild()：用新节点替换一个子节点</li></ul></li></ul></li><li>属性：<ul><li>parentNode：返回当前节点的父节点</li></ul></li></ul></li></ul><h4 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h4><ol><li>标签体的设置和获取：innnerHTML</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTMLDOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">        div</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//div中替换一个文本输入框</span></span></span><br><span class="line"><span class="xml">        div.innerHTML = "<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span>&gt;</span>"</span></span><br><span class="line"><span class="javascript">        <span class="comment">//div中增加一个文本输入框</span></span></span><br><span class="line"><span class="xml">        div.innerHTML += "<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span>&gt;</span>"</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用html元素对象的属性</p></li><li><p>控制元素样式</p><ol><li><p>使用元素的style属性来设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 方式<span class="number">1</span> --&gt;</span><br><span class="line">        <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">        div1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            div1.style.border = <span class="string">"1px solid red"</span>;</span><br><span class="line">            div1.style.width = <span class="string">"200px"</span>;</span><br><span class="line">            div1.style.height = <span class="string">"200px"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>提前定义好类选择器的样式，通过元素的className属性来设置其class属性值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c4ff9e</span>;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!-- 方式2 --&gt;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</span></span><br><span class="line"><span class="javascript">        div2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            div2.className = <span class="string">"d2"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><p>概念：某些组件被执行了某些操作后，触发某些代码的执行</p><ul><li>事件：某些操作，如：单击、双击、键盘按下、鼠标移动</li><li>事件源：组件，如：按钮、文本输入框</li><li>监听器：代码</li><li>注册监听：将事件、事件源、监听器结合在一起。当事件源上发生了某个事件，则出发执行某个监听器代码</li></ul></li><li><p>常见的事件：</p><ol><li><p>点击事件</p><ol><li><strong>onclick</strong>：单击事件</li><li><strong>ondblclick</strong>：双击事件</li></ol></li><li><p>焦点事件</p><ol><li><strong>onblur</strong>：失去焦点</li><li><strong>onfocus</strong>：元素获得焦点</li></ol></li><li><p>加载事件</p><ol><li><strong>onload</strong>：一张页面或一幅图像完成加载</li></ol></li><li><p>鼠标事件</p><ol><li><strong>onmousedown</strong>：鼠标按钮被按下</li><li><strong>onmousemove</strong>：鼠标被移动</li><li><strong>onmouseover</strong>：鼠标移到某元素之上</li><li><strong>onmouseup</strong>：鼠标按键被松开</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).onmousedown=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event.button;<span class="comment">//button值为0，左键被点击；1为中建，2为右键</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="5"><li><p>键盘事件</p><ol><li><strong>onkeydown</strong>：某个键盘按键被按下</li><li><strong>onkeyup</strong>：某个键盘按键被松开</li><li><strong>onkeypress</strong>：某个键盘按键按下再松开</li></ol></li><li><p>选择和改变</p><ol><li><strong>onchange</strong>：域的内容被改变</li><li><strong>onselect</strong>：文本被选中</li></ol></li><li><p>表单事件：</p><ol><li><strong>onsubmit</strong>：确认按钮被点击<ul><li>用于阻止表单提交，如果该事件方法返回值为false，则表单不会提交</li></ul></li><li><strong>onreset</strong>：重置按钮被点击</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;JavaScript：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是&lt;strong&gt;基于对象&lt;/strong&gt;和&lt;strong&gt;事件驱动&lt;/strong&gt;的
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS简要学习</title>
    <link href="http://yoursite.com/css%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/css简要学习/</id>
    <published>2019-07-30T13:31:49.000Z</published>
    <updated>2019-08-01T02:47:48.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><ul><li>css：层叠样式表<ul><li>样式表：有很多属性和属性值</li><li>css可以使得页面显示效果更好，可以提高后期样式代码的可维护性</li></ul></li></ul><hr><h2 id="CSS使用"><a href="#CSS使用" class="headerlink" title="CSS使用"></a>CSS使用</h2><h3 id="CSS和HTML的四种结合方式"><a href="#CSS和HTML的四种结合方式" class="headerlink" title="CSS和HTML的四种结合方式"></a>CSS和HTML的四种结合方式</h3><ul><li><p>（1）style属性：</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> = <span class="string">"background-color:red;color:green"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><center>style属性示例</center></li><li><p>（2） style标签：</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---  此处可以设置&lt;div&gt;标签的样式  ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">        css代码;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><center>style标签示例</center></li><li><p>（3）在style标签 使用语句：</p><ul><li>创建css文件（.css）</li><li>在style标签中使用@import url(css文件路径)；</li></ul></li><li><p>（4）使用头标签引入外部css文件</p><ul><li><p>创建css文件</p></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css路径"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>注</strong>：第三种方式在某些浏览器下不起作用，一般用第四种</p></li></ul><h3 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h3><p>优先级：即最终以哪一个样式为准</p><ul><li>从上到下，从内到外，优先级从低到高。（一般情况）<ul><li>即html中，以在下方的和内部的样式为准</li><li>格式：选择器名称{属性名: 属性值; ······}</li></ul></li></ul><hr><h3 id="CSS基本选择器"><a href="#CSS基本选择器" class="headerlink" title="CSS基本选择器"></a>CSS基本选择器</h3><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><ul><li><p>（1）标签选择器：用标签的名称作为选择器</p></li><li><p>（2）class选择器：</p><ul><li><p>每个html标签都有个属性 class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---  此处可以用class1作为选择器 ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.class1</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*此处修改所有class属性为class1的样式*/</span></span><br><span class="line"><span class="selector-class">.class1</span>&#123;</span><br><span class="line">    css代码；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>（3）id选择器：</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-id">#id1</span>&#123;</span><br><span class="line">css代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*此处修改所有id属性为id1的样式*/</span></span><br><span class="line"><span class="selector-id">#id1</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ul><li>id选择器 &gt; class选择器 &gt; 标签选择器</li></ul><h3 id="CSS扩展选择器"><a href="#CSS扩展选择器" class="headerlink" title="CSS扩展选择器"></a>CSS扩展选择器</h3><ul><li><p>（1）关联选择器</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置嵌套标签里的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*div里的p标签*/</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>（2）组合选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将div和p设置为相同样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>（3）伪元素选择器</p><ul><li><p>css提供的定义好的样式，可以直接选用</p></li><li><p>比如超链接：</p><ul><li>状态：原始 悬停 点击 点击后</li><li>原始： :link</li><li>悬停： :hover</li><li>点击： :active</li><li>点击后： :visited</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><p>在布局前需要把数据装到一块一块的区域内，这个区域叫做盒子。</p><p><img src="https://www.runoob.com/images/box-model.gif" alt="css盒子模型"></p><ul><li><p><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</p><ul><li>与边框类似</li></ul></li><li><p><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</p><ul><li><p><strong>上</strong>：border-top</p></li><li><p><strong>下</strong>：border-bottom</p></li><li><p><strong>左</strong>：border-left</p></li><li><p><strong>右</strong>：border-right</p></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*统一设置*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*分别设置*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#id1</span>&#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> dashed yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</p><ul><li>与边框类似</li></ul></li><li><p><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</p></li></ul><h3 id="布局的漂浮"><a href="#布局的漂浮" class="headerlink" title="布局的漂浮"></a>布局的漂浮</h3><ul><li><strong>float</strong>: 用于设置布局悬浮<ul><li><strong>none</strong>: 默认值，对象不漂浮。</li><li><strong>left</strong>: 文本流向对象的右边。（其后面的部分漂向它的右边，空出的位置由剩下的补齐）</li><li><strong>right</strong>: 文本流向对象的左边。</li></ul></li><li>缺点：在某些浏览器上无法使用</li></ul><h3 id="布局的定位"><a href="#布局的定位" class="headerlink" title="布局的定位"></a>布局的定位</h3><ul><li>position: 用于设置布局定位<ul><li>absolute: 将对象从文档流中拖出，其原来的位置由后面的补上<ul><li>可用 top、left等对它进行绝对定位。</li></ul></li><li>relative:  不从文档流中拖出，其余盒子位置不变</li></ul></li></ul><hr><p>学习资料：<a href="https://www.bilibili.com/video/av37452727/?p=28" target="_blank" rel="noopener">(28天完整版)JavaWeb视频教程</a></p><p>资料、图片来源：<a href="https://www.runoob.com/css/css-boxmodel.html" target="_blank" rel="noopener">CSS 盒子模型</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS简介&quot;&gt;&lt;a href=&quot;#CSS简介&quot; class=&quot;headerlink&quot; title=&quot;CSS简介&quot;&gt;&lt;/a&gt;CSS简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;css：层叠样式表&lt;ul&gt;
&lt;li&gt;样式表：有很多属性和属性值&lt;/li&gt;
&lt;li&gt;css可以使得页面显示
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb基础概念</title>
    <link href="http://yoursite.com/JavaWeb%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/JavaWeb基础/</id>
    <published>2019-07-27T07:25:49.000Z</published>
    <updated>2019-08-04T08:26:04.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>框架：<strong>软件框架</strong>（software framework），通常指的是为了实现某个业界标准或完成特定基本任务的<a href="https://baike.baidu.com/item/软件组件/9817461" target="_blank" rel="noopener">软件组件</a>规范，也指为了实现某个软件组件规范时，提供规范所要求之基础功能的软件产品。也被称为半成品软件。可以在框架的基础上进行软件开发，可以简化编码。</p></blockquote><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>反射：将类的各个组成部分封装为其他对象，这就是反射机制。（在Class 类对象阶段，将.class文件的各个部分封装成不同的类对象，如将成员变量封装成Field类对象并用数组存储起来。其总体是由Class类对象储存的）<ul><li>好处：<pre><code>* 1.可以在程序运行过程中操作这些对象。* 2.可以解耦</code></pre></li></ul></li></ul><h3 id="获取字节码class对象的三种方式"><a href="#获取字节码class对象的三种方式" class="headerlink" title="获取字节码class对象的三种方式"></a>获取字节码class对象的三种方式</h3><ul><li><p>获取Class对象的方式：</p><ol><li><p>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象</p><ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li><p>类名.class：通过类名的属性class获取</p></li></ol><ul><li>多用于参数的传递</li></ul><ol start="3"><li><p>对象.getClass()：getClass()在Object类中定义 </p><ul><li><p>多用于对象的获取字节码的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><pre><code>* 结论：    同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</code></pre><h3 id="class类对象的获取功能"><a href="#class类对象的获取功能" class="headerlink" title="class类对象的获取功能"></a>class类对象的获取功能</h3><ul><li><p>Class对象功能：</p><ul><li><p>获取功能：</p><ol><li><p>获取成员变量：</p><ul><li><p>getFields() ：获取所有public修饰的成员变量，private或protected修饰的无法读取</p></li><li><p>getField(String name)   获取指定名称的 public修饰的成员变量</p></li><li><p>getDeclaredFields()  获取所有的成员变量，不考虑修饰符</p></li><li><p>getDeclaredField(String name)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用法示例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflectDemo</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">          Field[] fields = personClass.getFields();</span><br><span class="line">       <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">              System.out.println(field);</span><br><span class="line">          &#125;</span><br><span class="line">       Field a = personClass.getField(<span class="string">"a"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul></li></ul><pre><code>    * 成员变量的操作（Field类的方法）      1. 设置值         - void set(Object obj, Object value)           <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">a.set(p, <span class="string">"a"</span>); <span class="comment">//设置p对象的a属性的值</span></span><br></pre></td></tr></table></figure>      2. 获取值         - get(Object obj)       3. 忽略访问权限修饰符的安全检查         * setAccessible(true):暴力反射，设置之后即可访问private和protected修饰的变量2. 获取构造方法：   * getConstructors()     * getConstructor(类&lt;?&gt;... parameterTypes)     * getDeclaredConstructor(类&lt;?&gt;... parameterTypes)     * getDeclaredConstructors()     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Constructor cons = cls2.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(cons);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   * Constructor对象的操作：     * 创建对象：       * newInstance方法       * 用空参数构造方法创建对象，可以用Class对象的newInstance方法     * 暴力反射3. 获取成员方法：   * Method[] getMethods()  Method getMethod(String name, 类&lt;?&gt;... parameterTypes)   * Method[] getDeclaredMethods()    * Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)    * 操作：     * 执行方法：invoke方法，参数为一个对象     * 获取方法名称：getname4. 获取全类名       * String getName()</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li><p>案例：</p><ul><li><p>需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法</p><ul><li>实现：<ol><li>配置文件</li><li>反射</li></ol></li><li>步骤：<ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        <span class="comment">//1.1创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//1.2加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="comment">//1.2.1获取class目录的配置文件</span></span><br><span class="line">        ClassLoader classLoader = reflectTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置文件中的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote><ul><li>概念：说明程序的。给计算机看的</li><li>注释：用文字描述程序的。给程序员看的</li><li>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</li><li>作用分类：<br>①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】<br>②代码分析：通过代码里标识的注解对代码进行分析【使用反射】<br>③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ul></blockquote><h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><ul><li>@Override：检测被该注解标注的方法是否是继承自父类（接口）的。</li><li>@Deprecated：该注解标注的内容，已过时</li><li>@SuppressWarnings：压制警告<ul><li>@SuppressWarnings(“all”)：压制所有警告</li></ul></li></ul><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><ul><li><p>格式：</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元注解</span><br><span class="line">  <span class="keyword">public</span> <span class="meta">@interface</span> 注解名&#123;</span><br><span class="line">属性列表</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>本质：</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAnno</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其本质上就是一个接口，该接口默认继承Annotation接口</p></li></ul></li><li><p>属性：接口中可以定义的成员方法</p><ul><li><p>要求：</p><ul><li>属性的返回值类型：<ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li>定义了属性，使用时需要给属性赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "张三"</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    Person <span class="title">person</span><span class="params">()</span></span>;<span class="comment">//此处为枚举类型</span></span><br><span class="line">    <span class="function">MyAnno2 <span class="title">anno2</span><span class="params">()</span></span>;<span class="comment">//此处为另一个注解</span></span><br><span class="line"></span><br><span class="line">    String[] strs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用，有默认值的不需要赋值</span></span><br><span class="line"><span class="meta">@MyAnno</span>(show1 = <span class="number">1</span>, person = Person.P1, anno2 = <span class="meta">@MyAnno</span>, strs = &#123;<span class="string">"aaa"</span>,<span class="string">"bbb"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoDemo1</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>特殊情况</strong>：如果只有一个属性需要赋值且属性名是<strong>value</strong>时，可以省略value，即MyAnno(1)。</li></ul></li></ul></li><li><p>元注解：解释注解的注解</p><ul><li>@Target：描述注解能够作用的位置<ul><li>ElementType取值：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li></ul></li><li>@Retention：描述注解被保留的阶段<ul><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li><li></li></ul></li><li>@Documented：描述直接是否被抽取到API文档中</li><li>@Inherited：描述注解是否被子类继承</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(value=&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno3 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h3><ul><li><p>解析注解：获取注解中定义的属性值，可以不再使用配置文件</p><ul><li>1.获取注解定义的位置的对象（Class，Method，Field）</li><li>2.获取指定的注解<ul><li>getAnnotation(Class)</li></ul></li></ul><p>​        </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解定义</span></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述需要执行的类名和方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">    <span class="function">String <span class="title">classname</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">methodname</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pro</span>(classname = <span class="string">"top.wnghillin.annotation.Student"</span>, methodname = <span class="string">"study"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.解析注解</span></span><br><span class="line">        <span class="comment">//1.1获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;reflectTest&gt; reflectTestClass = reflectTest.class;</span><br><span class="line">        <span class="comment">//2获取注解对象</span></span><br><span class="line">        Pro an = reflectTestClass.getAnnotation(Pro.class);</span><br><span class="line">        <span class="comment">//3.调用注解对象中定义的抽象方法，获取返回值</span></span><br><span class="line">        String classname = an.classname();</span><br><span class="line">        String methodname= an.methodname();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(classname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>附：isAnnotationPresent(MyAnno.class)：判断该方法（对象、属性）是否被MyAnno注解</li></ul><hr><p>资料：<a href="黑马JavaWeb入门到精通(idea版)">黑马JavaWeb入门到精通(idea版)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反射&quot;&gt;&lt;a href=&quot;#反射&quot; class=&quot;headerlink&quot; title=&quot;反射&quot;&gt;&lt;/a&gt;反射&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;框架：&lt;strong&gt;软件框架&lt;/strong&gt;（software framework），通常指的是为了实现某个业
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>使用Junit进行单元测试</title>
    <link href="http://yoursite.com/Junit/"/>
    <id>http://yoursite.com/Junit/</id>
    <published>2019-07-27T02:50:52.000Z</published>
    <updated>2019-07-27T03:18:05.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ul><li><p>黑箱测试：不需要输入代码，只看输入输出</p></li><li><p>白箱测试：需要输入代码进行测试</p><p>（其中，使用Junit进行测试是白箱测试 ）</p></li></ul><h2 id="Junit使用"><a href="#Junit使用" class="headerlink" title="Junit使用"></a>Junit使用</h2><ul><li><p>步骤：</p></li><li><ol><li>定义一个测试类</li></ol><ul><li>​    建议使用被测试的类名+Test命名</li><li>​    可以建立一个新的test包储存测试类</li></ul></li><li><ol start="2"><li><p>定义测试方法，该测试方法可以独立运行：</p><ul><li>​    加上@Test，如下方代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>导入Junit依赖环境</p></li><li><p>使用断言来判断结果: </p><ul><li>判定结果：红色：失败    绿色：成功</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">    <span class="keyword">int</span> result = c.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    Assert.assertEquals(期望结果，运算结果)(<span class="number">2</span>, result); </span><br><span class="line">    <span class="comment">//Assert.assertEquals(期望结果，运算结果)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>失败结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.AssertionError: </span><br><span class="line">Expected :2</span><br><span class="line">Actual   :3</span><br></pre></td></tr></table></figure></li></ul><h3 id="Before-After方法"><a href="#Before-After方法" class="headerlink" title="@Before @After方法"></a>@Before @After方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始化方法</span></span><br><span class="line"><span class="comment">    * 所有测试方法执行之前都将执行这个方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"init..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 释放资源方法</span></span><br><span class="line"><span class="comment">    * 所有测试方法执行之后都会自动执行这个方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@After</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"close..."</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;黑箱测试：不需要输入代码，只看输入输出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;白箱测试：需要输入代码进行测试&lt;
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第4章 树</title>
    <link href="http://yoursite.com/%E7%AC%AC4%E7%AB%A0%E6%A0%91/"/>
    <id>http://yoursite.com/第4章树/</id>
    <published>2019-07-26T06:59:39.000Z</published>
    <updated>2019-08-02T09:32:31.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><blockquote><p><strong>树</strong>（tree）是一些节点的集合，其可以为空集；若它不为空集，则一棵树由<strong>根</strong>（root）节点 r 以及0个或多个非空的子树T<sub>1</sub>、T<sub>2</sub>……组成，其中每一刻的根都被来自根 r 的一条有向的<strong>边</strong>（edge）所连接。  </p></blockquote><h3 id="树的实现"><a href="#树的实现" class="headerlink" title="树的实现"></a>树的实现</h3><p>实现树的一种方法可以是在每一个节点除数据外还要有一些指针，使得该节点的每一个儿子都有一个指针指向它。但由于节点的儿子个数未知且可能变化很大，因此只能通过将每个节点的所有儿子都放在树节点的链表中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">PtrToNode</span></span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">  ElementType Element;</span><br><span class="line">  PtrToNode FirstChild;</span><br><span class="line">  PtrToNode NextSibling;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如图所示：</p><p><img src="https://i.loli.net/2019/07/27/5d3beaf49ac3561782.png" alt="image1"></p><h3 id="树的遍历及应用"><a href="#树的遍历及应用" class="headerlink" title="树的遍历及应用"></a>树的遍历及应用</h3><ul><li><p>先序遍历（preorder traversal）：在先序遍历中，对节点的处理工作是在它的诸儿子节点被处理之前（pre）进行的。其每个节点总的工作量为常数。其时间复杂度为O(N)。例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算机中的文件系统可以用一个树来表示</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ListDir</span><span class="params">(DirectoryOrFile D, <span class="keyword">int</span> Depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(D is a legitimate entry)</span><br><span class="line">    &#123;</span><br><span class="line">        PrintName(D, Depth);</span><br><span class="line">        <span class="keyword">if</span>(D is a Directory)</span><br><span class="line">            <span class="keyword">for</span> each child, C, of D</span><br><span class="line">                ListDir(C, Depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDirectory</span><span class="params">(DirectoryOrFile D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListDir(D, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>列出分级文件系统中目录的例程</center></li><li><p>后序遍历（postorder traversal）：在后序遍历中，在一个节点处的工作实在它的诸儿子节点被计算后（post）进行的。例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SizeDirectory</span><span class="params">(DirectoryOrFile D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TotalSize;</span><br><span class="line">    </span><br><span class="line">    TotalSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(D is a legitimate entry)</span><br><span class="line">    &#123;</span><br><span class="line">        TotalSize = FileSize(D);</span><br><span class="line">        <span class="keyword">if</span>(D is a directory)</span><br><span class="line">            <span class="keyword">for</span> each child, C, of D</span><br><span class="line">                TotalSize += SizeDirectory(C);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TotalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>计算一个目录大小的例程</center>## 二叉树</li><li><blockquote><p>二叉树（binary tree）是一棵树，其中每个节点都不能有多于两个的儿子。</p></blockquote></li></ul><p>二叉树的深度可以远小于N，而其平均深度可以达到：$O(\sqrt(N))$，而二叉树的特殊情况，<strong>二叉查找树</strong>的深度平均值可以达到O(logN)。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>二叉树的一个节点就是由<strong>Key</strong>(关键字)信息加上两个指向其他节点的指针(Left和Right)组成的结构。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PtrToNode</span> <span class="title">Tree</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    Tree Left;</span><br><span class="line">    Tree Right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="表达式树"><a href="#表达式树" class="headerlink" title="表达式树"></a>表达式树</h3><p><strong>表达式</strong>树的树叶是<strong>操作数</strong>，如常数或变量，而其他节点为<strong>操作符</strong>（需要所有操作都是二元的）。</p><p><img src="https://img2018.cnblogs.com/blog/567389/201811/567389-20181116090647050-1700454715.png" alt="image2"></p><p>这种先读左儿子，再读节点，再读右儿子得到中缀表达式的方法，称为<strong>中序遍历</strong>，而采用后序遍历将会得到后缀表达式。</p><h4 id="构造一颗表达式树"><a href="#构造一颗表达式树" class="headerlink" title="构造一颗表达式树"></a>构造一颗表达式树</h4><p>设输入为<br>$$<br>a b + c d e + * *<br>$$<br>前两个符号式操作数，因此我们创建两颗单节点树并把指向它们的指针压入栈中：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf57523e0951358.png" alt="image3"></p><p>接着，“ + ”被读入，指向这两棵树的指针被弹出，形成一棵新的树：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf64b089d343785.png" alt="image4"></p><p>随后，c、d、e被读入，同理，压入栈中：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf6d7aa8d725258.png" alt="image5"></p><p>接下来读入“ + ”号，d、e弹出并合并。继续读读到“ * ”号，再将两棵树合并，结果为：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf75eec45351009.png" alt="image5"></p><p><img src="https://i.loli.net/2019/07/27/5d3bf7dad68f544499.png" alt="image5"></p><p>随后同理，即可得到最终结果。</p><h2 id="查找树ADT——二叉查找树"><a href="#查找树ADT——二叉查找树" class="headerlink" title="查找树ADT——二叉查找树"></a>查找树ADT——二叉查找树</h2><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><blockquote><p>对于树中的每个节点X，它的左子树中的所有关键字值小于X的关键字值，而它的右子树中所有关键字值大于X的关键字值。这意味着，该树所有的元素都可以用某种统一的方式排序。</p></blockquote><h4 id="MakeEmpty"><a href="#MakeEmpty" class="headerlink" title="MakeEmpty"></a>MakeEmpty</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> SearchTree *Node;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> element;</span><br><span class="line">SearchTree left;</span><br><span class="line">SearchTree right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">SearchTree <span class="title">MakeEmpty</span><span class="params">(SearchTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">MakeEmpty(tree-&gt;left);</span><br><span class="line">MakeEmpty(tree-&gt;right);</span><br><span class="line"><span class="built_in">free</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(X &lt; T-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FindMin-和-FindMax"><a href="#FindMin-和-FindMax" class="headerlink" title="FindMin 和 FindMax"></a>FindMin 和 FindMax</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下分别采用了递归和非递归的方法来实现</span></span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FindMin(T-&gt;Left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">while</span>(T -&gt; <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SearchTree <span class="title">Insert</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//建立并返回一个单节点树</span></span><br><span class="line">        T = (SearchTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">        <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!!"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;Element = X;</span><br><span class="line">            T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;Element)</span><br><span class="line">        T-&gt;Left = Insert(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; T-&gt;Element)</span><br><span class="line">        T-&gt;Right = Insert(X, T-&gt;Right);</span><br><span class="line">    <span class="comment">//如果X已经在树里面，则不进行操作</span></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>删除是最困难的操作。如果节点是一片树叶，那么它可以被立即删除。如果节点有一个儿子，则该节点可以在其父节点跳帧指针绕过该节点后被删除。如图：</p><p><img src="C:%5CUsers%5CNier%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20190730144849.png" alt="QQ截图20190730144849"></p><p>删除具有两个儿子的节点，一般的策略是用其右子树的最小的数据代替该节点的数据并递归地删除那个节点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SearchTree <span class="title">Delete</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position TmpCell;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">"Element Not Found"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;Element)</span><br><span class="line">        T-&gt;Left = Delete(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; T-&gt;Element)</span><br><span class="line">        T-&gt;Right = Delete(X, T-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left &amp;&amp; T-&gt;Right)</span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = FindMin(T-&gt;Right);</span><br><span class="line">        T-&gt;Element = TmpCell-&gt;Element;</span><br><span class="line">        T-&gt;Right = Delete(T-&gt;Element, T-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//1个或0个儿子</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = T;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Right == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Left;</span><br><span class="line">        <span class="built_in">free</span>(TmpCell);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ul><li><strong>AVL树</strong>是带有平衡条件的二叉查找树。这个平衡条件必须容易保持，且它须保证树的深度是O(logN).</li><li>一颗AVL树是其每个节点的左子树和右子树的高度最多差1的二叉查找树（空树的高度定义为-1。）</li></ul><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>在插入一个节点后，可能会破坏AVL树的特性，如果发生这种情况，那么就要把性质恢复以后才认为这一步插入完成。事实上，这总可以通过<strong>旋转</strong>（rotation）做到。</p><p>不平衡可能出现的情况：</p><ul><li>对$\alpha$的左儿子的左子树进行一次插入。</li><li>对$\alpha$的左儿子的右子树进行一次插入。</li><li>对$\alpha$的右儿子的左子树进行一次插入。</li><li>对$\alpha$的右儿子的右子树进行一次插入。</li></ul><p>左-左（或右-右）的情况需要进行一次<em>单旋转</em>（single rotation）而完成调整，另外两种需要进行一次<em>双旋转</em>（double rotation）。</p><h4 id="单旋转"><a href="#单旋转" class="headerlink" title="单旋转"></a>单旋转</h4><p>左子树的左子树变为节点的左子树，在将原来的左子树变为右子树，原来的右子树变为右子树的右子树。</p><p><img src="https://i.postimg.cc/xjByp3f5/QQ-20190731123727.png" alt="单旋转修复情形1"></p><center>单旋转修复情形1</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;树&lt;/strong&gt;（tree）是一些节点的集合，其可以为空集；若它不为空集，则一
      
    
    </summary>
    
      <category term="数据结构与算法分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第3章 表、栈和队列</title>
    <link href="http://yoursite.com/%E7%AC%AC3%E7%AB%A0%E8%A1%A8%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/第3章表栈和队列/</id>
    <published>2019-07-25T07:46:50.000Z</published>
    <updated>2019-07-26T06:50:34.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表ADT"><a href="#表ADT" class="headerlink" title="表ADT"></a>表ADT</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>​    空表（empty list）：大小为0的表。</p><p>​    前驱元、后继元。</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><em>函数原型</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLast</span><span class="params">(Position P, List L)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(<span class="keyword">int</span> X, List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> X, List L, Position P)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Header</span><span class="params">(List L)</span></span>;</span><br></pre></td></tr></table></figure><p>具体实现：略</p><h3 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h3><p>链表一般会出现指针变量包含了伪地址的问题。删除表时，需要一个中间量来储存上一个节点。同时，使用malloc之后记得将该节点初始化。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="多项式ADT"><a href="#多项式ADT" class="headerlink" title="多项式ADT"></a>多项式ADT</h4><p>令F(X) = ∑<sub>i=0</sub><sup>N</sup> A<sub>i</sub>X<sup>i</sup>。如果多项式的次数过大，使用普通方法的运行时间就难以接受了。于是可以采用多项式ADT来实现多项式的加减乘等操作。</p><p><em>多项式ADT的数组实现的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> CoeffArray[MaxDegree + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> HighPower;</span><br><span class="line">&#125; * Polynomial;</span><br></pre></td></tr></table></figure><p><em>将多项式初始化为零的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZeroPolynomial</span><span class="params">(Polynomial Poly)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= MaxDegree; i++)</span><br><span class="line">        Poly-&gt;CoeffArray[i] = <span class="number">0</span>;</span><br><span class="line">    Poly-&gt;HighPower = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>两个多项式相加的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddPolynomial</span><span class="params">(<span class="keyword">const</span> Plynomial Poly1, <span class="keyword">const</span> Polynomial Poly2, Polynomial PolySum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ZeroPolynomial(PolySum);</span><br><span class="line">    PolySum-&gt;HighPower = Max(Poly1-&gt;HighPower, Poly2-&gt;HighPower);</span><br><span class="line">    <span class="keyword">for</span>(i = PolySum-&gt;HighPower; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        PolySum-&gt;CoeffArray[i] = Poly1-&gt;CoeffArray[i] + Poly2-&gt;CoeffArray[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>两个多项式相乘的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultPolynomial</span><span class="params">(<span class="keyword">const</span> Plynomial Poly1, <span class="keyword">const</span> Polynomial Poly2, Polynomial PolyProd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">ZeroPolynomial(PolyProd);</span><br><span class="line">PolySum-&gt;HighPower = Poly1-&gt;HighPower + Poly2-&gt;HighPower;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(PolyProd-&gt;HighPower &gt; MaxDegree)</span><br><span class="line">Error(<span class="string">"Exceeded array size"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= Poly1-&gt;HighPower; i++)</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= Poly2-&gt;HighPower; j++)</span><br><span class="line">                PolyProd-&gt;CoeffArray[i + j] += Poly1-&gt;CoeffArray[i] * Poly2-&gt;CoeffArray[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="栈ADT"><a href="#栈ADT" class="headerlink" title="栈ADT"></a>栈ADT</h2><h3 id="栈模型"><a href="#栈模型" class="headerlink" title="栈模型"></a>栈模型</h3><p><strong>栈</strong>（stack）是限制插入和删除只能在一个位置上进行的表，该位置是表的末端，即<strong>顶</strong>（top）。对栈的基本操作有<strong>Push</strong>和<strong>Pop</strong>。</p><p>栈有时又叫LIFO(后进先出)表。</p><h3 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h3><h4 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h4><p><em>栈ADT链表实现的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Stack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span>;</span><br></pre></td></tr></table></figure><p>测试栈是否空栈的例程*</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>创建一个空栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    S = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!"</span>);</span><br><span class="line">    S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MakeEmpty设置Next指针指向NULL</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">"Must use CreateStack First"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">while</span>(!IsEmpty(S))</span><br><span class="line">            Pop(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Push进栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToNode TmpCell;</span><br><span class="line"></span><br><span class="line">    TmpCell - <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(TmpCell == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell-&gt;Element = X;</span><br><span class="line">        TmpCell-&gt;Next = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = TmpCell;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>返回栈顶元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Next-&gt;Element;</span><br><span class="line">    Error(<span class="string">"Empty Stack"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>从栈弹出元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToNode FirstCell;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">"Empty Stack!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstCell = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = S-&gt;Next-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(FirstCell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    所有操作均花费常数时间，但对于malloc和free的调用是非常昂贵的。有的缺点可以通过使用第二个栈避免，该第二个栈初始时为空栈。当一个单元栋第一个栈弹出时，它只是被放到了第二个栈中，此后当第一个栈需要新单元时，它首先去检查第二个栈</p><h4 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h4><p>数组实现的栈可以避免指针的操作。其惟一潜在危害就是我们需要提前声明一个数组的大小。但通常来说声明一个足够大而不至于浪费太多空间的数组并不是太过困难，因此数组实现是一种比较流行的做法。</p><p><em>栈的声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EmptyTOS (-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MinStackSize (5)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span> *<span class="title">Stack</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TopAndPop</span><span class="params">(Stack S)</span></span>;</span><br></pre></td></tr></table></figure><p><em>栈的创建</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(MaxElements &lt; MinStackSize)</span><br><span class="line">        Error(<span class="string">"Stack size is too small"</span>);</span><br><span class="line">    S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strct StackRecord));</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of Space!!!"</span>);</span><br><span class="line">    S-&gt;Array = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * MaxElements);</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;Array == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!!"</span>);</span><br><span class="line">    S-&gt;Capacity = MaxElements;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>栈的释放</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(S-&gt;Array);</span><br><span class="line">        <span class="built_in">free</span>(S);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>检测是否空栈</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;TopOfStack == EmptyTOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>创建一个空栈</em> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S-&gt;TopOfStack = EmptyTOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>进栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(S))</span><br><span class="line">        Error(<span class="string">"Full stack"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        S-&gt;Array[++S-&gt;TopOfStack] = X;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>将栈顶返回的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Array[S-&gt;TopOfStack];</span><br><span class="line">    Error(<span class="string">"Empty stack"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>从栈弹出元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">"Empty stack"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        S-&gt;TopOfStack--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="平衡符号"><a href="#平衡符号" class="headerlink" title="平衡符号"></a>平衡符号</h4><p>做一个空栈。读入字符知道文件尾。如果字符时一个开放符号，则将其推入栈中。如果字符是一个封闭符号，则当栈空时报错。否则，将栈元素弹出，如果弹出的符号不是对应的开放符号，则报错。在文件尾，如果栈非空则报错。</p><h4 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h4><p><strong>中缀表达式</strong>：4.99 + 5.99 + 6.99 * 1.06</p><p><strong>后缀表达式</strong>：4.99 1.06 * 5.99 + 6.99 1.06 * + （<strong>后缀</strong>（postfix）或<strong>逆波兰</strong>（reverse Polish）记法）</p><p>计算后缀表达式的方法是使用一个栈，当见到一个数字时就把它推入到栈中；遇到一个运算符时该运算符就作用于从该栈弹出的两个数（符号）上，将所得结果推入栈中。</p><p>如，计算 *<em>6 5 3 2 + 8 * + 3 + * *</em>：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">TopOfStack-&gt;</td><td align="center">3</td></tr><tr><td align="center"></td><td align="center">2</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>下面读到一个‘+’，所以3和2被弹出，其结果5被压入栈中：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">TopOfStack-&gt;</td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>接着，8进栈：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">TopOfStack-&gt;</td><td align="center">8</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>然后，8和5弹出，相乘，再将40压入栈中：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">TopOfStack-&gt;</td><td align="center">40</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>接着又遇到‘+’号，因此40和5被弹出，并且40 + 5 = 45进栈：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">TopOfStack-&gt;</td><td align="center">45</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>随后操作同上，得到结果288。</p><h4 id="中缀到后缀的转换"><a href="#中缀到后缀的转换" class="headerlink" title="中缀到后缀的转换"></a>中缀到后缀的转换</h4><p>设我们想将中缀表达式：</p><center> a + b * c + (d * e + f) * g  </center>转换成后缀表达式，其答案为<center>a b c * + d e * f + g * +</center>首先，a被读入，于是它流向输出。然后，“+”被读入并被放入栈中。接着b读入并流向输出：<table><thead><tr><th align="center">Stack</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">a b</td></tr></tbody></table><p>这时“ * ”读入。操作符栈顶元素比较低，故没有输出，“ * ”进栈。接着c被读入并输出：</p><table><thead><tr><th align="center">Stack</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center">*</td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">a b c</td></tr></tbody></table><p>后面是一个“ + ”号。其优先级比“ * ”低，因此将“ * ”从栈弹出并放入输出中；弹出剩下的“ + ”，因为其不比“ + ”优先级低，而是具有相同的优先级，然后将“ + ”压入栈中。</p><table><thead><tr><th align="center">Stack</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">a b c * +</td></tr></tbody></table><p>随后操作同上，需要注意的是“ （ ”的优先级最高，遇到“ ）”时要将所有符号弹出，直到遇到” （ “。</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>​    <strong>尾递归</strong>（tail recursion）是使用递归极端不当的例子。尾递归可以通过将递归调用变成goto语句并在其前加上对每个函数的赋值语句而手动消除。很多编译器都能自动消除尾递归，但最好还是通过手动进行消除。</p><hr><h2 id="队列ADT"><a href="#队列ADT" class="headerlink" title="队列ADT"></a>队列ADT</h2><h3 id="队列模型"><a href="#队列模型" class="headerlink" title="队列模型"></a>队列模型</h3><p>​    队列的基本操作是<em>Enqueue</em>和<em>Dequeue</em>。</p><h3 id="队列的数组实现"><a href="#队列的数组实现" class="headerlink" title="队列的数组实现"></a>队列的数组实现</h3><p>​    对于每一个队列数据结构，我们保留一个数组<em>Queue[ ]</em>以及<em>Front</em>和<em>Rear</em>，还有记录实际存在于队列中的元素的个数<em>Size</em>。</p><p>​    为使一个元素X入队，我们让<em>Size<em>和</em>Rear<em>都增加1，然后置</em>Queue[ Rear]</em> = X。若使一个元素出队，我们置返回值为<em>Queue[front]</em>，<em>Size</em>减1，然后让<em>Front</em>增加1。</p><p>​    为了防止不出界，该操作需要使用<strong>循环数组</strong>（circular array）实现。</p><p><em>队列的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span> *<span class="title">Queue</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeQueue</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(<span class="keyword">int</span> X, Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Front</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FrotAndDequeue</span><span class="params">(Queue Q)</span></span>;</span><br></pre></td></tr></table></figure><p><em>测试队列是否为空的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q-&gt;Size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>构造空队列的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q-&gt;Size = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;Front = <span class="number">1</span>;</span><br><span class="line">    Q-&gt;Rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>入队的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Succ</span><span class="params">(<span class="keyword">int</span> Value, Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(++Value == Q-&gt;Capacity)</span><br><span class="line">        Value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(<span class="keyword">int</span> X, Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(Q))</span><br><span class="line">        Error(<span class="string">"Full queue"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q-&gt;Size++;</span><br><span class="line">        Q-&gt;Rear = Succ(Q-&gt;Rear, Q);</span><br><span class="line">        Q-&gt;Array[Q-&gt;Rear] = X;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>出队的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> returnNum;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))</span><br><span class="line">        Error(<span class="string">"Empty Queue"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        returnNum = Q-&gt;Array[Q-&gt;Front];</span><br><span class="line">        Q-&gt;Front = Succ(Q-&gt;Front, Q);</span><br><span class="line">        Q-&gt;Size--;</span><br><span class="line">        <span class="keyword">return</span> returnNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;表ADT&quot;&gt;&lt;a href=&quot;#表ADT&quot; class=&quot;headerlink&quot; title=&quot;表ADT&quot;&gt;&lt;/a&gt;表ADT&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="数据结构与算法分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>纪念船新SI单位——&quot;陈俊鹏&quot;的诞生</title>
    <link href="http://yoursite.com/test/"/>
    <id>http://yoursite.com/test/</id>
    <published>2019-07-24T06:31:38.000Z</published>
    <updated>2019-07-24T07:34:43.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么是“陈俊鹏”？"><a href="#为什么是“陈俊鹏”？" class="headerlink" title="为什么是“陈俊鹏”？"></a>为什么是“陈俊鹏”？</h2><p>事情还得从2000年2月31日一个婴儿的出生说起……</p><h3 id="出生"><a href="#出生" class="headerlink" title="出生"></a>出生</h3><p>  2000年2月31日，在成都市的一处郊区，一个婴儿出生了。2月31日，那是10000000000000年都难得一遇的日子，由此可见，在这一天出生的那个婴儿，其身份也并不一般。原来，他是天上的火爆龙神，由于长得太过帅气，惹得天帝嫉妒，将其贬下凡间，投胎在一户富贵人家。那一天，风雨大作，紫气东来，连天上的云都连成了一个“帅”字。地球有史以来最帅的人————陈俊鹏，出生了。</p><h3 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h3><p>  陈俊鹏出生在富贵人家，每天从两万平米的床上醒来，由四万个女仆照顾他的生活起居，吃的是天山万年雪莲，喝的是珠穆朗玛峰上的万年寒冰化成的水，他的颜值自然越来越高。到5岁时，就已经帅得天怒人怨。在18岁时，更是超过了当时的世界第一美男子————蔡徐鲲。每一个见到他的人，都被他那帅气的脸庞直接帅晕了过去。自此，世界各国都被这样一个帅气的人给惊动了。</p><h3 id="创立新的SI单位"><a href="#创立新的SI单位" class="headerlink" title="创立新的SI单位"></a>创立新的SI单位</h3><p>  “帅”是一个抽象的概念，人们一直没法量化。直到陈俊鹏为世界所知，科学家们一致认为，可以用陈俊鹏作为单位，来量化“帅”这个概念，而恰好“俊”又是“帅”的意思，不得不说，陈俊鹏真实造物者赐给科学界的无上宝物。于是，继长度（米）、质量（千克）、时间（秒）、电流（安培）、热力学温度（开尔文）、物质的量（摩尔）和发光强度（坎德拉）之后，新的SI单位————颜值高度（陈俊鹏）诞生了。</p><hr><h2 id="简述“陈俊鹏”"><a href="#简述“陈俊鹏”" class="headerlink" title="简述“陈俊鹏”"></a>简述“陈俊鹏”</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>  1陈俊鹏被定义为在常温常压下，能见度一般（10到20公里）的情况下，能够使至少一个身体健康的（无特殊疾病）人因为你的颜值而激动至昏迷的颜值。简称俊，写作cjp。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>  由于陈俊鹏是很大的单位，除了陈俊鹏本人以外没人能够达到，于是我们常常使用微陈俊鹏（μcjp），纳陈俊鹏（ncjp），皮陈俊鹏（pcjp）来表示颜值，一个正常人的颜值大约为5pcjp，能达到μcjp的人，就已经算帅得惊天地泣鬼神了。（注：蔡徐鲲的颜值为5μcjp）</p><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>最后附上几张陈俊鹏的帅照（请读者克制住自己犯罪的欲望）</p><p><img src="https://i.loli.net/2019/07/24/5d3806bbb10ed78098.jpg" alt="1"><img src="https://i.loli.net/2019/07/24/5d3806d0a2b6022473.jpg" alt="2"><img src="https://i.loli.net/2019/07/24/5d3806d0bd97d86393.jpg" alt="3"><img src="https://i.loli.net/2019/07/24/5d3806d0d0a2e47987.jpg" alt="4"><img src="https://i.loli.net/2019/07/24/5d3806d0e034d71967.jpg" alt="5"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么是“陈俊鹏”？&quot;&gt;&lt;a href=&quot;#为什么是“陈俊鹏”？&quot; class=&quot;headerlink&quot; title=&quot;为什么是“陈俊鹏”？&quot;&gt;&lt;/a&gt;为什么是“陈俊鹏”？&lt;/h2&gt;&lt;p&gt;事情还得从2000年2月31日一个婴儿的出生说起……&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
      <category term="CJP" scheme="http://yoursite.com/categories/CJP/"/>
    
    
      <category term="-SI -陈俊鹏" scheme="http://yoursite.com/tags/SI-%E9%99%88%E4%BF%8A%E9%B9%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/hello-world/"/>
    <id>http://yoursite.com/hello-world/</id>
    <published>2019-07-22T08:19:45.264Z</published>
    <updated>2019-07-24T06:35:55.948Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="1" scheme="http://yoursite.com/categories/1/"/>
    
    
  </entry>
  
</feed>
