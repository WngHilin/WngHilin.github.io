<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WngHilin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-02T09:25:26.091Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WngHilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript简要学习</title>
    <link href="http://yoursite.com/Javascript%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/Javascript简要学习/</id>
    <published>2019-08-01T02:47:11.000Z</published>
    <updated>2019-08-02T09:25:26.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript：</p><ul><li>是<strong>基于对象</strong>和<strong>事件驱动</strong>的语言，应用于<strong>客户端</strong><ul><li>基于对象：<ul><li>提供了很多对象，可直接使用</li></ul></li><li>事件驱动：<ul><li>可以实现动态效果</li></ul></li><li>客户端：指浏览器</li></ul></li><li>特点：<ul><li>交互性<ul><li>信息的动态交互</li></ul></li><li>安全性：<ul><li>js不能访问本地磁盘的文件</li></ul></li><li>跨平台性：<ul><li>通过浏览器实现</li></ul></li></ul></li><li>组成：<ul><li>（1）<strong>ECMAScript</strong><ul><li>ECMA ：欧洲计算机协会</li><li>由ECMA组织指定的js语法和语句</li></ul></li><li>（2）<strong>BOM</strong><ul><li>browser object model 浏览器对象模型</li></ul></li><li>（3）<strong>DOM</strong><ul><li>document object model 文档对象模型</li></ul></li></ul></li></ul><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="JS和HTML的结合方式"><a href="#JS和HTML的结合方式" class="headerlink" title="JS和HTML的结合方式"></a>JS和HTML的结合方式</h3><ul><li><p>（1）使用script标签</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>（2）引入外部的js文件</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">srt</span>=<span class="string">"*.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>script标签放置：可以放在任何位置，但html是从上到下解析，所以最好放在后面，否则JavaScript可能获取不到input等标签里面的值。</p></li></ul><h3 id="原始类型和声明变量"><a href="#原始类型和声明变量" class="headerlink" title="原始类型和声明变量"></a>原始类型和声明变量</h3><ul><li><p>js是弱类型语言</p></li><li><p>定义变量 使用关键字var</p></li><li><p>原始类型：</p><ul><li>string：字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li>number：数字类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><ul><li>boolean：true or false</li><li>null：获取对象的引用，null表示对象引用为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>undefined：定义一个变量，没有赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aa;</span><br></pre></td></tr></table></figure></li><li><p>typeof()：可以查看变量的类型</p></li></ul><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul><li><p>种类：</p><ul><li><p>if判断</p></li><li><p>switch语句：js所有类型都支持</p></li><li><p>循环 for while do-while</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>与java类似</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>与java中不同的：<ul><li>js中不区分整数和小数，123 / 1000 == 0.123</li><li>字符串相加和相减：<ul><li>“456” + 1 == “4561”（相加做字符串连接）</li><li>“456” - 1 == “455”（相减进行真正的相减）</li><li>“abc” - 1会提示NaN表示不是一个数字</li></ul></li><li>boolean操作：<ul><li>true + 1 == 2</li><li>false + 1 == 1</li><li>即true是1，false是0</li></ul></li><li>“ === ”和“ == ”：<ul><li>==：值是否相等</li><li>===：值和类型是否相等</li></ul></li><li>补充：document.write()：<ul><li>直接向页面写入内容，可以写入变量，固定值，html代码</li></ul></li></ul></li></ul><p><a name="Array" href></a></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>定义：</p><ul><li><p>（1）var[] arr = {1, 2, 3}; //数组可以存放不同的数据类型</p></li><li><p>（2）使用内置Array对象</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>); <span class="comment">//建立有5个元素的数组</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">//创建数组&#123;3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>属性：</p><ul><li>（1）length：arr.length;</li><li><a id="gotoMoreArray" href="#LearnMoreArray">深入学习数组</a></li></ul></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>定义函数：</p><ul><li>（1）使用function关键字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 方法名(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    （返回值）;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数列表直接写参数名称，不用写var</span></span><br></pre></td></tr></table></figure><ul><li>（2）匿名函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体和返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（3）使用内置对象Function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"参数列表"</span>, <span class="string">"方法体和返回值"</span>);</span><br><span class="line"><span class="comment">//使用较少</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><ul><li><strong>全局变量</strong>：在script标签里定义一个变量，其在<strong>整个页面</strong>的js部分都可使用<ul><li>方法内外，在另一个script标签使用</li></ul></li><li><strong>局部变量</strong>：在方法内部定义一个变量，只能在方法内部使用</li></ul><p><a name="Reload" href></a></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><ul><li>定义：函数名相同，函数参数列表不同(参数个数和参数类型)，根据参数不同去执行不同操作，但在js中，同一个作用域，出现两个名字一样的函数，后面的会覆盖前面的。故<strong>JavaScript没有真正意义上的重载</strong>。</li></ul><hr><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li><strong>创建</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>属性</strong>：</p><ul><li><strong>length</strong>：字符串的长度</li></ul></li><li><p><strong>方法</strong>：</p><ul><li><p>（1）与HTML相关：</p><ul><li><strong>bold</strong>：实现加粗</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(str.bold());</span><br></pre></td></tr></table></figure><ul><li><strong>fontcolor</strong>：修改字符串的颜色</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str2.fontcolor(<span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>fontsize</strong>：修改字体大小</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str3.fontsize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>link</strong>：将字符串显示为超链接</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str4.link(<span class="string">"wnghilin.top"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>sub</strong>、<strong>sup</strong>：将字符串显示为上下标</li></ul></li><li><p>（2）与Java类似：</p><ul><li><strong>concat</strong>：连接两个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"gds"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str1.concat(str2));</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">abcgds</span><br></pre></td></tr></table></figure><ul><li><strong>charAt</strong>：返回指定位置的字符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = <span class="string">"abcdefg"</span>;</span><br><span class="line">str3.charAt(<span class="number">0</span>);<span class="comment">//返回a</span></span><br><span class="line">str3.charAt(<span class="number">20</span>);<span class="comment">//返回空字符串</span></span><br></pre></td></tr></table></figure><ul><li><strong>indexOf</strong>：返回字符串位置，若不存在，返回-1</li><li><strong>split</strong>：切分字符串，分为数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str4 = <span class="string">"a-b-c-d"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = str4.split(<span class="string">"-"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>replace</strong>：替换字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str6.replace(<span class="string">"a"</span>, <span class="string">"6"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>substr</strong> 和 <strong>substring</strong>：截取子字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str5 = <span class="string">"abcdefghuiop"</span>;</span><br><span class="line">str5.substr(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">//fgh 从5开始向后开始截取3个字符</span></span><br><span class="line">str5.substring(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">//de 从3位开始，第5位结束但不包含第5位</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><a name="LearnMoreArray" href></a></p><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li><p>创建：<a id="goArray" href="#Array">链接</a></p></li><li><p>属性：</p><ul><li>length：数组的长度</li></ul></li><li><p>方法：</p><ul><li><strong>concat</strong>：数组拼接，用法类似字符串</li><li><strong>join</strong>：根据指定字符分隔数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr); <span class="comment">//输出：a, b, c</span></span><br><span class="line"><span class="built_in">document</span>.write(arr.join(<span class="string">"-"</span>)); <span class="comment">//输出：a-b-c</span></span><br></pre></td></tr></table></figure><ul><li><strong>push</strong>：向数组末尾添加一个或多个新的元素，并返回数组新的长度</li></ul><p><strong>&lt;注&gt;</strong>如果向末尾添加的是数组，会将整个数组看作一个元素将其加入到原有数组中</p><ul><li><strong>pop</strong>：删除并返回最后一个元素</li><li><strong>reverse</strong>：反转数组</li></ul></li></ul><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><ul><li>获取当前时间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date; <span class="comment">//Fri Aug 02 2019 15:51:13 GMT+0800 (中国标准时间)</span></span><br><span class="line">date.toLocaleString();<span class="comment">// 2019/8/2 下午3:53:45</span></span><br></pre></td></tr></table></figure><ul><li>获取当前年月日和星期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date.getFullYear(); <span class="comment">//2019</span></span><br><span class="line">date.getMonth(); <span class="comment">//7，因为返回结果是0-11月，需要再加一返回真实月数</span></span><br><span class="line">date.getDate(); <span class="comment">//2</span></span><br><span class="line">date.getDay(); <span class="comment">//5，返回0-6，星期日是0</span></span><br></pre></td></tr></table></figure><ul><li>获取当前时分秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date.getHours(); <span class="comment">//16</span></span><br><span class="line">date.getMinutes(); <span class="comment">//5</span></span><br><span class="line">date.getSeconds(); <span class="comment">//36</span></span><br></pre></td></tr></table></figure><ul><li>获取毫秒数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.getTime(); <span class="comment">//1564733221660，1970年1月1日至今的毫秒数</span></span><br></pre></td></tr></table></figure><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>都是静态方法，只能通过<strong>类名</strong>+<strong>方法</strong>调用</p><ul><li><p>方法：</p><ul><li><strong>cell</strong>：上舍入</li><li><strong>floor</strong>：下舍入</li><li><strong>round</strong>：四舍五入</li><li><strong>random</strong>：产生0.0到1.0之间的随机数</li></ul></li><li><p>属性</p><ul><li><strong>PI</strong>：圆周率</li><li><strong>E</strong>：自然对数的底数</li></ul></li></ul><h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><ul><li><p>不属于任何对象，致谢写名称使用</p><ul><li><strong>eval</strong>：如果字符串是js代码，使用该方法直接执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"alert(1234)"</span>;</span><br><span class="line"><span class="built_in">eval</span>(str); <span class="comment">//执行alert(1234)</span></span><br></pre></td></tr></table></figure><ul><li><strong>encodeURI</strong> 和 <strong>decodeURI</strong>：对字符进行编码和解码<ul><li>将中文先编码再解码可以有效防止乱码</li></ul></li><li><strong>encodeURIComponent</strong> 和 <strong>decodeURIComponent</strong>：<ul><li>与上面只有编码字符多少的差别</li></ul></li><li><strong>isNaN</strong>：判断当前字符串是否是数字，若是，返回false</li><li><strong>parseInt</strong>：解析字符串并返回一个整数</li></ul></li></ul><h3 id="重载-1"><a href="#重载-1" class="headerlink" title="重载"></a>重载</h3><p>有没有重载？<a id="goReload" href="#Reload">链接</a></p><ul><li>重载可模拟实现<ul><li>使用arguments对象实现，这个方法的缺点是麻烦。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'一个参数'</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'两个参数'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数通过arguments[0]...来使用</span></span><br></pre></td></tr></table></figure><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li><p><strong>BOM</strong>：浏览器对象模型</p></li><li><p>有哪些对象：</p><ul><li><p>navigator：可以货期客户机的信息（浏览器的信息）</p><ul><li>navigator.appName; //显示浏览器的名称</li></ul></li><li><p>screen：可返回屏幕信息</p><ul><li>screen.width; //返回屏幕的宽</li><li>screen.height; //返回屏幕的高</li></ul></li><li><p>location：请求url地址</p><ul><li><p>href属性</p><ul><li><p>获取请求的url地址，即浏览器地址栏的地址</p></li><li><p>设置url地址</p><ul><li>可以设置页面按钮的事件，将其跳转到另外一个页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"跳转"</span> <span class="attr">onclick</span>=<span class="string">"href1()"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">href1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        location.href=<span class="string">"http://www.baidu.com"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>history：请求url的历史记录</p><ul><li>可以通过其实现浏览器前进后退功能<ul><li>history.back(); //到上一个页面</li><li>history.forward(); //到下一个页面</li><li>history.go(1); //到下一个页面</li><li>history.go(-1); //到下一个页面</li></ul></li></ul></li><li><p><strong>window</strong></p></li></ul></li></ul><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><ul><li><p>窗口对象</p></li><li><p><strong>顶层对象</strong>（所用的bom对象都是在window对象的里面操作的）</p></li></ul><ul><li><p>方法：</p><ul><li><p>window.alert()：弹出一个消息提示框</p><ul><li>简写alert();</li></ul></li><li><p>confirm()：确认提示框，参数为提示内容</p><ul><li>返回值：若点击确认，则返回true，否则返回false</li></ul></li><li><p>prompt(text, defaultText)：输入对话框</p><ul><li>text为提示输入，defaultText为默认输入内容</li></ul></li><li><p><strong>open(URL,name,features,replace)</strong>：打开一个新窗口，并返回窗口对象</p><ul><li><p><strong>URL</strong>： 一个可选的字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者它的值是空字符串，那么新窗口就不会显示任何文档。</p></li><li><p><strong>name</strong>： 一个可选的字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 <a> 和 <form> 的属性 </form></a></p></li><li><p>*<em>target *</em>的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</p></li><li><p><strong>features</strong>： 一个可选的字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在窗口特征这个表格中，我们对该字符串的格式进行了详细的说明。</p></li><li><p><strong>replace</strong>： 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：</p><pre><code>**true - URL**： 替换浏览历史中的当前条目。</code></pre><p>​             <strong>false - URL：</strong> 在浏览历史中创建新的条目。</p></li></ul></li><li><p>close()：关闭窗口，浏览器兼容性较差</p></li><li><p><strong>做定时器</strong>：</p><ul><li>setInterval(code, millisec)：每millisec毫秒执行一次code代码</li><li></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;JavaScript：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是&lt;strong&gt;基于对象&lt;/strong&gt;和&lt;strong&gt;事件驱动&lt;/strong&gt;的
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS简要学习</title>
    <link href="http://yoursite.com/css%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/css简要学习/</id>
    <published>2019-07-30T13:31:49.000Z</published>
    <updated>2019-08-01T02:47:48.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><ul><li>css：层叠样式表<ul><li>样式表：有很多属性和属性值</li><li>css可以使得页面显示效果更好，可以提高后期样式代码的可维护性</li></ul></li></ul><hr><h2 id="CSS使用"><a href="#CSS使用" class="headerlink" title="CSS使用"></a>CSS使用</h2><h3 id="CSS和HTML的四种结合方式"><a href="#CSS和HTML的四种结合方式" class="headerlink" title="CSS和HTML的四种结合方式"></a>CSS和HTML的四种结合方式</h3><ul><li><p>（1）style属性：</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> = <span class="string">"background-color:red;color:green"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><center>style属性示例</center></li><li><p>（2） style标签：</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---  此处可以设置&lt;div&gt;标签的样式  ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">        css代码;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><center>style标签示例</center></li><li><p>（3）在style标签 使用语句：</p><ul><li>创建css文件（.css）</li><li>在style标签中使用@import url(css文件路径)；</li></ul></li><li><p>（4）使用头标签引入外部css文件</p><ul><li><p>创建css文件</p></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css路径"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>注</strong>：第三种方式在某些浏览器下不起作用，一般用第四种</p></li></ul><h3 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h3><p>优先级：即最终以哪一个样式为准</p><ul><li>从上到下，从内到外，优先级从低到高。（一般情况）<ul><li>即html中，以在下方的和内部的样式为准</li><li>格式：选择器名称{属性名: 属性值; ······}</li></ul></li></ul><hr><h3 id="CSS基本选择器"><a href="#CSS基本选择器" class="headerlink" title="CSS基本选择器"></a>CSS基本选择器</h3><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><ul><li><p>（1）标签选择器：用标签的名称作为选择器</p></li><li><p>（2）class选择器：</p><ul><li><p>每个html标签都有个属性 class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---  此处可以用class1作为选择器 ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.class1</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*此处修改所有class属性为class1的样式*/</span></span><br><span class="line"><span class="selector-class">.class1</span>&#123;</span><br><span class="line">    css代码；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>（3）id选择器：</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-id">#id1</span>&#123;</span><br><span class="line">css代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*此处修改所有id属性为id1的样式*/</span></span><br><span class="line"><span class="selector-id">#id1</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ul><li>id选择器 &gt; class选择器 &gt; 标签选择器</li></ul><h3 id="CSS扩展选择器"><a href="#CSS扩展选择器" class="headerlink" title="CSS扩展选择器"></a>CSS扩展选择器</h3><ul><li><p>（1）关联选择器</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置嵌套标签里的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*div里的p标签*/</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>（2）组合选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将div和p设置为相同样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>（3）伪元素选择器</p><ul><li><p>css提供的定义好的样式，可以直接选用</p></li><li><p>比如超链接：</p><ul><li>状态：原始 悬停 点击 点击后</li><li>原始： :link</li><li>悬停： :hover</li><li>点击： :active</li><li>点击后： :visited</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><p>在布局前需要把数据装到一块一块的区域内，这个区域叫做盒子。</p><p><img src="https://www.runoob.com/images/box-model.gif" alt="css盒子模型"></p><ul><li><p><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</p><ul><li>与边框类似</li></ul></li><li><p><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</p><ul><li><p><strong>上</strong>：border-top</p></li><li><p><strong>下</strong>：border-bottom</p></li><li><p><strong>左</strong>：border-left</p></li><li><p><strong>右</strong>：border-right</p></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*统一设置*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*分别设置*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#id1</span>&#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> dashed yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</p><ul><li>与边框类似</li></ul></li><li><p><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</p></li></ul><h3 id="布局的漂浮"><a href="#布局的漂浮" class="headerlink" title="布局的漂浮"></a>布局的漂浮</h3><ul><li><strong>float</strong>: 用于设置布局悬浮<ul><li><strong>none</strong>: 默认值，对象不漂浮。</li><li><strong>left</strong>: 文本流向对象的右边。（其后面的部分漂向它的右边，空出的位置由剩下的补齐）</li><li><strong>right</strong>: 文本流向对象的左边。</li></ul></li><li>缺点：在某些浏览器上无法使用</li></ul><h3 id="布局的定位"><a href="#布局的定位" class="headerlink" title="布局的定位"></a>布局的定位</h3><ul><li>position: 用于设置布局定位<ul><li>absolute: 将对象从文档流中拖出，其原来的位置由后面的补上<ul><li>可用 top、left等对它进行绝对定位。</li></ul></li><li>relative:  不从文档流中拖出，其余盒子位置不变</li></ul></li></ul><hr><p>学习资料：<a href="https://www.bilibili.com/video/av37452727/?p=28" target="_blank" rel="noopener">(28天完整版)JavaWeb视频教程</a></p><p>资料、图片来源：<a href="https://www.runoob.com/css/css-boxmodel.html" target="_blank" rel="noopener">CSS 盒子模型</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS简介&quot;&gt;&lt;a href=&quot;#CSS简介&quot; class=&quot;headerlink&quot; title=&quot;CSS简介&quot;&gt;&lt;/a&gt;CSS简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;css：层叠样式表&lt;ul&gt;
&lt;li&gt;样式表：有很多属性和属性值&lt;/li&gt;
&lt;li&gt;css可以使得页面显示
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>反射————框架设计的灵魂</title>
    <link href="http://yoursite.com/%E5%8F%8D%E5%B0%84%E6%A1%86%E6%9E%B6%E7%9A%84%E7%81%B5%E9%AD%82/"/>
    <id>http://yoursite.com/反射框架的灵魂/</id>
    <published>2019-07-27T07:25:49.000Z</published>
    <updated>2019-08-02T07:51:27.170Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>框架：<strong>软件框架</strong>（software framework），通常指的是为了实现某个业界标准或完成特定基本任务的<a href="https://baike.baidu.com/item/软件组件/9817461" target="_blank" rel="noopener">软件组件</a>规范，也指为了实现某个软件组件规范时，提供规范所要求之基础功能的软件产品。也被称为半成品软件。可以在框架的基础上进行软件开发，可以简化编码。</p></blockquote><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>反射：将类的各个组成部分封装为其他对象，这就是反射机制。（在Class 类对象阶段，将.class文件的各个部分封装成不同的类对象，如将成员变量封装成Field类对象并用数组存储起来。其总体是由class类对象储存的）<ul><li>好处：<pre><code>* 1.可以在程序运行过程中操作这些对象。* 2.可以解耦</code></pre></li></ul></li></ul><h3 id="获取字节码class对象的三种方式"><a href="#获取字节码class对象的三种方式" class="headerlink" title="获取字节码class对象的三种方式"></a>获取字节码class对象的三种方式</h3><ul><li><p>获取Class对象的方式：</p><ol><li>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li>类名.class：通过类名的属性class获取<ul><li>多用于参数的传递</li></ul></li><li>对象.getClass()：getClass()方法在Object类中定义着。<ul><li>多用于对象的获取字节码的方式</li></ul></li></ol><ul><li>结论：<br>  同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</li></ul></li></ul><h3 id="class类对象的获取功能"><a href="#class类对象的获取功能" class="headerlink" title="class类对象的获取功能"></a>class类对象的获取功能</h3><ul><li><p>Class对象功能：</p><ul><li>获取功能：<ol><li>获取成员变量：<ul><li>Field[] getFields() ：获取所有public修饰的成员变量</li></ul></li></ol></li></ul></li><li><p>Field getField(String name)   获取指定名称的 public修饰的成员变量</p></li><li><p>Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符</p></li><li><p>Field getDeclaredField(String name)  </p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用法示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">        Field[] fields = personClass.getFields();</span><br><span class="line">     <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">     Field a = personClass.getField(<span class="string">"a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><pre><code>2. 获取构造方法：  * Constructor&lt;?&gt;[] getConstructors()    * Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)    * Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)    * Constructor&lt;?&gt;[] getDeclaredConstructors()  3. 获取成员方法：  * Method[] getMethods()    * Method getMethod(String name, 类&lt;?&gt;... parameterTypes)    * Method[] getDeclaredMethods()    * Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)  4. 获取全类名      * String getName()  </code></pre><ul><li><p>Field：成员变量</p><ul><li><p>操作：</p><ol><li><p>设置值</p><ul><li>void set(Object obj, Object value)  </li></ul></li><li><p>获取值</p><ul><li>get(Object obj) </li></ul></li><li><p>忽略访问权限修饰符的安全检查</p><ul><li>setAccessible(true):暴力反射</li></ul></li></ol></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;框架：&lt;strong&gt;软件框架&lt;/strong&gt;（software framework），通常指的是为了实现某个业界标准或完成特定基本任务的&lt;a href=&quot;https://baike.baidu.com/item/软件组件/9817461&quot; ta
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用Junit进行单元测试</title>
    <link href="http://yoursite.com/Junit/"/>
    <id>http://yoursite.com/Junit/</id>
    <published>2019-07-27T02:50:52.000Z</published>
    <updated>2019-07-27T03:18:05.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ul><li><p>黑箱测试：不需要输入代码，只看输入输出</p></li><li><p>白箱测试：需要输入代码进行测试</p><p>（其中，使用Junit进行测试是白箱测试 ）</p></li></ul><h2 id="Junit使用"><a href="#Junit使用" class="headerlink" title="Junit使用"></a>Junit使用</h2><ul><li><p>步骤：</p></li><li><ol><li>定义一个测试类</li></ol><ul><li>​    建议使用被测试的类名+Test命名</li><li>​    可以建立一个新的test包储存测试类</li></ul></li><li><ol start="2"><li><p>定义测试方法，该测试方法可以独立运行：</p><ul><li>​    加上@Test，如下方代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>导入Junit依赖环境</p></li><li><p>使用断言来判断结果: </p><ul><li>判定结果：红色：失败    绿色：成功</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">    <span class="keyword">int</span> result = c.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    Assert.assertEquals(期望结果，运算结果)(<span class="number">2</span>, result); </span><br><span class="line">    <span class="comment">//Assert.assertEquals(期望结果，运算结果)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>失败结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.AssertionError: </span><br><span class="line">Expected :2</span><br><span class="line">Actual   :3</span><br></pre></td></tr></table></figure></li></ul><h3 id="Before-After方法"><a href="#Before-After方法" class="headerlink" title="@Before @After方法"></a>@Before @After方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始化方法</span></span><br><span class="line"><span class="comment">    * 所有测试方法执行之前都将执行这个方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"init..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 释放资源方法</span></span><br><span class="line"><span class="comment">    * 所有测试方法执行之后都会自动执行这个方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@After</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"close..."</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;黑箱测试：不需要输入代码，只看输入输出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;白箱测试：需要输入代码进行测试&lt;
      
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第4章 树</title>
    <link href="http://yoursite.com/%E7%AC%AC4%E7%AB%A0%E6%A0%91/"/>
    <id>http://yoursite.com/第4章树/</id>
    <published>2019-07-26T06:59:39.000Z</published>
    <updated>2019-08-02T09:32:31.920Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><blockquote><p><strong>树</strong>（tree）是一些节点的集合，其可以为空集；若它不为空集，则一棵树由<strong>根</strong>（root）节点 r 以及0个或多个非空的子树T<sub>1</sub>、T<sub>2</sub>……组成，其中每一刻的根都被来自根 r 的一条有向的<strong>边</strong>（edge）所连接。  </p></blockquote><h3 id="树的实现"><a href="#树的实现" class="headerlink" title="树的实现"></a>树的实现</h3><p>实现树的一种方法可以是在每一个节点除数据外还要有一些指针，使得该节点的每一个儿子都有一个指针指向它。但由于节点的儿子个数未知且可能变化很大，因此只能通过将每个节点的所有儿子都放在树节点的链表中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">PtrToNode</span></span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">  ElementType Element;</span><br><span class="line">  PtrToNode FirstChild;</span><br><span class="line">  PtrToNode NextSibling;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如图所示：</p><p><img src="https://i.loli.net/2019/07/27/5d3beaf49ac3561782.png" alt="image1"></p><h3 id="树的遍历及应用"><a href="#树的遍历及应用" class="headerlink" title="树的遍历及应用"></a>树的遍历及应用</h3><ul><li><p>先序遍历（preorder traversal）：在先序遍历中，对节点的处理工作是在它的诸儿子节点被处理之前（pre）进行的。其每个节点总的工作量为常数。其时间复杂度为O(N)。例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算机中的文件系统可以用一个树来表示</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ListDir</span><span class="params">(DirectoryOrFile D, <span class="keyword">int</span> Depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(D is a legitimate entry)</span><br><span class="line">    &#123;</span><br><span class="line">        PrintName(D, Depth);</span><br><span class="line">        <span class="keyword">if</span>(D is a Directory)</span><br><span class="line">            <span class="keyword">for</span> each child, C, of D</span><br><span class="line">                ListDir(C, Depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDirectory</span><span class="params">(DirectoryOrFile D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListDir(D, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>列出分级文件系统中目录的例程</center></li><li><p>后序遍历（postorder traversal）：在后序遍历中，在一个节点处的工作实在它的诸儿子节点被计算后（post）进行的。例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SizeDirectory</span><span class="params">(DirectoryOrFile D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TotalSize;</span><br><span class="line">    </span><br><span class="line">    TotalSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(D is a legitimate entry)</span><br><span class="line">    &#123;</span><br><span class="line">        TotalSize = FileSize(D);</span><br><span class="line">        <span class="keyword">if</span>(D is a directory)</span><br><span class="line">            <span class="keyword">for</span> each child, C, of D</span><br><span class="line">                TotalSize += SizeDirectory(C);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TotalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>计算一个目录大小的例程</center>## 二叉树</li><li><blockquote><p>二叉树（binary tree）是一棵树，其中每个节点都不能有多于两个的儿子。</p></blockquote></li></ul><p>二叉树的深度可以远小于N，而其平均深度可以达到：$O(\sqrt(N))$，而二叉树的特殊情况，<strong>二叉查找树</strong>的深度平均值可以达到O(logN)。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>二叉树的一个节点就是由<strong>Key</strong>(关键字)信息加上两个指向其他节点的指针(Left和Right)组成的结构。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PtrToNode</span> <span class="title">Tree</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    Tree Left;</span><br><span class="line">    Tree Right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="表达式树"><a href="#表达式树" class="headerlink" title="表达式树"></a>表达式树</h3><p><strong>表达式</strong>树的树叶是<strong>操作数</strong>，如常数或变量，而其他节点为<strong>操作符</strong>（需要所有操作都是二元的）。</p><p><img src="https://img2018.cnblogs.com/blog/567389/201811/567389-20181116090647050-1700454715.png" alt="image2"></p><p>这种先读左儿子，再读节点，再读右儿子得到中缀表达式的方法，称为<strong>中序遍历</strong>，而采用后序遍历将会得到后缀表达式。</p><h4 id="构造一颗表达式树"><a href="#构造一颗表达式树" class="headerlink" title="构造一颗表达式树"></a>构造一颗表达式树</h4><p>设输入为<br>$$<br>a b + c d e + * *<br>$$<br>前两个符号式操作数，因此我们创建两颗单节点树并把指向它们的指针压入栈中：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf57523e0951358.png" alt="image3"></p><p>接着，“ + ”被读入，指向这两棵树的指针被弹出，形成一棵新的树：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf64b089d343785.png" alt="image4"></p><p>随后，c、d、e被读入，同理，压入栈中：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf6d7aa8d725258.png" alt="image5"></p><p>接下来读入“ + ”号，d、e弹出并合并。继续读读到“ * ”号，再将两棵树合并，结果为：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf75eec45351009.png" alt="image5"></p><p><img src="https://i.loli.net/2019/07/27/5d3bf7dad68f544499.png" alt="image5"></p><p>随后同理，即可得到最终结果。</p><h2 id="查找树ADT——二叉查找树"><a href="#查找树ADT——二叉查找树" class="headerlink" title="查找树ADT——二叉查找树"></a>查找树ADT——二叉查找树</h2><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><blockquote><p>对于树中的每个节点X，它的左子树中的所有关键字值小于X的关键字值，而它的右子树中所有关键字值大于X的关键字值。这意味着，该树所有的元素都可以用某种统一的方式排序。</p></blockquote><h4 id="MakeEmpty"><a href="#MakeEmpty" class="headerlink" title="MakeEmpty"></a>MakeEmpty</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> SearchTree *Node;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> element;</span><br><span class="line">SearchTree left;</span><br><span class="line">SearchTree right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">SearchTree <span class="title">MakeEmpty</span><span class="params">(SearchTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">MakeEmpty(tree-&gt;left);</span><br><span class="line">MakeEmpty(tree-&gt;right);</span><br><span class="line"><span class="built_in">free</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(X &lt; T-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FindMin-和-FindMax"><a href="#FindMin-和-FindMax" class="headerlink" title="FindMin 和 FindMax"></a>FindMin 和 FindMax</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下分别采用了递归和非递归的方法来实现</span></span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FindMin(T-&gt;Left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">while</span>(T -&gt; <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SearchTree <span class="title">Insert</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//建立并返回一个单节点树</span></span><br><span class="line">        T = (SearchTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">        <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!!"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;Element = X;</span><br><span class="line">            T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;Element)</span><br><span class="line">        T-&gt;Left = Insert(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; T-&gt;Element)</span><br><span class="line">        T-&gt;Right = Insert(X, T-&gt;Right);</span><br><span class="line">    <span class="comment">//如果X已经在树里面，则不进行操作</span></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>删除是最困难的操作。如果节点是一片树叶，那么它可以被立即删除。如果节点有一个儿子，则该节点可以在其父节点跳帧指针绕过该节点后被删除。如图：</p><p><img src="C:%5CUsers%5CNier%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20190730144849.png" alt="QQ截图20190730144849"></p><p>删除具有两个儿子的节点，一般的策略是用其右子树的最小的数据代替该节点的数据并递归地删除那个节点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SearchTree <span class="title">Delete</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position TmpCell;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">"Element Not Found"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;Element)</span><br><span class="line">        T-&gt;Left = Delete(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; T-&gt;Element)</span><br><span class="line">        T-&gt;Right = Delete(X, T-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left &amp;&amp; T-&gt;Right)</span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = FindMin(T-&gt;Right);</span><br><span class="line">        T-&gt;Element = TmpCell-&gt;Element;</span><br><span class="line">        T-&gt;Right = Delete(T-&gt;Element, T-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//1个或0个儿子</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = T;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Right == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Left;</span><br><span class="line">        <span class="built_in">free</span>(TmpCell);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ul><li><strong>AVL树</strong>是带有平衡条件的二叉查找树。这个平衡条件必须容易保持，且它须保证树的深度是O(logN).</li><li>一颗AVL树是其每个节点的左子树和右子树的高度最多差1的二叉查找树（空树的高度定义为-1。）</li></ul><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>在插入一个节点后，可能会破坏AVL树的特性，如果发生这种情况，那么就要把性质恢复以后才认为这一步插入完成。事实上，这总可以通过<strong>旋转</strong>（rotation）做到。</p><p>不平衡可能出现的情况：</p><ul><li>对$\alpha$的左儿子的左子树进行一次插入。</li><li>对$\alpha$的左儿子的右子树进行一次插入。</li><li>对$\alpha$的右儿子的左子树进行一次插入。</li><li>对$\alpha$的右儿子的右子树进行一次插入。</li></ul><p>左-左（或右-右）的情况需要进行一次<em>单旋转</em>（single rotation）而完成调整，另外两种需要进行一次<em>双旋转</em>（double rotation）。</p><h4 id="单旋转"><a href="#单旋转" class="headerlink" title="单旋转"></a>单旋转</h4><p>左子树的左子树变为节点的左子树，在将原来的左子树变为右子树，原来的右子树变为右子树的右子树。</p><p><img src="https://i.postimg.cc/xjByp3f5/QQ-20190731123727.png" alt="单旋转修复情形1"></p><center>单旋转修复情形1</center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;树&lt;/strong&gt;（tree）是一些节点的集合，其可以为空集；若它不为空集，则一
      
    
    </summary>
    
      <category term="数据结构与算法分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第3章 表、栈和队列</title>
    <link href="http://yoursite.com/%E7%AC%AC3%E7%AB%A0%E8%A1%A8%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/第3章表栈和队列/</id>
    <published>2019-07-25T07:46:50.000Z</published>
    <updated>2019-07-26T06:50:34.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表ADT"><a href="#表ADT" class="headerlink" title="表ADT"></a>表ADT</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>​    空表（empty list）：大小为0的表。</p><p>​    前驱元、后继元。</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><em>函数原型</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLast</span><span class="params">(Position P, List L)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(<span class="keyword">int</span> X, List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> X, List L, Position P)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Header</span><span class="params">(List L)</span></span>;</span><br></pre></td></tr></table></figure><p>具体实现：略</p><h3 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h3><p>链表一般会出现指针变量包含了伪地址的问题。删除表时，需要一个中间量来储存上一个节点。同时，使用malloc之后记得将该节点初始化。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="多项式ADT"><a href="#多项式ADT" class="headerlink" title="多项式ADT"></a>多项式ADT</h4><p>令F(X) = ∑<sub>i=0</sub><sup>N</sup> A<sub>i</sub>X<sup>i</sup>。如果多项式的次数过大，使用普通方法的运行时间就难以接受了。于是可以采用多项式ADT来实现多项式的加减乘等操作。</p><p><em>多项式ADT的数组实现的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> CoeffArray[MaxDegree + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> HighPower;</span><br><span class="line">&#125; * Polynomial;</span><br></pre></td></tr></table></figure><p><em>将多项式初始化为零的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZeroPolynomial</span><span class="params">(Polynomial Poly)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= MaxDegree; i++)</span><br><span class="line">        Poly-&gt;CoeffArray[i] = <span class="number">0</span>;</span><br><span class="line">    Poly-&gt;HighPower = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>两个多项式相加的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddPolynomial</span><span class="params">(<span class="keyword">const</span> Plynomial Poly1, <span class="keyword">const</span> Polynomial Poly2, Polynomial PolySum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ZeroPolynomial(PolySum);</span><br><span class="line">    PolySum-&gt;HighPower = Max(Poly1-&gt;HighPower, Poly2-&gt;HighPower);</span><br><span class="line">    <span class="keyword">for</span>(i = PolySum-&gt;HighPower; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        PolySum-&gt;CoeffArray[i] = Poly1-&gt;CoeffArray[i] + Poly2-&gt;CoeffArray[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>两个多项式相乘的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultPolynomial</span><span class="params">(<span class="keyword">const</span> Plynomial Poly1, <span class="keyword">const</span> Polynomial Poly2, Polynomial PolyProd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">ZeroPolynomial(PolyProd);</span><br><span class="line">PolySum-&gt;HighPower = Poly1-&gt;HighPower + Poly2-&gt;HighPower;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(PolyProd-&gt;HighPower &gt; MaxDegree)</span><br><span class="line">Error(<span class="string">"Exceeded array size"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= Poly1-&gt;HighPower; i++)</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= Poly2-&gt;HighPower; j++)</span><br><span class="line">                PolyProd-&gt;CoeffArray[i + j] += Poly1-&gt;CoeffArray[i] * Poly2-&gt;CoeffArray[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="栈ADT"><a href="#栈ADT" class="headerlink" title="栈ADT"></a>栈ADT</h2><h3 id="栈模型"><a href="#栈模型" class="headerlink" title="栈模型"></a>栈模型</h3><p><strong>栈</strong>（stack）是限制插入和删除只能在一个位置上进行的表，该位置是表的末端，即<strong>顶</strong>（top）。对栈的基本操作有<strong>Push</strong>和<strong>Pop</strong>。</p><p>栈有时又叫LIFO(后进先出)表。</p><h3 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h3><h4 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h4><p><em>栈ADT链表实现的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Stack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span>;</span><br></pre></td></tr></table></figure><p>测试栈是否空栈的例程*</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>创建一个空栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    S = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!"</span>);</span><br><span class="line">    S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MakeEmpty设置Next指针指向NULL</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">"Must use CreateStack First"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">while</span>(!IsEmpty(S))</span><br><span class="line">            Pop(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Push进栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToNode TmpCell;</span><br><span class="line"></span><br><span class="line">    TmpCell - <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(TmpCell == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell-&gt;Element = X;</span><br><span class="line">        TmpCell-&gt;Next = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = TmpCell;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>返回栈顶元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Next-&gt;Element;</span><br><span class="line">    Error(<span class="string">"Empty Stack"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>从栈弹出元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToNode FirstCell;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">"Empty Stack!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstCell = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = S-&gt;Next-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(FirstCell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    所有操作均花费常数时间，但对于malloc和free的调用是非常昂贵的。有的缺点可以通过使用第二个栈避免，该第二个栈初始时为空栈。当一个单元栋第一个栈弹出时，它只是被放到了第二个栈中，此后当第一个栈需要新单元时，它首先去检查第二个栈</p><h4 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h4><p>数组实现的栈可以避免指针的操作。其惟一潜在危害就是我们需要提前声明一个数组的大小。但通常来说声明一个足够大而不至于浪费太多空间的数组并不是太过困难，因此数组实现是一种比较流行的做法。</p><p><em>栈的声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EmptyTOS (-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MinStackSize (5)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span> *<span class="title">Stack</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TopAndPop</span><span class="params">(Stack S)</span></span>;</span><br></pre></td></tr></table></figure><p><em>栈的创建</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(MaxElements &lt; MinStackSize)</span><br><span class="line">        Error(<span class="string">"Stack size is too small"</span>);</span><br><span class="line">    S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strct StackRecord));</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of Space!!!"</span>);</span><br><span class="line">    S-&gt;Array = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * MaxElements);</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;Array == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!!"</span>);</span><br><span class="line">    S-&gt;Capacity = MaxElements;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>栈的释放</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(S-&gt;Array);</span><br><span class="line">        <span class="built_in">free</span>(S);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>检测是否空栈</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;TopOfStack == EmptyTOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>创建一个空栈</em> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S-&gt;TopOfStack = EmptyTOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>进栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(S))</span><br><span class="line">        Error(<span class="string">"Full stack"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        S-&gt;Array[++S-&gt;TopOfStack] = X;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>将栈顶返回的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Array[S-&gt;TopOfStack];</span><br><span class="line">    Error(<span class="string">"Empty stack"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>从栈弹出元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">"Empty stack"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        S-&gt;TopOfStack--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="平衡符号"><a href="#平衡符号" class="headerlink" title="平衡符号"></a>平衡符号</h4><p>做一个空栈。读入字符知道文件尾。如果字符时一个开放符号，则将其推入栈中。如果字符是一个封闭符号，则当栈空时报错。否则，将栈元素弹出，如果弹出的符号不是对应的开放符号，则报错。在文件尾，如果栈非空则报错。</p><h4 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h4><p><strong>中缀表达式</strong>：4.99 + 5.99 + 6.99 * 1.06</p><p><strong>后缀表达式</strong>：4.99 1.06 * 5.99 + 6.99 1.06 * + （<strong>后缀</strong>（postfix）或<strong>逆波兰</strong>（reverse Polish）记法）</p><p>计算后缀表达式的方法是使用一个栈，当见到一个数字时就把它推入到栈中；遇到一个运算符时该运算符就作用于从该栈弹出的两个数（符号）上，将所得结果推入栈中。</p><p>如，计算 *<em>6 5 3 2 + 8 * + 3 + * *</em>：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">TopOfStack-&gt;</td><td align="center">3</td></tr><tr><td align="center"></td><td align="center">2</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>下面读到一个‘+’，所以3和2被弹出，其结果5被压入栈中：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">TopOfStack-&gt;</td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>接着，8进栈：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">TopOfStack-&gt;</td><td align="center">8</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>然后，8和5弹出，相乘，再将40压入栈中：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">TopOfStack-&gt;</td><td align="center">40</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>接着又遇到‘+’号，因此40和5被弹出，并且40 + 5 = 45进栈：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">TopOfStack-&gt;</td><td align="center">45</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>随后操作同上，得到结果288。</p><h4 id="中缀到后缀的转换"><a href="#中缀到后缀的转换" class="headerlink" title="中缀到后缀的转换"></a>中缀到后缀的转换</h4><p>设我们想将中缀表达式：</p><center> a + b * c + (d * e + f) * g  </center>转换成后缀表达式，其答案为<center>a b c * + d e * f + g * +</center>首先，a被读入，于是它流向输出。然后，“+”被读入并被放入栈中。接着b读入并流向输出：<table><thead><tr><th align="center">Stack</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">a b</td></tr></tbody></table><p>这时“ * ”读入。操作符栈顶元素比较低，故没有输出，“ * ”进栈。接着c被读入并输出：</p><table><thead><tr><th align="center">Stack</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center">*</td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">a b c</td></tr></tbody></table><p>后面是一个“ + ”号。其优先级比“ * ”低，因此将“ * ”从栈弹出并放入输出中；弹出剩下的“ + ”，因为其不比“ + ”优先级低，而是具有相同的优先级，然后将“ + ”压入栈中。</p><table><thead><tr><th align="center">Stack</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">a b c * +</td></tr></tbody></table><p>随后操作同上，需要注意的是“ （ ”的优先级最高，遇到“ ）”时要将所有符号弹出，直到遇到” （ “。</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>​    <strong>尾递归</strong>（tail recursion）是使用递归极端不当的例子。尾递归可以通过将递归调用变成goto语句并在其前加上对每个函数的赋值语句而手动消除。很多编译器都能自动消除尾递归，但最好还是通过手动进行消除。</p><hr><h2 id="队列ADT"><a href="#队列ADT" class="headerlink" title="队列ADT"></a>队列ADT</h2><h3 id="队列模型"><a href="#队列模型" class="headerlink" title="队列模型"></a>队列模型</h3><p>​    队列的基本操作是<em>Enqueue</em>和<em>Dequeue</em>。</p><h3 id="队列的数组实现"><a href="#队列的数组实现" class="headerlink" title="队列的数组实现"></a>队列的数组实现</h3><p>​    对于每一个队列数据结构，我们保留一个数组<em>Queue[ ]</em>以及<em>Front</em>和<em>Rear</em>，还有记录实际存在于队列中的元素的个数<em>Size</em>。</p><p>​    为使一个元素X入队，我们让<em>Size<em>和</em>Rear<em>都增加1，然后置</em>Queue[ Rear]</em> = X。若使一个元素出队，我们置返回值为<em>Queue[front]</em>，<em>Size</em>减1，然后让<em>Front</em>增加1。</p><p>​    为了防止不出界，该操作需要使用<strong>循环数组</strong>（circular array）实现。</p><p><em>队列的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span> *<span class="title">Queue</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeQueue</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(<span class="keyword">int</span> X, Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Front</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FrotAndDequeue</span><span class="params">(Queue Q)</span></span>;</span><br></pre></td></tr></table></figure><p><em>测试队列是否为空的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q-&gt;Size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>构造空队列的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q-&gt;Size = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;Front = <span class="number">1</span>;</span><br><span class="line">    Q-&gt;Rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>入队的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Succ</span><span class="params">(<span class="keyword">int</span> Value, Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(++Value == Q-&gt;Capacity)</span><br><span class="line">        Value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(<span class="keyword">int</span> X, Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(Q))</span><br><span class="line">        Error(<span class="string">"Full queue"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q-&gt;Size++;</span><br><span class="line">        Q-&gt;Rear = Succ(Q-&gt;Rear, Q);</span><br><span class="line">        Q-&gt;Array[Q-&gt;Rear] = X;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>出队的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> returnNum;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))</span><br><span class="line">        Error(<span class="string">"Empty Queue"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        returnNum = Q-&gt;Array[Q-&gt;Front];</span><br><span class="line">        Q-&gt;Front = Succ(Q-&gt;Front, Q);</span><br><span class="line">        Q-&gt;Size--;</span><br><span class="line">        <span class="keyword">return</span> returnNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;表ADT&quot;&gt;&lt;a href=&quot;#表ADT&quot; class=&quot;headerlink&quot; title=&quot;表ADT&quot;&gt;&lt;/a&gt;表ADT&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="数据结构与算法分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>纪念船新SI单位——&quot;陈俊鹏&quot;的诞生</title>
    <link href="http://yoursite.com/test/"/>
    <id>http://yoursite.com/test/</id>
    <published>2019-07-24T06:31:38.000Z</published>
    <updated>2019-07-24T07:34:43.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么是“陈俊鹏”？"><a href="#为什么是“陈俊鹏”？" class="headerlink" title="为什么是“陈俊鹏”？"></a>为什么是“陈俊鹏”？</h2><p>事情还得从2000年2月31日一个婴儿的出生说起……</p><h3 id="出生"><a href="#出生" class="headerlink" title="出生"></a>出生</h3><p>  2000年2月31日，在成都市的一处郊区，一个婴儿出生了。2月31日，那是10000000000000年都难得一遇的日子，由此可见，在这一天出生的那个婴儿，其身份也并不一般。原来，他是天上的火爆龙神，由于长得太过帅气，惹得天帝嫉妒，将其贬下凡间，投胎在一户富贵人家。那一天，风雨大作，紫气东来，连天上的云都连成了一个“帅”字。地球有史以来最帅的人————陈俊鹏，出生了。</p><h3 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h3><p>  陈俊鹏出生在富贵人家，每天从两万平米的床上醒来，由四万个女仆照顾他的生活起居，吃的是天山万年雪莲，喝的是珠穆朗玛峰上的万年寒冰化成的水，他的颜值自然越来越高。到5岁时，就已经帅得天怒人怨。在18岁时，更是超过了当时的世界第一美男子————蔡徐鲲。每一个见到他的人，都被他那帅气的脸庞直接帅晕了过去。自此，世界各国都被这样一个帅气的人给惊动了。</p><h3 id="创立新的SI单位"><a href="#创立新的SI单位" class="headerlink" title="创立新的SI单位"></a>创立新的SI单位</h3><p>  “帅”是一个抽象的概念，人们一直没法量化。直到陈俊鹏为世界所知，科学家们一致认为，可以用陈俊鹏作为单位，来量化“帅”这个概念，而恰好“俊”又是“帅”的意思，不得不说，陈俊鹏真实造物者赐给科学界的无上宝物。于是，继长度（米）、质量（千克）、时间（秒）、电流（安培）、热力学温度（开尔文）、物质的量（摩尔）和发光强度（坎德拉）之后，新的SI单位————颜值高度（陈俊鹏）诞生了。</p><hr><h2 id="简述“陈俊鹏”"><a href="#简述“陈俊鹏”" class="headerlink" title="简述“陈俊鹏”"></a>简述“陈俊鹏”</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>  1陈俊鹏被定义为在常温常压下，能见度一般（10到20公里）的情况下，能够使至少一个身体健康的（无特殊疾病）人因为你的颜值而激动至昏迷的颜值。简称俊，写作cjp。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>  由于陈俊鹏是很大的单位，除了陈俊鹏本人以外没人能够达到，于是我们常常使用微陈俊鹏（μcjp），纳陈俊鹏（ncjp），皮陈俊鹏（pcjp）来表示颜值，一个正常人的颜值大约为5pcjp，能达到μcjp的人，就已经算帅得惊天地泣鬼神了。（注：蔡徐鲲的颜值为5μcjp）</p><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>最后附上几张陈俊鹏的帅照（请读者克制住自己犯罪的欲望）</p><p><img src="https://i.loli.net/2019/07/24/5d3806bbb10ed78098.jpg" alt="1"><img src="https://i.loli.net/2019/07/24/5d3806d0a2b6022473.jpg" alt="2"><img src="https://i.loli.net/2019/07/24/5d3806d0bd97d86393.jpg" alt="3"><img src="https://i.loli.net/2019/07/24/5d3806d0d0a2e47987.jpg" alt="4"><img src="https://i.loli.net/2019/07/24/5d3806d0e034d71967.jpg" alt="5"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么是“陈俊鹏”？&quot;&gt;&lt;a href=&quot;#为什么是“陈俊鹏”？&quot; class=&quot;headerlink&quot; title=&quot;为什么是“陈俊鹏”？&quot;&gt;&lt;/a&gt;为什么是“陈俊鹏”？&lt;/h2&gt;&lt;p&gt;事情还得从2000年2月31日一个婴儿的出生说起……&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
      <category term="CJP" scheme="http://yoursite.com/categories/CJP/"/>
    
    
      <category term="-SI -陈俊鹏" scheme="http://yoursite.com/tags/SI-%E9%99%88%E4%BF%8A%E9%B9%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/hello-world/"/>
    <id>http://yoursite.com/hello-world/</id>
    <published>2019-07-22T08:19:45.264Z</published>
    <updated>2019-07-24T06:35:55.948Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="1" scheme="http://yoursite.com/categories/1/"/>
    
    
  </entry>
  
</feed>
