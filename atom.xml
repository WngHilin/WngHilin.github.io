<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WngHilin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-26T04:10:10.117Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WngHilin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第3章 表、栈和队列</title>
    <link href="http://yoursite.com/%E7%AC%AC3%E7%AB%A0%E8%A1%A8%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/第3章表栈和队列/</id>
    <published>2019-07-25T07:46:50.000Z</published>
    <updated>2019-07-26T04:10:10.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表ADT"><a href="#表ADT" class="headerlink" title="表ADT"></a>表ADT</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>​    空表（empty list）：大小为0的表。</p><p>​    前驱元、后继元。</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><em>函数原型</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLast</span><span class="params">(Position P, List L)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(<span class="keyword">int</span> X, List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> X, List L, Position P)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Header</span><span class="params">(List L)</span></span>;</span><br></pre></td></tr></table></figure><p>具体实现：略</p><h3 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h3><p>链表一般会出现指针变量包含了伪地址的问题。删除表时，需要一个中间量来储存上一个节点。同时，使用malloc之后记得将该节点初始化。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="多项式ADT"><a href="#多项式ADT" class="headerlink" title="多项式ADT"></a>多项式ADT</h4><p>令F(X) = ∑<sub>i=0</sub><sup>N</sup> A<sub>i</sub>X<sup>i</sup>。如果多项式的次数过大，使用普通方法的运行时间就难以接受了。于是可以采用多项式ADT来实现多项式的加减乘等操作。</p><p><em>多项式ADT的数组实现的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> CoeffArray[MaxDegree + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> HighPower;</span><br><span class="line">&#125; * Polynomial;</span><br></pre></td></tr></table></figure><p><em>将多项式初始化为零的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZeroPolynomial</span><span class="params">(Polynomial Poly)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= MaxDegree; i++)</span><br><span class="line">        Poly-&gt;CoeffArray[i] = <span class="number">0</span>;</span><br><span class="line">    Poly-&gt;HighPower = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>两个多项式相加的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddPolynomial</span><span class="params">(<span class="keyword">const</span> Plynomial Poly1, <span class="keyword">const</span> Polynomial Poly2, Polynomial PolySum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ZeroPolynomial(PolySum);</span><br><span class="line">    PolySum-&gt;HighPower = Max(Poly1-&gt;HighPower, Poly2-&gt;HighPower);</span><br><span class="line">    <span class="keyword">for</span>(i = PolySum-&gt;HighPower; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        PolySum-&gt;CoeffArray[i] = Poly1-&gt;CoeffArray[i] + Poly2-&gt;CoeffArray[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>两个多项式相乘的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultPolynomial</span><span class="params">(<span class="keyword">const</span> Plynomial Poly1, <span class="keyword">const</span> Polynomial Poly2, Polynomial PolyProd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">ZeroPolynomial(PolyProd);</span><br><span class="line">PolySum-&gt;HighPower = Poly1-&gt;HighPower + Poly2-&gt;HighPower;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(PolyProd-&gt;HighPower &gt; MaxDegree)</span><br><span class="line">Error(<span class="string">"Exceeded array size"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= Poly1-&gt;HighPower; i++)</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= Poly2-&gt;HighPower; j++)</span><br><span class="line">                PolyProd-&gt;CoeffArray[i + j] += Poly1-&gt;CoeffArray[i] * Poly2-&gt;CoeffArray[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="栈ADT"><a href="#栈ADT" class="headerlink" title="栈ADT"></a>栈ADT</h2><h3 id="栈模型"><a href="#栈模型" class="headerlink" title="栈模型"></a>栈模型</h3><p><strong>栈</strong>（stack）是限制插入和删除只能在一个位置上进行的表，该位置是表的末端，即<strong>顶</strong>（top）。对栈的基本操作有<strong>Push</strong>和<strong>Pop</strong>。</p><p>栈有时又叫LIFO(后进先出)表。</p><h3 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h3><h4 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h4><p><em>栈ADT链表实现的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Stack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span>;</span><br></pre></td></tr></table></figure><p>测试栈是否空栈的例程*</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>创建一个空栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    S = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!"</span>);</span><br><span class="line">    S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MakeEmpty设置Next指针指向NULL</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">"Must use CreateStack First"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">while</span>(!IsEmpty(S))</span><br><span class="line">            Pop(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Push进栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToNode TmpCell;</span><br><span class="line"></span><br><span class="line">    TmpCell - <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(TmpCell == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell-&gt;Element = X;</span><br><span class="line">        TmpCell-&gt;Next = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = TmpCell;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>返回栈顶元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Next-&gt;Element;</span><br><span class="line">    Error(<span class="string">"Empty Stack"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>从栈弹出元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToNode FirstCell;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">"Empty Stack!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstCell = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = S-&gt;Next-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(FirstCell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    所有操作均花费常数时间，但对于malloc和free的调用是非常昂贵的。有的缺点可以通过使用第二个栈避免，该第二个栈初始时为空栈。当一个单元栋第一个栈弹出时，它只是被放到了第二个栈中，此后当第一个栈需要新单元时，它首先去检查第二个栈</p><h4 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h4><p>数组实现的栈可以避免指针的操作。其惟一潜在危害就是我们需要提前声明一个数组的大小。但通常来说声明一个足够大而不至于浪费太多空间的数组并不是太过困难，因此数组实现是一种比较流行的做法。</p><p><em>栈的声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EmptyTOS (-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MinStackSize (5)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span> *<span class="title">Stack</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TopAndPop</span><span class="params">(Stack S)</span></span>;</span><br></pre></td></tr></table></figure><p><em>栈的创建</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(MaxElements &lt; MinStackSize)</span><br><span class="line">        Error(<span class="string">"Stack size is too small"</span>);</span><br><span class="line">    S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strct StackRecord));</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of Space!!!"</span>);</span><br><span class="line">    S-&gt;Array = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * MaxElements);</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;Array == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!!"</span>);</span><br><span class="line">    S-&gt;Capacity = MaxElements;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>栈的释放</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(S-&gt;Array);</span><br><span class="line">        <span class="built_in">free</span>(S);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>检测是否空栈</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;TopOfStack == EmptyTOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>创建一个空栈</em> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S-&gt;TopOfStack = EmptyTOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>进栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(S))</span><br><span class="line">        Error(<span class="string">"Full stack"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        S-&gt;Array[++S-&gt;TopOfStack] = X;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>将栈顶返回的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Array[S-&gt;TopOfStack];</span><br><span class="line">    Error(<span class="string">"Empty stack"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>从栈弹出元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">"Empty stack"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        S-&gt;TopOfStack--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p><strong>待续。。。。。。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;表ADT&quot;&gt;&lt;a href=&quot;#表ADT&quot; class=&quot;headerlink&quot; title=&quot;表ADT&quot;&gt;&lt;/a&gt;表ADT&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="数据结构与算法分析" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据结构与算法" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>纪念船新SI单位——&quot;陈俊鹏&quot;的诞生</title>
    <link href="http://yoursite.com/test/"/>
    <id>http://yoursite.com/test/</id>
    <published>2019-07-24T06:31:38.000Z</published>
    <updated>2019-07-24T07:34:43.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么是“陈俊鹏”？"><a href="#为什么是“陈俊鹏”？" class="headerlink" title="为什么是“陈俊鹏”？"></a>为什么是“陈俊鹏”？</h2><p>事情还得从2000年2月31日一个婴儿的出生说起……</p><h3 id="出生"><a href="#出生" class="headerlink" title="出生"></a>出生</h3><p>  2000年2月31日，在成都市的一处郊区，一个婴儿出生了。2月31日，那是10000000000000年都难得一遇的日子，由此可见，在这一天出生的那个婴儿，其身份也并不一般。原来，他是天上的火爆龙神，由于长得太过帅气，惹得天帝嫉妒，将其贬下凡间，投胎在一户富贵人家。那一天，风雨大作，紫气东来，连天上的云都连成了一个“帅”字。地球有史以来最帅的人————陈俊鹏，出生了。</p><h3 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h3><p>  陈俊鹏出生在富贵人家，每天从两万平米的床上醒来，由四万个女仆照顾他的生活起居，吃的是天山万年雪莲，喝的是珠穆朗玛峰上的万年寒冰化成的水，他的颜值自然越来越高。到5岁时，就已经帅得天怒人怨。在18岁时，更是超过了当时的世界第一美男子————蔡徐鲲。每一个见到他的人，都被他那帅气的脸庞直接帅晕了过去。自此，世界各国都被这样一个帅气的人给惊动了。</p><h3 id="创立新的SI单位"><a href="#创立新的SI单位" class="headerlink" title="创立新的SI单位"></a>创立新的SI单位</h3><p>  “帅”是一个抽象的概念，人们一直没法量化。直到陈俊鹏为世界所知，科学家们一致认为，可以用陈俊鹏作为单位，来量化“帅”这个概念，而恰好“俊”又是“帅”的意思，不得不说，陈俊鹏真实造物者赐给科学界的无上宝物。于是，继长度（米）、质量（千克）、时间（秒）、电流（安培）、热力学温度（开尔文）、物质的量（摩尔）和发光强度（坎德拉）之后，新的SI单位————颜值高度（陈俊鹏）诞生了。</p><hr><h2 id="简述“陈俊鹏”"><a href="#简述“陈俊鹏”" class="headerlink" title="简述“陈俊鹏”"></a>简述“陈俊鹏”</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>  1陈俊鹏被定义为在常温常压下，能见度一般（10到20公里）的情况下，能够使至少一个身体健康的（无特殊疾病）人因为你的颜值而激动至昏迷的颜值。简称俊，写作cjp。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>  由于陈俊鹏是很大的单位，除了陈俊鹏本人以外没人能够达到，于是我们常常使用微陈俊鹏（μcjp），纳陈俊鹏（ncjp），皮陈俊鹏（pcjp）来表示颜值，一个正常人的颜值大约为5pcjp，能达到μcjp的人，就已经算帅得惊天地泣鬼神了。（注：蔡徐鲲的颜值为5μcjp）</p><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>最后附上几张陈俊鹏的帅照（请读者克制住自己犯罪的欲望）</p><p><img src="https://i.loli.net/2019/07/24/5d3806bbb10ed78098.jpg" alt="1"><img src="https://i.loli.net/2019/07/24/5d3806d0a2b6022473.jpg" alt="2"><img src="https://i.loli.net/2019/07/24/5d3806d0bd97d86393.jpg" alt="3"><img src="https://i.loli.net/2019/07/24/5d3806d0d0a2e47987.jpg" alt="4"><img src="https://i.loli.net/2019/07/24/5d3806d0e034d71967.jpg" alt="5"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么是“陈俊鹏”？&quot;&gt;&lt;a href=&quot;#为什么是“陈俊鹏”？&quot; class=&quot;headerlink&quot; title=&quot;为什么是“陈俊鹏”？&quot;&gt;&lt;/a&gt;为什么是“陈俊鹏”？&lt;/h2&gt;&lt;p&gt;事情还得从2000年2月31日一个婴儿的出生说起……&lt;/p&gt;
&lt;h3 id=
      
    
    </summary>
    
      <category term="CJP" scheme="http://yoursite.com/categories/CJP/"/>
    
    
      <category term="-SI -陈俊鹏" scheme="http://yoursite.com/tags/SI-%E9%99%88%E4%BF%8A%E9%B9%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/hello-world/"/>
    <id>http://yoursite.com/hello-world/</id>
    <published>2019-07-22T08:19:45.264Z</published>
    <updated>2019-07-24T06:35:55.948Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="1" scheme="http://yoursite.com/categories/1/"/>
    
    
  </entry>
  
</feed>
