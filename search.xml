<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb_Vue框架学习</title>
      <link href="/JavaWeb-Vue%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/JavaWeb-Vue%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="指令学习"><a href="#指令学习" class="headerlink" title="指令学习"></a>指令学习</h2><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ul><li>使用 v-cloak 能够解决 插值表达式闪烁问题</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-cloak<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="javascript">                msg:<span class="string">'123'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><ul><li><p>以下代码与效果相同，都是显示msg的值</p></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>v-text与插值表达式的区别</p><ol><li>默认v-text没有闪烁问题</li><li>插值表达式只会替换自己的占位符，v-text会覆盖元素中原本的内容</li></ol></li></ul><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ul><li><p>v-text以及插值表达式会把内容以纯文本形式输出，v-html则可以将内容以html形式输出</p></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><ul><li>用于在属性中绑定Vue中定义的值</li><li>缩写：“ : ”</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-bind<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-bind:title</span>=<span class="string">"mytitle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">:title</span>=<span class="string">"mytitle"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--title的值会直接显示为mytitle--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">title</span>=<span class="string">"mytitle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            mytitle:<span class="string">"自定义title"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><ul><li>与v-bind用法类似，不过适用于绑定事件</li><li>缩写：@</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>v-on<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> <span class="attr">v-on:click</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">            <span class="comment">//用于定义方法的属性</span></span></span><br><span class="line"><span class="javascript">            methods: &#123; <span class="comment">//定义show方法</span></span></span><br><span class="line"><span class="javascript">                show:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">"hello"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><ol><li><p>迭代数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, i) in list"</span>&gt;</span>索引值---&#123;&#123; i &#125;&#125; 每一项---&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"user in emp_list"</span>&gt;</span>&#123;&#123; user.id &#125;&#125;---&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>迭代对象中的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(val, key, i)"</span>&gt;</span>值:&#123;&#123; val &#125;&#125;---键:&#123;&#123; key &#125;&#125;---索引:&#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>迭代数字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- i的值从1开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"i in 10"</span>&gt;</span>这是第&#123;&#123; i &#125;&#125;个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>注意</strong>：在2.2.0以后版本后，在组件中使用v-for指令，key时必须的</p><ul><li>key属性只能使用number或者string</li><li>需要使用v-bind来绑定key的值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- flag为data中的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span>这是用v-if控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-show</span>=<span class="string">"flag"</span>&gt;</span>这是用v-show控制的元素<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>区别：<ul><li><strong>v-if</strong>：每次都会重新删除或创建元素，有较高的切换性能消耗；<strong>如果元素涉及到频繁的切换，最好不要使用v-if</strong></li><li><strong>v-show</strong>：每次不会重新进行DOM的删除和创建操作，只是切换了元素的display:none样式，有较高的初始渲染消耗；<strong>如果元素可能永远也不会被显示出来被用户看到，则最好选择v-if而不是v-show</strong></li></ul></li></ul><h3 id="例子：跑马灯效果制作"><a href="#例子：跑马灯效果制作" class="headerlink" title="例子：跑马灯效果制作"></a>例子：跑马灯效果制作</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跑马灯<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"开始"</span> @<span class="attr">click</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"停止"</span> @<span class="attr">click</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                msg: <span class="string">"跑马灯效果展示"</span>,</span></span><br><span class="line"><span class="javascript">                intervalId:<span class="literal">null</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//开始跑马灯效果</span></span></span><br><span class="line">                /*</span><br><span class="line">                    1. 拿到msg字符串，调用字符串的substring来进行字符串的截取操作，</span><br><span class="line">                    把第一个字符截取出来，放到最后一个位置</span><br><span class="line">                    2. 自动截取需要一个计时器</span><br><span class="line">                */</span><br><span class="line">                start()&#123;</span><br><span class="line"><span class="javascript">                    <span class="comment">//解决this的指向问题</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(<span class="keyword">this</span>.intervalId == <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.intervalId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//需要this来访问data上的数据</span></span></span><br><span class="line"><span class="javascript">                            <span class="comment">//获取到头的第一个字符</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> start = _this.msg.substring(<span class="number">0</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//获取到后面的所有字符</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">var</span> end = _this.msg.substring(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//重新拼接</span></span></span><br><span class="line">                            _this.msg = end + start;</span><br><span class="line">                        &#125;, 400);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                stop()&#123;</span><br><span class="line"><span class="javascript">                    clearInterval(<span class="keyword">this</span>.intervalId);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.intervalId = <span class="literal">null</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>事件修饰符<ul><li>.stop：阻止冒泡（组织子元素事件触发父元素事件）</li><li>.prevent：阻止默认事件(如阻止a标签的默认(跳转)事件)</li><li>.capture：添加事件侦听器使用事件捕获模式(从外到里执行执行事件)</li><li>.self：只当事件在该元素本身(比如不是子元素)触发时触发回调<ul><li>.self只会阻止自己身上冒泡行为的发生，并不会阻止真正的冒泡行为</li></ul></li><li>.once：事件只触发一次</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"按钮"</span> @<span class="attr">click.stop</span>=<span class="string">"btnHandler"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model和双向数据绑定"><a href="#v-model和双向数据绑定" class="headerlink" title="v-model和双向数据绑定"></a>v-model和双向数据绑定</h3><ul><li><p>对比：v-bind只能实现数据单向绑定，从M自动绑定到V</p></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                msg: <span class="string">"展示"</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在网页内改变文本框的值，&lt;h4&gt;标签内的值相应改变</p></li><li><p>即实现了表单元素 和 Model中数据的双向绑定</p></li></ul><h4 id="简易计算器"><a href="#简易计算器" class="headerlink" title="简易计算器"></a>简易计算器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"operator"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"+"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"-"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"*"</span>&gt;</span>*<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"n2"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>=<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"cal"</span> <span class="attr">value</span>=<span class="string">"计算"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">"#app"</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                n1:0,</span><br><span class="line">                n2:0,</span><br><span class="line">                result:0,</span><br><span class="line"><span class="javascript">                operator:<span class="string">'+'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                cal() &#123;</span><br><span class="line">                    /*switch (this.operator) &#123;</span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">'+'</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) + <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2)</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">'-'</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) - <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2)</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">'*'</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) * <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2)</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">'/'</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.result = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n1) / <span class="built_in">parseInt</span>(<span class="keyword">this</span>.n2)</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;*<span class="regexp">/</span></span></span><br><span class="line">                    </span><br><span class="line"><span class="javascript">                    <span class="comment">//投机取巧的方式</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> calculate = <span class="string">"parseInt(this.n1)"</span> + <span class="keyword">this</span>.operator + <span class="string">"parseInt(this.n2)"</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.result = <span class="built_in">eval</span>(calculate);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ul><li><p>使用<strong>class</strong>样式</p><ol><li><p>数组</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['thin', 'italic']"</span>&gt;</span>数组<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>三元表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- isactive为data中定义的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red', 'thin', isactive?'active':'']"</span>&gt;</span>三元表达式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>数组中嵌套对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"['red', 'thin', &#123;'active':isactive&#125;]"</span>&gt;</span>数组中嵌套对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>直接使用对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">"&#123;red:true, italic:true, active:true, thin:true&#125;"</span>&gt;</span>直接使用对象<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>注意</strong>：以上定义的类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>:red;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.thin</span>&#123;</span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.italic</span>&#123;</span><br><span class="line">            <span class="attribute">font-style</span>: italic;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.active</span>&#123;</span><br><span class="line">            <span class="attribute">letter-spacing</span>: <span class="number">0.5em</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<strong>内联</strong>样式：</p><ol><li><p>直接在元素上通过:style的形式，书写样式对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"&#123;color:'red', 'font-size':200&#125;"</span>&gt;</span>用于展示的h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将样式对象，定义到data中，并直接引用到:style中</p><ul><li><p>在data上定义样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">                h1StyleObj:&#123;</span><br><span class="line">                    color:<span class="string">'red'</span>,</span><br><span class="line">                    <span class="string">'font-size'</span>:<span class="string">'40px'</span>,</span><br><span class="line">                    <span class="string">'font-weight'</span>:<span class="number">200</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure></li><li><p>将样式对象应用到元素中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"h1StyleObj"</span>&gt;</span>用于展示的h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在:style中通过数组，引用多个data上的样式对象</p><ul><li><p>在data上定义样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">                h1StyleObj1:&#123;</span><br><span class="line">                    color:<span class="string">'red'</span>,</span><br><span class="line">                    <span class="string">'font-size'</span>:<span class="string">'40px'</span>,</span><br><span class="line">                    <span class="string">'font-weight'</span>:<span class="number">200</span></span><br><span class="line">                &#125;,</span><br><span class="line">                h1StyleObj2:&#123;</span><br><span class="line">                    fontStyle:<span class="string">'italic'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure></li><li><p>将样式对象应用到元素中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">"[h1StyleObj1, h1StyleObj2]"</span>&gt;</span>用于展示的h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX&amp;JSON</title>
      <link href="/JavaWeb-AJAX&amp;JSON/"/>
      <url>/JavaWeb-AJAX&amp;JSON/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ol><li><p>概念：ASynchronous JavaScript and XML     异步的JavaScript 和 XML</p><blockquote><p>AJAX是一种无需刷新整个页面而更新部分页面的技术</p></blockquote><ol><li>异步和同步：客户端和服务器端相互通信的基础上</li></ol></li></ol><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/1.%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5.bmp" alt></p><ol start="2"><li><p>实现方式：</p><ol><li><p>原生的JS实现方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">&#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">// code for IE6, IE5</span></span><br><span class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.建立连接</span></span><br><span class="line"><span class="comment">/*参数：</span></span><br><span class="line"><span class="comment">1.请求方式</span></span><br><span class="line"><span class="comment">get方式，请求参数在URL后面拼接，send方法为空参</span></span><br><span class="line"><span class="comment">post方式，请求参数在send方法中定义</span></span><br><span class="line"><span class="comment">2.请求URL路径</span></span><br><span class="line"><span class="comment">3.同步或异步请求</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>, <span class="string">"test1.txt"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.发送请求</span></span><br><span class="line">xmlhttp.send();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.接收并处理来自服务器的响应结果</span></span><br><span class="line"><span class="comment">//获取方式：xmlhttp.responseText</span></span><br><span class="line"><span class="comment">//当服务器响应成功后获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当xmlhttp对象的就绪状态改变时，出发时间onreadystatechange</span></span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.statu==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取服务器的相应结果</span></span><br><span class="line">        xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>JQuery实现方式</p><ol><li><p>$.ajax()</p><ul><li><p>语法：$.ajax({键值对});</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>  <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//使用$.ajax()发送异步请求</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">"ajaxServlet"</span>,</span><br><span class="line">            type:<span class="string">"post"</span>,</span><br><span class="line">            <span class="comment">//data:"username=jack",//请求参数</span></span><br><span class="line">            data:&#123;<span class="string">"username"</span>:<span class="string">"jack"</span>&#125;,</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;,<span class="comment">//响应成功后的回掉函数</span></span><br><span class="line">            error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//出错时执行的函数</span></span><br><span class="line">            &#125;,</span><br><span class="line">            dataType:<span class="string">"text"</span><span class="comment">//设置接收到响应数据的格式</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><pre><code>2. $.get()：发送get请求   * 语法：$.get(url, [data], [callback], [type])     * 参数：       * url：请求路径       * data：请求参数       * callback：回调函数       * type：响应结果的类型3. $.post()：发送post请求   * 语法：$.post(url, [data], [callback], [type])     - 参数：       - url：请求路径       - data：请求参数       - callback：回调函数       - type：响应结果的类型</code></pre><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ol><li><p>概念：JavaScript Object Notation JavaScript对象表示法</p><blockquote><p>JSON现在多用于存储和交换文本信息，进行数据的传输</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>, <span class="string">"age"</span>:<span class="number">23</span>, <span class="string">"gender"</span>:<span class="string">"男"</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>JSON比XML更小、更快、更容易解析</p></li></ol><ol start="3"><li><p>语法：</p><ol><li><p>基本规则</p><ul><li>数据在名称/值对中：json数据是由<strong>键值对</strong>构成的<ul><li>键用引号引起来（单双都可），也可以不使用引号</li><li><strong>取值类型</strong><ol><li>数字（整数或浮点数）</li><li>字符串（双引号中）</li><li>逻辑值（true或false）</li><li>数组（方括号中）</li><li>对象（花括号中）{“address”:{“province”:”..” …….}}</li><li>null</li></ol></li></ul></li><li>数据由<strong>逗号</strong>分隔：多个键值对由逗号分隔</li><li><strong>花括号</strong>保存对象：使用{ }定义json格式</li><li><strong>方括号</strong>保存数组：[]</li></ul></li><li><p>获取数据</p><ol><li>json对象.键名</li><li>json对象[“键名”]</li><li>数组对象[索引]</li></ol></li><li><p>遍历：</p><ol><li><p>for in循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> json对象)&#123;</span><br><span class="line">    <span class="comment">//key可以获取键名</span></span><br><span class="line">    <span class="comment">//获取键值只能使用方法2，因为key是一个字符串</span></span><br><span class="line">    person[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="JSON数据和Java对象之间的转换"><a href="#JSON数据和Java对象之间的转换" class="headerlink" title="JSON数据和Java对象之间的转换"></a>JSON数据和Java对象之间的转换</h3><ul><li>JSON解析器<ul><li>常见：Jsonlib，Gson，fastjson，jackson</li></ul></li></ul><ol><li><p>JSON转为Java对象</p><ol><li>步骤<ol><li>导入Jackson的jar包</li><li>创建Jackson核心对象  ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换<ol><li>readValue(json数据, Class)</li></ol></li></ol></li></ol></li><li><p>Java对象转为JSON</p><ol><li>步骤：<ol><li>导入Jackson的jar包</li><li>创建Jackson核心对象  ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Java对象转为JSON字符串</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"张三"</span>);</span><br><span class="line">        p.setAge(<span class="number">23</span>);</span><br><span class="line">        p.setGender(<span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Jackson的核心对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//3. 转换</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            转换方法</span></span><br><span class="line"><span class="comment">                writeValue(参数1, obj)</span></span><br><span class="line"><span class="comment">                    参数1：</span></span><br><span class="line"><span class="comment">                        File：将obj对象转换位JSON字符串，并保存到指定文件中</span></span><br><span class="line"><span class="comment">                        Writer：将obj对象转换位JSON字符串，并填充到字符输出流中</span></span><br><span class="line"><span class="comment">                        OutputStream：将obj对象转换位JSON字符串，并填充到字符输出流中</span></span><br><span class="line"><span class="comment">                writeValueAsString(obj)：将对象转为json字符串</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String json = mapper.writeValueAsString(p);</span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>注解：<ol><li>@JsonIgnore：排除属性</li><li>@JsonFormat：属性值的格式化</li></ol></li><li>复杂的java对象转换<ol><li>LIst集合：数组</li><li>Map集合：对象格式一致</li></ol></li></ol></li></ol><p><strong>注意</strong>：服务器响应的数据，在客户使用时，要想当作json格式使用</p><ol><li><p>$.get(type)：将最后一个参数指定为”json”</p></li><li><p>在服务器端设置MIME类型：</p><p>response.setContentType(“application/json;charset=utf-8”)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb_JQuery入门</title>
      <link href="/JavaWeb-JQuery%E5%85%A5%E9%97%A8/"/>
      <url>/JavaWeb-JQuery%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li><p>概念：一个JavaScript框架，简化JS开发</p><blockquote><p>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（<em>或JavaScript框架</em>）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</p></blockquote></li><li><p>步骤：</p><ol><li>下载JQuery<ol><li>jquery-xxx.js域jquery-xxx.min.js的区别<ol><li>jquery-xxx.js：用于阅读源码</li><li>jquery-xxx.min.js：用于开发中使用</li></ol></li></ol></li><li>在项目中导入JQuery的js文件</li><li>使用</li></ol></li></ol><ol start="3"><li>JQuery对象和JS对象的区别与转换<ol><li>JQuery对象在操作时，更加方便</li><li>JQuery对象和js对象方法不通用</li><li>相互转换<ul><li>jq → js：jq对象[索引] 或者 jq对象.get(索引)</li><li>js → jq：$(js对象)</li></ul></li></ol></li></ol><ol start="4"><li><p>选择器：筛选具有相似特征的元素(标签)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="number">1.</span> 基本操作学习：</span><br><span class="line"><span class="number">1.</span> 事件绑定</span><br><span class="line"><span class="comment">//1.获取b1按钮</span></span><br><span class="line">           $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               alert(<span class="string">"abc"</span>);</span><br><span class="line">           &#125;);</span><br><span class="line"><span class="number">2.</span> 入口函数</span><br><span class="line"> $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           </span><br><span class="line">   &#125;);</span><br><span class="line"> <span class="built_in">window</span>.onload  和 $(<span class="function"><span class="keyword">function</span>) 区别</span></span><br><span class="line"><span class="function">                * <span class="title">window</span>.<span class="title">onload</span> 只能定义一次,如果定义多次，后边的会将前边的覆盖掉</span></span><br><span class="line"><span class="function">                * <span class="title">$</span>(<span class="params">function</span>)可以定义多次的。</span></span><br><span class="line"><span class="function">3. 样式控制：<span class="title">css</span>方法</span></span><br><span class="line"><span class="function"> // <span class="title">$</span>(<span class="params"><span class="string">"#div1"</span></span>).<span class="title">css</span>(<span class="params"><span class="string">"background-color"</span>,<span class="string">"red"</span></span>);</span></span><br><span class="line"><span class="function">     <span class="title">$</span>(<span class="params"><span class="string">"#div1"</span></span>).<span class="title">css</span>(<span class="params"><span class="string">"backgroundColor"</span>,<span class="string">"pink"</span></span>);</span></span><br><span class="line"><span class="function">   </span></span><br><span class="line"><span class="function">2. 分类</span></span><br><span class="line"><span class="function">1. 基本选择器</span></span><br><span class="line"><span class="function">1. 标签选择器（元素选择器）</span></span><br><span class="line"><span class="function">* 语法： <span class="title">$</span>(<span class="params"><span class="string">"html标签名"</span></span>) 获得所有匹配标签名称的元素</span></span><br><span class="line"><span class="function">2. <span class="title">id</span>选择器 </span></span><br><span class="line"><span class="function">* 语法： <span class="title">$</span>(<span class="params"><span class="string">"#id的属性值"</span></span>) 获得与指定<span class="title">id</span>属性值匹配的元素</span></span><br><span class="line"><span class="function">3. 类选择器</span></span><br><span class="line"><span class="function">* 语法： <span class="title">$</span>(<span class="params"><span class="string">".class的属性值"</span></span>) 获得与指定的<span class="title">class</span>属性值匹配的元素</span></span><br><span class="line"><span class="function">4. 并集选择器：</span></span><br><span class="line"><span class="function">* 语法： <span class="title">$</span>(<span class="params"><span class="string">"选择器1,选择器2...."</span></span>) 获取多个选择器选中的所有元素</span></span><br><span class="line"><span class="function">2. 层级选择器</span></span><br><span class="line"><span class="function">1. 后代选择器</span></span><br><span class="line"><span class="function">* 语法： <span class="title">$</span>(<span class="params"><span class="string">"A B "</span></span>) 选择<span class="title">A</span>元素内部的所有<span class="title">B</span>元素</span></span><br><span class="line"><span class="function">2. 子选择器</span></span><br><span class="line"><span class="function">* 语法： <span class="title">$</span>(<span class="params"><span class="string">"A &gt; B"</span></span>) 选择<span class="title">A</span>元素内部的所有<span class="title">B</span>子元素</span></span><br><span class="line"><span class="function">3. 属性选择器</span></span><br><span class="line"><span class="function">1. 属性名称选择器 </span></span><br><span class="line"><span class="function">* 语法： <span class="title">$</span>(<span class="params"><span class="string">"A[属性名]"</span></span>) 包含指定属性的选择器</span></span><br><span class="line"><span class="function">2. 属性选择器</span></span><br><span class="line"><span class="function">* 语法： <span class="title">$</span>(<span class="params"><span class="string">"A[属性名='值']"</span></span>) 包含指定属性等于指定值的选择器</span></span><br><span class="line"><span class="function">3. 复合属性选择器</span></span><br><span class="line"><span class="function">* 语法： <span class="title">$</span>(<span class="params"><span class="string">"A[属性名='值'][]..."</span></span>) 包含多个属性条件的选择器</span></span><br><span class="line"><span class="function">4. 过滤选择器</span></span><br><span class="line"><span class="function">1. 首元素选择器 </span></span><br><span class="line"><span class="function">* 语法： :<span class="title">first</span> 获得选择的元素中的第一个元素</span></span><br><span class="line"><span class="function">2. 尾元素选择器 </span></span><br><span class="line"><span class="function">* 语法： :<span class="title">last</span> 获得选择的元素中的最后一个元素</span></span><br><span class="line"><span class="function">3. 非元素选择器</span></span><br><span class="line"><span class="function">* 语法： :<span class="title">not</span>(<span class="params">selector</span>) 不包括指定内容的元素</span></span><br><span class="line"><span class="function">4. 偶数选择器</span></span><br><span class="line"><span class="function">* 语法： :<span class="title">even</span> 偶数，从 0 开始计数</span></span><br><span class="line"><span class="function">5. 奇数选择器</span></span><br><span class="line"><span class="function">* 语法： :<span class="title">odd</span> 奇数，从 0 开始计数</span></span><br><span class="line"><span class="function">6. 等于索引选择器</span></span><br><span class="line"><span class="function">* 语法： :<span class="title">eq</span>(<span class="params">index</span>) 指定索引元素</span></span><br><span class="line"><span class="function">7. 大于索引选择器 </span></span><br><span class="line"><span class="function">* 语法： :<span class="title">gt</span>(<span class="params">index</span>) 大于指定索引元素</span></span><br><span class="line"><span class="function">8. 小于索引选择器 </span></span><br><span class="line"><span class="function">* 语法： :<span class="title">lt</span>(<span class="params">index</span>) 小于指定索引元素</span></span><br><span class="line"><span class="function">9. 标题选择器</span></span><br><span class="line"><span class="function">* 语法： :<span class="title">header</span> 获得标题（<span class="title">h1</span>~<span class="title">h6</span>）元素，固定写法</span></span><br><span class="line"><span class="function">5. 表单过滤选择器</span></span><br><span class="line"><span class="function">1. 可用元素选择器 </span></span><br><span class="line"><span class="function">* 语法： :<span class="title">enabled</span> 获得可用元素</span></span><br><span class="line"><span class="function">2. 不可用元素选择器 </span></span><br><span class="line"><span class="function">* 语法： :<span class="title">disabled</span> 获得不可用元素</span></span><br><span class="line"><span class="function">3. 选中选择器 </span></span><br><span class="line"><span class="function">* 语法： :<span class="title">checked</span> 获得单选/复选框选中的元素</span></span><br><span class="line"><span class="function">4. 选中选择器 </span></span><br><span class="line"><span class="function">* 语法： :<span class="title">selected</span> 获得下拉框选中的元素</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web案例_用户信息展示</title>
      <link href="/JavaWeb%E6%A1%88%E4%BE%8B-%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%B1%95%E7%A4%BA/"/>
      <url>/JavaWeb%E6%A1%88%E4%BE%8B-%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><ol><li><p>需求：用户信息的增删改查操作</p></li><li><p>设计：</p><ol><li><p>技术：Servlet + JSP + MySQL + JDBCTemplate + Druid + BeanUtils + Tomcat</p></li><li><p>数据库设计：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> user_information; <span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">use</span> user_information;      <span class="comment">-- 使用数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,  <span class="comment">-- 用户编号</span></span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>,<span class="comment">-- 用户名</span></span><br><span class="line">gender <span class="built_in">varchar</span>(<span class="number">5</span>),<span class="comment">-- 用户性别</span></span><br><span class="line">age <span class="built_in">int</span>,<span class="comment">-- 用户年龄</span></span><br><span class="line">address <span class="built_in">varchar</span>(<span class="number">64</span>),<span class="comment">-- 用户住址</span></span><br><span class="line">QQnumber <span class="built_in">varchar</span>(<span class="number">32</span>),<span class="comment">-- 用户QQ号码</span></span><br><span class="line">email <span class="built_in">varchar</span>(<span class="number">64</span>)<span class="comment">-- 用户邮箱</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>开发：</p><ol><li>环境搭建<ol><li>创建数据库环境</li><li>创建项目，导入需要的jar包</li></ol></li><li><strong>编码</strong></li></ol></li><li><p>测试</p></li><li><p>部署运维</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter和Listener</title>
      <link href="/JavaWeb-Filter&amp;Listener/"/>
      <url>/JavaWeb-Filter&amp;Listener/</url>
      
        <content type="html"><![CDATA[<h2 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h2><ul><li><p>概念</p><ul><li>Web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能</li><li>过滤器的作用：<ul><li>一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤…</li></ul></li></ul></li><li><p>步骤：</p><ol><li>定义一个类，实现接口Filter</li><li>复写方法</li><li>配置拦截路径<ol><li>web.xml</li><li>注解</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.wnghilin.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter; <span class="comment">//注意导入的是Servlet包的Filter</span></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)<span class="comment">//访问所有资源之前都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"FilterDemo1......"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>细节：</p><ol><li><p>web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>top.wnghilin.web.filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul><pre><code>2. 过滤器执行流程   1. 执行过滤器   2. 执行放行后的资源   3. 回来执行过滤器放行代码下面的代码3. 过滤器的生命周期方法   1. init：在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源   2. doFilter：每一次请求被拦截资源时，会执行。执行多次   3. destroy：在服务器关闭后，Filter对象被销毁。如果服务器时正常关闭，则会执行destroy方法。只执行一次，用于释放资源4. 过滤器配置：   * 拦截路径配置     1. 具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行     2. 拦截目录：/user/*    访问/user下的所有资源时，过滤器都会被执行     3. 后缀名拦截：*.jsp     访问所有后缀名为jsp资源时，过滤器都会被执行     4. 拦截所有资源：/*    访问所有资源时，过滤器都会被执行   * 拦截方式配置：资源被访问的方式     1. 注解配置        * 设置：dispacherTypes属性          * **REQUEST**：默认值。浏览器直接请求资源时，才会被执行          * **FORWARD**：转发访问资源时，才会被执行          * INCLUDE：包含访问资源          * ERROR：错误跳转资源          * ASYNC：异步访问资源          * **注意**：用{ }包含可以使用多个值     2. web.xml配置        * 设置&amp;lt;dispacher&gt;&amp;lt;/dispacher&gt;5. 过滤器链(配置多个过滤器)   * 执行顺序：如果有两个过滤器：过滤器1和过滤器2     1. 过滤器1     2. 过滤器2     3. 资源执行     4. 过滤器2     5. 过滤器1   * 过滤器先后顺序问题     1. 注解配置：按照类名的字符串比较规则，值小的先执行        * 如：AFilter和BFilter，AFilter先执行     2. web.xml配置：&amp;lt;filter-mapping&gt;谁定义在上面，谁先执行</code></pre><h3 id="增强对象的功能"><a href="#增强对象的功能" class="headerlink" title="增强对象的功能"></a>增强对象的功能</h3><ol><li><p>设计模式：一些通用的解决固定问题的方式</p><ol><li><p>装饰模式</p></li><li><p>代理模式</p><ol><li><p>概念：</p><ol><li>真实对象：被代理的对象</li><li>代理对象：</li><li>代理模式：代理对象代理真是对象，达到增强真实对象功能的目的</li></ol></li><li><p>实现方式：</p><ol><li><p>静态代理：有一个类文件描述代理模式</p></li><li><p>动态代理：在内存中形成代理类</p><ul><li><p>实现步骤</p><ol><li>代理对象和真实对象实现相同的接口</li><li>代理对象 = Proxy.newProxyInstance()</li><li>使用代理对象调用方法</li><li>增强方法<ol><li>增强参数列表</li><li>增强返回值类型</li><li>增强方法体执行逻辑</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建真实对象</span></span><br><span class="line">        Lenovo lenovo = <span class="keyword">new</span> Lenovo();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.动态代理增强lenovo对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            三个参数：</span></span><br><span class="line"><span class="comment">                1. 类加载器：真实对象.getClass().getClassLoader()</span></span><br><span class="line"><span class="comment">                2. 接口数组：真实对象.getClass().getInterfaces()</span></span><br><span class="line"><span class="comment">                3. 处理器：new InvocationHandler()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        SaleComputer proxy_lenovo = (SaleComputer) Proxy.newProxyInstance(lenovo.getClass().getClassLoader(), lenovo.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                代理逻辑编写的方法：代理对象调用的所有方法都会触发该方法执行</span></span><br><span class="line"><span class="comment">                    参数：</span></span><br><span class="line"><span class="comment">                        1. proxy:代理对象</span></span><br><span class="line"><span class="comment">                        2. method：代理对象调用的方法，被封装为的对象</span></span><br><span class="line"><span class="comment">                        3. args:代理对象调用的方法时，传递的实际参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">/*System.out.println("该方法执行了....");</span></span><br><span class="line"><span class="comment">                System.out.println(method.getName());</span></span><br><span class="line"><span class="comment">                System.out.println(args[0]);</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">                <span class="comment">//判断是否是sale方法</span></span><br><span class="line">                <span class="keyword">if</span>(method.getName().equals(<span class="string">"sale"</span>))&#123;</span><br><span class="line">                    <span class="comment">//1.增强参数</span></span><br><span class="line">                    <span class="keyword">double</span> money = (<span class="keyword">double</span>) args[<span class="number">0</span>];</span><br><span class="line">                    money = money * <span class="number">0.85</span>;</span><br><span class="line">                    System.out.println(<span class="string">"专车接你...."</span>);</span><br><span class="line">                    <span class="comment">//使用真实对象调用该方法</span></span><br><span class="line">                    String obj = (String) method.invoke(lenovo, money);</span><br><span class="line">                    System.out.println(<span class="string">"免费送货..."</span>);</span><br><span class="line">                    <span class="comment">//2.增强返回值</span></span><br><span class="line">                    <span class="keyword">return</span> obj+<span class="string">"_鼠标垫"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    Object obj = method.invoke(lenovo, args);</span><br><span class="line">                    <span class="keyword">return</span> obj;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.调用方法</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* String computer = proxy_lenovo.sale(8000);</span></span><br><span class="line"><span class="comment">        System.out.println(computer);*/</span></span><br><span class="line"></span><br><span class="line">        proxy_lenovo.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol></li></ol></li></ol><h2 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h2><ul><li><p>概念：web的三大组建之一</p><ul><li>事件监听机制：<ul><li>事件：一件事情</li><li>事件源：事件发生的地方</li><li>监听器：一个对象</li><li>注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码</li></ul></li></ul></li><li><p>ServletContexListener：</p><ul><li><p>方法</p><ul><li>void contextDestroyed(ServletContextEvent sce)</li><li>void contextInitialized(ServletContextEvent sce)</li></ul></li><li><p>步骤：</p><ul><li><p>定义一个类，实现ServletContextListener接口</p></li><li><p>复写方法</p></li><li><p>配置</p><ol><li><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      配置监听器</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>top.wnghilin.web.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定初始化参数 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li></ul><pre><code>2. 注解：@WebListener<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听ServletContext对象创建的。ServletContext对象服务器启动后自动创建。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 在服务器启动后自动调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContextEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加载资源文件</span></span><br><span class="line">        <span class="comment">//1.获取ServletContext对象</span></span><br><span class="line">        ServletContext servletContext = servletContextEvent.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加载资源文件</span></span><br><span class="line">        String contextConfigLocation = servletContext.getInitParameter(<span class="string">"contextConfigLocation"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取真实路径</span></span><br><span class="line">        String realPath = servletContext.getRealPath(contextConfigLocation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.加载进内存</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">            System.out.println(fis);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext对象被创建了。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在服务器关闭后，ServletContext对象被销毁。当服务器正常关闭后该方法被调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContextEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext对象被销毁了。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSP——Java服务器端页面</title>
      <link href="/JavaWebeb-JSP/"/>
      <url>/JavaWebeb-JSP/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li><p>概念：</p><ul><li>Java Server Pages：java服务器端页面<ul><li>可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</li><li>用于简化书写</li></ul></li></ul></li><li><p>原理</p><ul><li>JSP本质上就是一个Servlet</li></ul></li><li><p>JSP的脚本：JSP定义Java代码的方式</p><ol><li>&lt;%   代码 %&gt;：定义的Java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么</li><li>&lt;%!  代码 % &gt;：定义的Java代码，在jsp转换后的Java类的成员位置</li><li>&lt;%= 代码 % &gt;：定义的Java代码，会输出到页面上，输出语句可以定义什么，该脚本就可以定义什么</li></ol></li><li><p>JSP的内置对象</p><ul><li>在JSP页面中不需要获取和创建，可以直接使用的对象</li><li>JSP一共有9个内置对象</li><li>其中3个<ul><li>request</li><li>response</li><li>out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似<ul><li>response.getWriter().write和out.write()的区别<ul><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据</li><li>response.getWriter()数据输出永远再out.write之前</li></ul></li></ul></li></ul></li></ul></li></ol><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li><p>作用：用于配置JSP页面，导入资源文件</p></li><li><p>格式：</p><p>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ……&gt;</p></li><li><p>分类：</p><ol><li>page：配置JSP页面的<ul><li>contentType：等同于response.setContentType()<ol><li>设置响应体的MIME类型和字符集</li><li>设置当前jsp页面的代码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding）</li></ol></li><li>import：导包</li><li>errorPage：当前页面发生异常后，会自动跳转到制定的错误页面</li><li>isErrorPage：指定当前页面是否是异常页面<ul><li>true：可以使用内置对象exception</li><li>false：默认值，不可以使用该内置对象</li></ul></li></ul></li><li>include：页面包含的。导入页面的资源文件<ul><li>&lt;%@include file=”top.jsp” %&gt;</li></ul></li><li>taglib：导入资源<ul><li>导入标签库：&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jst1/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jst1/core&quot;</a> %&gt;<ul><li>prefix：自定义的前缀</li></ul></li></ul></li></ol></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>html注释：<br>&lt;!– – &gt;：只能注释html代码</li><li>jsp注释：推荐使用<br>&lt;%– –%&gt;：可以注释所有</li></ol><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><ul><li>在jsp页面中不需要创建，直接使用的对象</li><li>一共有9个：</li></ul><table><thead><tr><th align="center">变量名</th><th align="center">真实类型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><strong>pageContext</strong></td><td align="center">PageContext</td><td align="center">当前页面共享数据</td></tr><tr><td align="center"><strong>request</strong></td><td align="center">HttpServletRequest</td><td align="center">一次请求访问的多个资源（转发）</td></tr><tr><td align="center"><strong>session</strong></td><td align="center">HttpSession</td><td align="center">一次会话的多个请求间</td></tr><tr><td align="center"><strong>application</strong></td><td align="center">ServletContext</td><td align="center">所有用户间共享数据</td></tr><tr><td align="center"><strong>response</strong></td><td align="center">HttpServletResponse</td><td align="center">响应对象</td></tr><tr><td align="center"><strong>page</strong></td><td align="center">Object</td><td align="center">当前页面（Servlet）的对象  this</td></tr><tr><td align="center"><strong>out</strong></td><td align="center">JspWriter</td><td align="center">输出对象，数据输出到页面上</td></tr><tr><td align="center"><strong>config</strong></td><td align="center">ServletConfig</td><td align="center">Servlet的配置对象</td></tr><tr><td align="center"><strong>exception</strong></td><td align="center">Throwable</td><td align="center">异常对象</td></tr></tbody></table><hr><h2 id="MVC：开发模式"><a href="#MVC：开发模式" class="headerlink" title="MVC：开发模式"></a>MVC：开发模式</h2><ul><li>如果过度使用jsp，在jsp中既写大量Java代码，又写html，造成难以维护，难以分工协作</li></ul><ul><li><p>MVC：</p><ol><li>M：Model，模型<ul><li>完成具体业务操作，如：查询数据库，封装对象</li></ul></li><li>V：View，视图<ul><li>展示数据</li></ul></li><li>C：Controller，控制器<ul><li>获取用户的输入</li><li>调用模型</li><li>将数据交给视图展示</li></ul></li></ol><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/MVC%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F.bmp" alt></p><ul><li>优缺点：<ol><li>优点：<ol><li>耦合性低，方便维护，利于分工协作</li><li>重用性高</li></ol></li><li>缺点：<ol><li>使得项目架构变得复杂，对开发人员要求高</li></ol></li></ol></li></ul></li></ul><h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><ol><li>概念：Expression Language 表达式语言</li><li>作用：替换和简化jsp页面中Java的编写</li><li>语法：${表达式}</li><li><strong>注意</strong>：<ol><li>jsp默认是支持EL表达式的</li><li>忽略el表达式<ol><li>设置jsp的page指令中：isELIgnored=”true”，忽略当前jsp页面中所有的el表达式</li><li>${表达式}：忽略当前这个el表达式</li></ol></li></ol></li><li>使用：<ol><li>运算：<ul><li>运算符：<ol><li>算数运算符：+ - * /(div) %(mod)</li><li>比较运算符：&lt; &gt; &gt;= &lt;= != ==</li><li>逻辑运算符：&amp;&amp;(and)  ||(or)  !(not)</li><li>空运算符：empty<ul><li>功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0</li><li>${empty list}</li><li>${not empty list} 判断这些集合是否不为null并且长度大于零</li></ul></li></ol></li></ul></li><li>获取值<ol><li>el表达式只能从域对象中获取值</li><li>语法：<ol><li>${域名称.键名}：从指定域中获取指定键的值<ul><li>域名称<ol><li>pageScope → pageContext</li><li>requestScope → request</li><li>sessionScope → session</li><li>applicationScope → application(ServletContext)</li></ol></li><li>举例：在request域中存储了name=张三</li><li>获取：${requestScope.name}</li></ul></li><li>${键名}：表示一次从最小的域中查找是否有该键对应的值，知道找到为止</li></ol></li><li>获取对象、List对象、Map集合的值<ol><li>对象：${域名称.键名.属性名}<ul><li>本质上会调用对象的getter方法(<strong>可以自己定义新的getter方法，属性名就是getter方法去掉get再将后面的第一个字母变为小写</strong>)</li></ul></li><li>List集合：${域名称.键名[索引]}</li><li>Map集合：<ul><li>${域名称.键名.key名称}</li><li>${域名称.键名[“key名称”]}</li></ul></li></ol></li><li>隐式对象：<ul><li>el表达式中有11个隐式对象</li><li>pageContext：<ul><li>获取el的其它八个内置对象<ul><li>${pageContext.request.contextPath}：动态获取虚拟目录</li></ul></li></ul></li></ul></li></ol></li></ol></li></ol><h2 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h2><ol><li><p>概念：JavaServer Pages Tag Libary JSP标准标签库</p><ul><li>是由Apache组织提供的开源的免费的jsp标签</li></ul></li><li><p>作用：用于简化和替换jsp页面上的Java代码</p></li><li><p>使用步骤</p><ol><li>导入jstl相关jar包</li><li>引入标签库：taglib指令：&lt;%@ taglib %&gt;</li><li>使用标签</li></ol></li><li><p>常用JSTL标签：</p><ol><li><p>if：相当于java代码的if语句(没有else语句)</p><ol><li>属性<ul><li>test 必需属性 接受布尔表达式，如果为true，则显示标签体内容，若为false，则不显示</li><li>一般情况下，结合表达式一起使用</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">import</span>=<span class="string">"java.util.List"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JSTLDEMO<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        <span class="attr">List</span> <span class="attr">list</span> = <span class="string">new</span> <span class="attr">ArrayList</span>();</span></span><br><span class="line"><span class="tag">        <span class="attr">list.add</span>("<span class="attr">a</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">list.add</span>("<span class="attr">b</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">request.setAttribute</span>("<span class="attr">list</span>", <span class="attr">list</span>);</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;not empty list&#125;"</span>&gt;</span>遍历。。。<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>choose：相当于java代码的switch语句</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">request.setAttribute</span>("<span class="attr">number</span>", <span class="attr">3</span>);</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;number == 1&#125;"</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;number == 2&#125;"</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;number == 3&#125;"</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;number == 4&#125;"</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;number == 5&#125;"</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;number == 6&#125;"</span>&gt;</span>星期六<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;number == 7&#125;"</span>&gt;</span>星期天<span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span>数字输入有误<span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="3"><li><p>foreach：相当于java代码的for语句</p><ol><li><p>用来完成重复操作</p><ul><li><p>属性：</p><p>begin：开始值</p><p>end：结束值</p><p>var：临时变量</p><p>step：步长</p><p>varStatus：循环状态对象</p><p>​        index：容器中元素的索引，从0开始</p><p>​        count：循环次数，从1开始</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--输出1到10--%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">begin</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"10"</span> <span class="attr">var</span>=<span class="string">"i"</span> <span class="attr">step</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    $&#123;i&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>遍历容器</p><ul><li><p>属性</p><p>items：容器对象</p><p>var：容器中元素的临时变量</p><p>varStatus：循环装阿泰对象</p><p>​        index：容器中元素的索引，从0开始</p><p>​        count：循环次数，从1开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">    <span class="attr">List</span> <span class="attr">list</span> = <span class="string">new</span> <span class="attr">ArrayList</span>();</span></span><br><span class="line"><span class="tag">    <span class="attr">list.add</span>("<span class="attr">aaa</span>");</span></span><br><span class="line"><span class="tag">    <span class="attr">list.add</span>("<span class="attr">bbb</span>");</span></span><br><span class="line"><span class="tag">    <span class="attr">list.add</span>("<span class="attr">ccc</span>");</span></span><br><span class="line"><span class="tag">    <span class="attr">list.add</span>("<span class="attr">ddd</span>");</span></span><br><span class="line"><span class="tag">    <span class="attr">request.setAttribute</span>("<span class="attr">list</span>", <span class="attr">list</span>);</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--输出1到10--%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">begin</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"10"</span> <span class="attr">var</span>=<span class="string">"i"</span> <span class="attr">step</span>=<span class="string">"1"</span> <span class="attr">varStatus</span>=<span class="string">"s"</span>&gt;</span></span><br><span class="line">    $&#123;i&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">           </span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list&#125;"</span> <span class="attr">var</span>=<span class="string">"str"</span> <span class="attr">varStatus</span>=<span class="string">"s"</span>&gt;</span></span><br><span class="line">    $&#123;s.index&#125; $&#123;s.count&#125; $&#123;str&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h2 id="三层架构：软件设计架构"><a href="#三层架构：软件设计架构" class="headerlink" title="三层架构：软件设计架构"></a>三层架构：软件设计架构</h2><ol><li>界面层(表示层)：用户看到的界面，用户可以通过界面上的组件和服务器进行交互</li><li>业务逻辑层：处理业务逻辑。</li><li>数据访问层：操作数据存储文件</li></ol><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.bmp" alt></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话技术——Cookie&amp;Session</title>
      <link href="/JavaWeb-%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/"/>
      <url>/JavaWeb-%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><ol><li>会话：一次会话中包含多次请求和响应<ul><li>一次会话：浏览器第一次给服务器资源发送请求，会话建立，知道有一方断开为止</li></ul></li><li>功能：在一次会话的范围内的多次请求间，共享数据</li><li>方式：<ol><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ol></li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ol><li><p>概念：客户端会话技术，将数据保存到客户端的技术</p></li><li><p>使用步骤：</p><ol><li>创建Cookie对象，绑定数据<ul><li>new Cookie(String name, String Value)</li></ul></li><li>放松Cookie对象<ul><li>response.addCookie(Cookie cookie);</li></ul></li><li>获取Cookie，拿到数据<ul><li>Cookie[] request.getCookies()</li></ul></li></ol></li><li><p>实现原理</p><p>基于响应头set-cookie和请求头cookie实现</p></li><li><p>cookie的<strong>细节</strong>：</p><ol><li><p>一次可以发送<strong>多个</strong>cookie</p><ul><li>可以创建多个Cookie对象，使用多次response.addCookie来发送cookie即可</li></ul></li><li><p>cookie在浏览器中保存时间</p><ul><li>默认情况下，当浏览器关闭后，Cookie数据被清理</li><li>持久化存储：<ol><li>setMaxAge(int seconds)<ol><li>正数：将Cookie数据写到硬盘的文件中。持久化存储。seconds代表cookie存活时间</li><li>负数：默认值</li><li>零：删除Cookie信息</li></ol></li></ol></li></ul></li><li><p>cookie保存中文</p><ul><li>tomcat 8 之前，不能直接存储中文<ul><li>需要将中文数据转码 — 一般采用url编码</li></ul></li><li>tomcat 8 之后，cookie支持中文数据，对特殊字符还是不支持，建议使用url编码</li></ul></li><li><p>cookie获取范围</p><ul><li><p>默认情况下，一个tomcat服务器中部署了多个Web项目，这些项目中cookie不能共享</p><ul><li>setPath(String path)：设置Cookie的获取范围。默认情况下，设置当前的虚拟目录<ul><li>如果要共享，可以将path设置为”/“</li></ul></li></ul></li><li><p>不同的tomcat服务器间cookie的共享问题</p><ul><li><p>setDomain(String path)：如果设置<strong>一级域名</strong>相同，那么多个服务器之间cookie可以共享</p><p>如cookie.setDomain(“.baidu.com”)，则news.baidu.com和tieba.baidu.com之间的cookie可以共享</p></li></ul></li></ul></li></ol></li><li><p>cookie的<strong>特点</strong>：</p><ol><li>cookie存储在客户端浏览器</li><li>浏览器对于单个cookie的大小有限制(4kb左右)，以及对同一个域名下的总cookie数量也有限制(20个)</li></ol><ul><li>作用：<ol><li>cookie一般用于存储少量的不太敏感的数据</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ol></li></ul></li></ol><ul><li><strong>案例</strong>：记住上一次的访问时间</li><li>分析：<ol><li>可以采用Cookie完成</li><li>在服务器中的Servlet判断是否有一个名为lastTime的cookie<ol><li>有：不是第一次访问<ol><li>响应数据：欢迎回来，您上次访问时间为：显示时间字符串</li><li>写回cookie</li></ol></li><li>没有：是第一次访问<ol><li>响应数据：您好，欢迎您首次访问</li><li>写回cookie：lastTime=时间</li></ol></li></ol></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/cookieTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置响应的消息体的数据格式以及编码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取所有Cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//没有cookie为lastTime</span></span><br><span class="line">        <span class="comment">//2.遍历cookie数组</span></span><br><span class="line">        <span class="keyword">if</span>(cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//3.获取cookie的名称</span></span><br><span class="line">                String name = cookie.getName();</span><br><span class="line">                <span class="comment">//4.判断名称是否是：lastTime</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"lastTime"</span>.equals(name))&#123;</span><br><span class="line">                    <span class="comment">//有该Cookie，不是第一次访问</span></span><br><span class="line"></span><br><span class="line">                    flag = <span class="keyword">true</span>;<span class="comment">//有lastTime的cookie</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//响应数据</span></span><br><span class="line">                    <span class="comment">//获取Cookie的value，时间</span></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line">                    System.out.println(<span class="string">"解码前："</span>+value);</span><br><span class="line">                    <span class="comment">//URL解码：</span></span><br><span class="line">                    value = URLDecoder.decode(value,<span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"解码后："</span>+value);</span><br><span class="line">                    response.getWriter().write(<span class="string">"&lt;h1&gt;欢迎回来，您上次访问时间为:"</span>+value+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置Cookie的value</span></span><br><span class="line">                    <span class="comment">//获取当前时间的字符串，重新设置Cookie的值，重新发送cookie</span></span><br><span class="line">                    Date date  = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">                    String str_date = sdf.format(date);</span><br><span class="line">                    System.out.println(<span class="string">"编码前："</span>+str_date);</span><br><span class="line">                    <span class="comment">//URL编码</span></span><br><span class="line">                    str_date = URLEncoder.encode(str_date,<span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"编码后："</span>+str_date);</span><br><span class="line">                    cookie.setValue(str_date);</span><br><span class="line">                    <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);<span class="comment">//一个月</span></span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line">         </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cookies == <span class="keyword">null</span> || cookies.length == <span class="number">0</span> || flag == <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">//没有，第一次访问</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置Cookie的value</span></span><br><span class="line">            <span class="comment">//获取当前时间的字符串，重新设置Cookie的值，重新发送cookie</span></span><br><span class="line">            Date date  = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">            String str_date = sdf.format(date);</span><br><span class="line">            System.out.println(<span class="string">"编码前："</span>+str_date);</span><br><span class="line">            <span class="comment">//URL编码</span></span><br><span class="line">            str_date = URLEncoder.encode(str_date,<span class="string">"utf-8"</span>);</span><br><span class="line">            System.out.println(<span class="string">"编码后："</span>+str_date);</span><br><span class="line"></span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>,str_date);</span><br><span class="line">            <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);<span class="comment">//一个月</span></span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;您好，欢迎您首次访问&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ol><li><p>概念：服务器端会话技术，再一次会话的多次请求间共享数据，将数据保存在服务器端</p></li><li><p>入门：</p><ol><li><p>获取Session对象：</p><p>HttpSession session = request.getSession()</p></li><li><p>HttpSession对象：</p><p>Object getAttribute(String name)</p><p>void setAttribute(String name, Object value)</p><p>void removeAttribute(String name)</p></li></ol></li><li><p>原理：</p><ul><li>Session的实现是依赖于<strong>Cookie</strong>的</li></ul></li><li><p>细节：</p><ol><li>当客户端关闭后，服务器不关闭，两次获取的Session默认情况下<strong>不是</strong>同一个<ul><li>如果需要相同，则可以创建Cookie，键为<strong>JSESSIONID</strong>，值设置为<strong>session.getId()</strong>，设置最大存活时间，可以长久化存储</li></ul></li><li>客户端不关闭，服务器关闭，两次获取的Session一般<strong>不是</strong>同一个<ul><li>要确保数据不丢失<ul><li>Session的钝化：<ul><li>在服务器正常关闭之前，将Session对象系列化到硬盘上</li></ul></li><li>Session的火花：<ul><li>在服务器启动后，将Session文件转化为内存中的Session对象即可</li></ul></li></ul></li></ul></li><li>Session销毁时间<ol><li>服务器关闭</li><li>session对象调用invaliddate()</li><li>session默认失效时间  30分钟（可以在tomcat的conf/web.xml中配置session-config）</li></ol></li></ol></li><li><p><strong>特点</strong>：</p><ol><li>session用于储存一次会话的多次请求的数据，存在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ol></li></ol><ul><li>session与Cookie的区别：<ol><li>session存储数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制，Cookie有</li><li>session数据安全，Cookie相对不安全</li></ol></li></ul><h3 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h3><ol><li>需求：<ol><li>访问带有验证码的登录界面login.jsp</li><li>用户输入用户名，密码以及验证码<ul><li>如果用户名和密码输入有误，跳转登录界面，提示：用户名或密码错误</li><li>如果验证码输入有误，跳转登录页面，提示：验证码错误</li><li>如果全部输入正确，则跳转到主页success.jsp，显示：用户名，欢迎您</li></ul></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图论</title>
      <link href="/Algorithm-%E5%9B%BE%E8%AE%BA/"/>
      <url>/Algorithm-%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>​    图是一种<strong>多对多</strong>形式的数据结构，线性表（一对一）、树（一对多）都可以看作特殊形式的表。</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><p><strong>顶点</strong>(Vertex)，顶点的集合一般用<strong>V</strong>表示</p></li><li><p><strong>边</strong>(Edge)，边的集合一般用<strong>E</strong>表示</p><ul><li>( v, w ) ∈ E，v、w ∈ V，这种边表示 <strong>无向边</strong></li><li>&lt; v, w &gt; ∈ E， v、w ∈ V，这种边表示 <strong>有向边</strong></li><li>一般不考虑 <strong>重边</strong> 和 <strong>自回路</strong></li></ul></li><li><p><strong>无向图</strong>：所有边都是无向边的图</p></li><li><p><strong>有向图</strong>：所有边都是有向边的图</p></li><li><p><strong>网络</strong>：带权重的图</p></li><li><p><strong>邻接点</strong>：与一个顶点直接相连的点</p></li><li><p><strong>度</strong>：与顶点连接的边的条数，<strong>有向图</strong>中又存在 <strong>入度</strong> 和 <strong>出度</strong></p></li><li><blockquote><p><strong>连通图</strong>：在<a href="https://baike.baidu.com/item/图论/1433806" target="_blank" rel="noopener">图论</a>中，连通图基于连通的概念。在一个<a href="https://baike.baidu.com/item/无向图/1680427" target="_blank" rel="noopener">无向图</a> G 中，若从<a href="https://baike.baidu.com/item/顶点/11030118" target="_blank" rel="noopener">顶点</a>i到顶点j有路径相连（当然从j到i也一定有路径），则称i和j是连通的。如果 G 是<a href="https://baike.baidu.com/item/有向图" target="_blank" rel="noopener">有向图</a>，那么连接i和j的路径中所有的边都必须同向。如果图中任意两点都是连通的，那么图被称作连通图。如果此图是有向图，则称为<strong>强连通图</strong>（注意：需要双向都有路径）。图的<a href="https://baike.baidu.com/item/连通性/6688865" target="_blank" rel="noopener">连通性</a>是图的基本性质。</p></blockquote></li><li><p><strong>连通分量</strong>：无向图的极大连通子图</p></li></ul><hr><h2 id="图的操作"><a href="#图的操作" class="headerlink" title="图的操作"></a>图的操作</h2><h3 id="图的创建"><a href="#图的创建" class="headerlink" title="图的创建"></a>图的创建</h3><ol><li><p>邻接矩阵：</p><ol><li>邻接矩阵是一个表示顶点相邻关系的矩阵，若两个矩阵相邻，则矩阵的对应位置值为1（若边有权重，则表示权重），否则为0</li></ol><p><img src="https://gss1.bdstatic.com/-vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=77989746352ac65c73086e219a9bd974/b812c8fcc3cec3fdb11cec53d688d43f879427f1.jpg" alt="图片来自百度百科"></p><ol start="2"><li>在C语言中，可用G[ N ] [ N ]来表示邻接矩阵</li><li>邻接矩阵的对角线为0，且无向图的邻接矩阵关于对角线对称</li><li>无向图的邻接矩阵可以用长度为$N(N+1)/2$的数组表示，G<del>ij</del>在该数组中的下标为$( i*(i+1)/2 + j ) $</li><li>邻接矩阵的第 i 行的数组元素值为1的个数表示顶点i的出度，第i列的数组元素值为1表示顶点 i 的入度</li><li>优点<ul><li>简单、直观、好理解</li><li>方便检查任意一对顶点之间是否存在边</li><li>方便找一个顶点的所有邻接点</li><li>方便计算任一顶点的度</li></ul></li><li>缺点：<ul><li>存储稀疏图时，浪费空间</li><li>浪费时间（如统计稀疏图中一共有多少边）</li></ul></li></ol></li><li><p>邻接表：G[ N ]为一个指针数组，对应矩阵每行一个链表，只保存等于1的数据</p><p><img src="http://www.ahalei.com/data/attachment/forum/201404/08/091650gyll6hbqbjyxls8s.png" alt="图片来自网络"></p><ul><li>适合稀疏图使用</li></ul></li></ol><p>邻接矩阵图的创建</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 图的邻接矩阵表示法 */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxVertexNum 100    <span class="comment">/* 最大顶点数设为100 */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFINITY 65535        <span class="comment">/* ∞设为双字节无符号整数的最大值65535*/</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Vertex;         <span class="comment">/* 用顶点下标表示顶点,为整型 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> WeightType;        <span class="comment">/* 边的权值设为整型 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> DataType;        <span class="comment">/* 顶点存储的数据类型设为字符型 */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 边的定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span> *<span class="title">PtrToENode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ENode</span>&#123;</span></span><br><span class="line">    Vertex V1, V2;      <span class="comment">/* 有向边&lt;V1, V2&gt; */</span></span><br><span class="line">    WeightType Weight;  <span class="comment">/* 权重 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToENode Edge;</span><br><span class="line">        </span><br><span class="line"><span class="comment">/* 图结点的定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GNode</span> *<span class="title">PtrToGNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Nv;  <span class="comment">/* 顶点数 */</span></span><br><span class="line">    <span class="keyword">int</span> Ne;  <span class="comment">/* 边数   */</span></span><br><span class="line">    WeightType G[MaxVertexNum][MaxVertexNum]; <span class="comment">/* 邻接矩阵 */</span></span><br><span class="line">    DataType Data[MaxVertexNum];      <span class="comment">/* 存顶点的数据 */</span></span><br><span class="line">    <span class="comment">/* 注意：很多情况下，顶点无数据，此时Data[]可以不用出现 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToGNode MGraph; <span class="comment">/* 以邻接矩阵存储的图类型 */</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function">MGraph <span class="title">CreateGraph</span><span class="params">( <span class="keyword">int</span> VertexNum )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 初始化一个有VertexNum个顶点但没有边的图 */</span></span><br><span class="line">    Vertex V, W;</span><br><span class="line">    MGraph Graph;</span><br><span class="line">     </span><br><span class="line">    Graph = (MGraph)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct GNode)); <span class="comment">/* 建立图 */</span></span><br><span class="line">    Graph-&gt;Nv = VertexNum;</span><br><span class="line">    Graph-&gt;Ne = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 初始化邻接矩阵 */</span></span><br><span class="line">    <span class="comment">/* 注意：这里默认顶点编号从0开始，到(Graph-&gt;Nv - 1) */</span></span><br><span class="line">    <span class="keyword">for</span> (V=<span class="number">0</span>; V&lt;Graph-&gt;Nv; V++)</span><br><span class="line">        <span class="keyword">for</span> (W=<span class="number">0</span>; W&lt;Graph-&gt;Nv; W++)  </span><br><span class="line">            Graph-&gt;G[V][W] = INFINITY;</span><br><span class="line">             </span><br><span class="line">    <span class="keyword">return</span> Graph; </span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertEdge</span><span class="params">( MGraph Graph, Edge E )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">/* 插入边 &lt;V1, V2&gt; */</span></span><br><span class="line">     Graph-&gt;G[E-&gt;V1][E-&gt;V2] = E-&gt;Weight;    </span><br><span class="line">     <span class="comment">/* 若是无向图，还要插入边&lt;V2, V1&gt; */</span></span><br><span class="line">     Graph-&gt;G[E-&gt;V2][E-&gt;V1] = E-&gt;Weight;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">MGraph <span class="title">BuildGraph</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MGraph Graph;</span><br><span class="line">    Edge E;</span><br><span class="line">    Vertex V;</span><br><span class="line">    <span class="keyword">int</span> Nv, i;</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Nv);   <span class="comment">/* 读入顶点个数 */</span></span><br><span class="line">    Graph = CreateGraph(Nv); <span class="comment">/* 初始化有Nv个顶点但没有边的图 */</span> </span><br><span class="line">     </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;(Graph-&gt;Ne));   <span class="comment">/* 读入边数 */</span></span><br><span class="line">    <span class="keyword">if</span> ( Graph-&gt;Ne != <span class="number">0</span> ) &#123; <span class="comment">/* 如果有边 */</span> </span><br><span class="line">        E = (Edge)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ENode)); <span class="comment">/* 建立边结点 */</span> </span><br><span class="line">        <span class="comment">/* 读入边，格式为"起点 终点 权重"，插入邻接矩阵 */</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;Graph-&gt;Ne; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;E-&gt;V1, &amp;E-&gt;V2, &amp;E-&gt;Weight); </span><br><span class="line">            <span class="comment">/* 注意：如果权重不是整型，Weight的读入格式要改 */</span></span><br><span class="line">            InsertEdge( Graph, E );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 如果顶点有数据的话，读入数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (V=<span class="number">0</span>; V&lt;Graph-&gt;Nv; V++) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;(Graph-&gt;Data[V]));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> Graph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>邻接表图的创建</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 图的邻接表表示法 */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxVertexNum 100    <span class="comment">/* 最大顶点数设为100 */</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Vertex;         <span class="comment">/* 用顶点下标表示顶点,为整型 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> WeightType;        <span class="comment">/* 边的权值设为整型 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> DataType;        <span class="comment">/* 顶点存储的数据类型设为字符型 */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 边的定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ENode</span> *<span class="title">PtrToENode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ENode</span>&#123;</span></span><br><span class="line">    Vertex V1, V2;      <span class="comment">/* 有向边&lt;V1, V2&gt; */</span></span><br><span class="line">    WeightType Weight;  <span class="comment">/* 权重 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToENode Edge;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 邻接点的定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AdjVNode</span> *<span class="title">PtrToAdjVNode</span>;</span> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AdjVNode</span>&#123;</span></span><br><span class="line">    Vertex AdjV;        <span class="comment">/* 邻接点下标 */</span></span><br><span class="line">    WeightType Weight;  <span class="comment">/* 边权重 */</span></span><br><span class="line">    PtrToAdjVNode Next;    <span class="comment">/* 指向下一个邻接点的指针 */</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 顶点表头结点的定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vnode</span>&#123;</span></span><br><span class="line">    PtrToAdjVNode FirstEdge;<span class="comment">/* 边表头指针 */</span></span><br><span class="line">    DataType Data;            <span class="comment">/* 存顶点的数据 */</span></span><br><span class="line">    <span class="comment">/* 注意：很多情况下，顶点无数据，此时Data可以不用出现 */</span></span><br><span class="line">&#125; AdjList[MaxVertexNum];    <span class="comment">/* AdjList是邻接表类型 */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 图结点的定义 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GNode</span> *<span class="title">PtrToGNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GNode</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> Nv;     <span class="comment">/* 顶点数 */</span></span><br><span class="line">    <span class="keyword">int</span> Ne;     <span class="comment">/* 边数   */</span></span><br><span class="line">    AdjList G;  <span class="comment">/* 邻接表 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> PtrToGNode LGraph; <span class="comment">/* 以邻接表方式存储的图类型 */</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function">LGraph <span class="title">CreateGraph</span><span class="params">( <span class="keyword">int</span> VertexNum )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">/* 初始化一个有VertexNum个顶点但没有边的图 */</span></span><br><span class="line">    Vertex V;</span><br><span class="line">    LGraph Graph;</span><br><span class="line">     </span><br><span class="line">    Graph = (LGraph)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(struct GNode) ); <span class="comment">/* 建立图 */</span></span><br><span class="line">    Graph-&gt;Nv = VertexNum;</span><br><span class="line">    Graph-&gt;Ne = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 初始化邻接表头指针 */</span></span><br><span class="line">    <span class="comment">/* 注意：这里默认顶点编号从0开始，到(Graph-&gt;Nv - 1) */</span></span><br><span class="line">       <span class="keyword">for</span> (V=<span class="number">0</span>; V&lt;Graph-&gt;Nv; V++)</span><br><span class="line">        Graph-&gt;G[V].FirstEdge = <span class="literal">NULL</span>;</span><br><span class="line">             </span><br><span class="line">    <span class="keyword">return</span> Graph; </span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertEdge</span><span class="params">( LGraph Graph, Edge E )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToAdjVNode NewNode;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/* 插入边 &lt;V1, V2&gt; */</span></span><br><span class="line">    <span class="comment">/* 为V2建立新的邻接点 */</span></span><br><span class="line">    NewNode = (PtrToAdjVNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct AdjVNode));</span><br><span class="line">    NewNode-&gt;AdjV = E-&gt;V2;</span><br><span class="line">    NewNode-&gt;Weight = E-&gt;Weight;</span><br><span class="line">    <span class="comment">/* 将V2插入V1的表头 */</span></span><br><span class="line">    NewNode-&gt;Next = Graph-&gt;G[E-&gt;V1].FirstEdge;</span><br><span class="line">    Graph-&gt;G[E-&gt;V1].FirstEdge = NewNode;</span><br><span class="line">         </span><br><span class="line">    <span class="comment">/* 若是无向图，还要插入边 &lt;V2, V1&gt; */</span></span><br><span class="line">    <span class="comment">/* 为V1建立新的邻接点 */</span></span><br><span class="line">    NewNode = (PtrToAdjVNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct AdjVNode));</span><br><span class="line">    NewNode-&gt;AdjV = E-&gt;V1;</span><br><span class="line">    NewNode-&gt;Weight = E-&gt;Weight;</span><br><span class="line">    <span class="comment">/* 将V1插入V2的表头 */</span></span><br><span class="line">    NewNode-&gt;Next = Graph-&gt;G[E-&gt;V2].FirstEdge;</span><br><span class="line">    Graph-&gt;G[E-&gt;V2].FirstEdge = NewNode;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">LGraph <span class="title">BuildGraph</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LGraph Graph;</span><br><span class="line">    Edge E;</span><br><span class="line">    Vertex V;</span><br><span class="line">    <span class="keyword">int</span> Nv, i;</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Nv);   <span class="comment">/* 读入顶点个数 */</span></span><br><span class="line">    Graph = CreateGraph(Nv); <span class="comment">/* 初始化有Nv个顶点但没有边的图 */</span> </span><br><span class="line">     </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;(Graph-&gt;Ne));   <span class="comment">/* 读入边数 */</span></span><br><span class="line">    <span class="keyword">if</span> ( Graph-&gt;Ne != <span class="number">0</span> ) &#123; <span class="comment">/* 如果有边 */</span> </span><br><span class="line">        E = (Edge)<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(struct ENode) ); <span class="comment">/* 建立边结点 */</span> </span><br><span class="line">        <span class="comment">/* 读入边，格式为"起点 终点 权重"，插入邻接矩阵 */</span></span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;Graph-&gt;Ne; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;E-&gt;V1, &amp;E-&gt;V2, &amp;E-&gt;Weight); </span><br><span class="line">            <span class="comment">/* 注意：如果权重不是整型，Weight的读入格式要改 */</span></span><br><span class="line">            InsertEdge( Graph, E );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 如果顶点有数据的话，读入数据 */</span></span><br><span class="line">    <span class="keyword">for</span> (V=<span class="number">0</span>; V&lt;Graph-&gt;Nv; V++) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;(Graph-&gt;G[V].Data));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> Graph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><ol><li><p><strong>深度优先搜索</strong>（Depth First Search，<strong>DFS</strong>）</p><ol><li><p>深度优先沿着路径走知道不能深入为止，然后退回到某一个顶点，在选择该顶点的其他路径</p></li><li><p>由于深度优先搜索是不断深入然后退回，故其实现过程可以用<strong>堆栈</strong>来描述，所以深度优先搜索也可以用递归来实现</p><p><em>伪代码如下</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Vertex V)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visited[V] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(V的每个邻接点W)</span><br><span class="line">        <span class="keyword">if</span>(!visited[W])</span><br><span class="line">            DFS(W);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p><strong>广度优先搜索</strong>（Breadth First Search，<strong>BFS</strong>）</p><ol><li><p>搜索一个顶点相邻的所有节点，随后继续访问相邻节点的未访问相邻节点</p></li><li><p>可以用<strong>队列</strong>来实现</p><p><em>伪代码如下</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(Vertex V)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visited[V] = <span class="literal">true</span>;</span><br><span class="line">    Enqueue(V, Q);</span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123;</span><br><span class="line">        V = Dequeue(Q);</span><br><span class="line">        <span class="keyword">for</span>(V的每个邻接点W)&#123;</span><br><span class="line">            visited[w]= <span class="literal">true</span>;</span><br><span class="line">            Enqueue(W, Q);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p><strong>注</strong>：每调用一次DFS或BFS，就把V所在的连通分量遍历了一遍，故对于不连通图，只需要采取以下程序来进行遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListComponents</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(each V in G)</span><br><span class="line">        <span class="keyword">if</span>(!visited[V])&#123;</span><br><span class="line">            DFS[V];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h2><ul><li>分类：<ul><li>单源最短路径问题<ul><li>（有向）无权图</li><li>（有向）有权图</li></ul></li><li>多源最短路径问题</li></ul></li></ul><h3 id="无权图的单源最短路算法"><a href="#无权图的单源最短路算法" class="headerlink" title="无权图的单源最短路算法"></a>无权图的单源最短路算法</h3><ul><li>按照递增（非递减）的顺序找出到各个顶点的最短路，与BFS类似，但略有不同</li></ul><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190829162001.png" alt></p><ul><li><p><em>伪代码如下</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dist[W]：S到W的最短距离，dist[s]=0, 其余可以初始化为-1、正无穷、负无穷等</span></span><br><span class="line"><span class="comment">//path[W]：S到W的路上会经过的某点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Unweighted</span><span class="params">(Vertex S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Enqueue(S,Q);</span><br><span class="line">    <span class="keyword">while</span>(!IsEmpty(Q))&#123;</span><br><span class="line">        V = Dequeue(Q);</span><br><span class="line">        <span class="keyword">for</span>(V的每个邻接点W)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist[W] = <span class="number">-1</span>)&#123;</span><br><span class="line">                dist[W] = dist[V] + <span class="number">1</span>;</span><br><span class="line">                path[W] = V; <span class="comment">//记录了该顶点在最短路径上的上一个点</span></span><br><span class="line">                Enqueue(W, Q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//O(V+E)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="有权图的单源最短路径算法"><a href="#有权图的单源最短路径算法" class="headerlink" title="有权图的单源最短路径算法"></a>有权图的单源最短路径算法</h3><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190829163613.png" alt></p><center>负值圈的情况一般不进行讨论</center>* 思路：按照递增的顺序找出到各个顶点的最短路<ul><li><p>Dijkstra算法：</p><ul><li><p>令S={ 源点s + 已经确定了最短路径的顶点v<del>i</del> }</p></li><li><p>对任一未收录的顶点v，定义dist[v]为s到v的最短路径长度，但该路径仅经过S中的顶点。即路径{ s→(v<del>i</del>∈S)→v }的最小长度</p></li><li><p>若路径是按照递增（非递减）的顺序生成的，则</p><ul><li>真正的最短路必须只经过S中的顶点</li><li>每次从未收录的定点中选一个dist最小的收录(贪心思想)</li><li>增加一个v进入S，可能影响另一个w的dist值(如果v的加入使得w的dist值变小，则v一定在s到w的最短路径上，且v和w必有一条边相连)<ul><li>dist[w]  = min{dist[w], dist[v] + &lt;v, w&gt;的权重}</li></ul></li></ul><p><em>伪代码如下</em><a name="Dijkstra" href></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dist[s]可初始化为0，其相邻点可初始化为它们之间边的权重，其余则初始化为正无穷</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(Vertex s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        V = 未收录定点中dist最小者; <span class="comment">//（1）</span></span><br><span class="line">        <span class="keyword">if</span>(这样的V不存在)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        collected[V] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(V的每个邻接点W)</span><br><span class="line">                <span class="keyword">if</span>(collected[W] == <span class="literal">false</span>)</span><br><span class="line">                    <span class="keyword">if</span>(dist[V] + E&lt;V,W&gt; &lt; dist[W])&#123;</span><br><span class="line">                        dist[W] = dist[V] + E&lt;V,W&gt;; <span class="comment">//（2）</span></span><br><span class="line">                        path[W] = V;</span><br><span class="line">                    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不能解决有负边的情况</span></span><br><span class="line"><span class="comment">//该算法复杂度取决于（1）（2）步骤，</span></span><br></pre></td></tr></table></figure></li><li><p>复杂度不同的解决方法：</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190829165824.png" alt></p></li></ul></li></ul><h3 id="多源最短路径算法"><a href="#多源最短路径算法" class="headerlink" title="多源最短路径算法"></a>多源最短路径算法</h3><ul><li>方法1：直接将单源最短路径调用|V|次<ul><li>T = O(|V|^3^+|E|×|V|)，对于稀疏图的效果号</li></ul></li><li>方法2：Floyd算法<ul><li>T = O(|V|^3^)，对稠密图效果好</li></ul></li></ul><ul><li><p>Floyd算法</p><ul><li>D^k^[ i ][ j ] = 路径{i → { l ≤ k(编号小于等于k的顶点)} → j}的最小长度</li><li>D^0^，D^1^，D^2^ ，D^3^，D^|v|-1^[ i ][ j ]即给出了 i 到 j 的正整最短距离</li><li>D^-1^应该定义为带权的邻接矩阵，对角元为0；如果 i 和 j 之间没有直接关系，应该将D^-1^对应的值初始化为正无穷</li><li>当D^k-1^已经完成，递推到D^k^时：<ul><li>k ∉ 最短路径{i → { l ≤ k} → j}，则D^k^ = D^k-1^</li><li>k ∈ 最短路径{i → { l ≤ k} → j}，则D^k^[ i ][ j ]  = D^k-1^[ i ][ k ]  +  D^k-1^[ k][ j ]</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            D[i][j] = G[i][j];</span><br><span class="line">            path[i][j] = <span class="number">-1</span>;<span class="comment">//用于记录路径</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; N; k++)</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">                <span class="keyword">if</span>(D[i][k] + D[k][j] &gt; D[i][j])&#123;</span><br><span class="line">                    D[i][j] = D[i][k] + D[k][j];</span><br><span class="line">                    path[i][j] = k;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="最小生成树问题"><a href="#最小生成树问题" class="headerlink" title="最小生成树问题"></a>最小生成树问题</h2><ul><li><p><strong>最小生成树（Mininum Spanning Tree）</strong>:</p><ul><li>是一棵<strong>树</strong>：<ul><li>无回路</li><li>|V|个顶点一定有|V-1|条边</li></ul></li><li>是<strong>生成树</strong>：向生成树中任意加一条边都会构成回路<ul><li>包含全部顶点</li><li>|V|-1条边都在图里</li></ul></li><li>边的权重<strong>和</strong>最小</li></ul><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190830173241.png" alt></p></li></ul><ul><li>思想：有约束的<strong>贪心算法</strong><ul><li>约束：<ul><li>只能用图里有的边</li><li>只能正好用掉|V|-1条边</li><li>不能有回路</li></ul></li></ul></li></ul><h3 id="Prim算法——让一棵小树长大"><a href="#Prim算法——让一棵小树长大" class="headerlink" title="Prim算法——让一棵小树长大"></a>Prim算法——让一棵小树长大</h3><ul><li>类似Dijkstra算法：<a href="#Dijkstra">Dijkstra伪代码码</a></li><li>dist[V] = E(s, V) 或正无穷</li><li>parent[s] = -1</li><li><em>Prim算法的伪代码</em></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MST = &#123;s&#125;;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        V = 未收录定点中dist最小者;</span><br><span class="line">        <span class="keyword">if</span>(这样的V不存在)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        将V收录进MST中;</span><br><span class="line">        <span class="keyword">for</span>( V的每个邻接点W )</span><br><span class="line">            <span class="keyword">if</span>( dist[W] != <span class="number">0</span><span class="comment">//W点未被收录 )</span></span><br><span class="line">                <span class="keyword">if</span>( E(V,W) &lt; dist[W] )</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[W] = E(V,W);</span><br><span class="line">                    parent[W] = V;</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(MST中收到的点不到|V|个)</span><br><span class="line">               Error(<span class="string">"生成树不存在"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>适合稠密图</center><h3 id="Kruskal算法——将森林合并成树"><a href="#Kruskal算法——将森林合并成树" class="headerlink" title="Kruskal算法——将森林合并成树"></a>Kruskal算法——将森林合并成树</h3><ul><li>直接按<strong>递增</strong>顺序选出图中权重最小的边（但不能与已选中的边构成回路）</li><li>伪代码如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">(Graph G)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MST = &#123; &#125;;</span><br><span class="line">    <span class="keyword">while</span>(MST中步到|V|<span class="number">-1</span>条边 &amp;&amp; E中还有边)</span><br><span class="line">    &#123;</span><br><span class="line">        从E中取一条权重最小的边E(V,W); <span class="comment">/*最小堆*/</span></span><br><span class="line">        将E(V,W)从E中删除;</span><br><span class="line">        <span class="keyword">if</span>(E(V,W)不在MST中构成回路)<span class="comment">/*并查集*/</span></span><br><span class="line">            将E(V,W)加入MST;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            彻底无视E(V,W);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(MST中不到|V|<span class="number">-1</span>条边)</span><br><span class="line">        Error(<span class="string">"生成树不存在"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet-运行在服务器端的小程序</title>
      <link href="/JavaWeb-Servlet/"/>
      <url>/JavaWeb-Servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="Servlet概述"><a href="#Servlet概述" class="headerlink" title="Servlet概述"></a>Servlet概述</h2><ul><li><p>概念：运行在服务器端的小程序  server applet</p><ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到（tomcat识别）的规则</li></ul></li><li><p>使用</p><ol><li><p>创建JavaEE项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span></span><br></pre></td></tr></table></figure></li><li><p>定义一个类，实现Servlet接口</p></li><li><p>实现接口中的抽象方法</p></li><li><p>配置在Servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.wnghilin.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>执行原理：</p><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的&lt;url-pattern&gt;标签体内容</li><li>如果有，则再找到对应的&lt;servlet-class&gt;全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li></ul><ul><li><p>Servlet中的生命周期：</p><ol><li><p>被创建：执行init方法，只执行一次</p><ul><li><p>默认情况下，第一次被访问时，Servlet被创建</p></li><li><p>可以配置执行Servlet的创建时机</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>top.wnghilin.servlet.ServletDemo2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定Servlet创建时机</span></span><br><span class="line"><span class="comment">            1.第一次被访问时，创建，默认值是-1</span></span><br><span class="line"><span class="comment">                &lt;load-on-startup&gt;的值为负数</span></span><br><span class="line"><span class="comment">            2.服务器启动时，创建</span></span><br><span class="line"><span class="comment">                &lt;load-on-startup&gt;的值为0或正整数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><pre><code>* Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的。* 多个用户同时访问时，可能存在线程安全问题  * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对其修改值</code></pre><ol start="2"><li><p>提供服务：执行service方法，执行多次</p><ul><li>每次访问Servlet时，Servlet方法都会被调用一次 </li></ul></li><li><p>被销毁：执行destroy方法，只执行一次</p><ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁。</li><li>只有服务器正常关闭时，才会执行destroy方法</li><li>destroy方法在Servlet被销毁之前执行，一般用于释放资源</li></ul></li></ol><h3 id="使用Servlet3-0"><a href="#使用Servlet3-0" class="headerlink" title="使用Servlet3.0"></a>使用Servlet3.0</h3><ul><li><p>好处：</p><ul><li>支持注解配置。可以不用web.xml</li></ul></li><li><p>步骤：</p><ol><li><p>创建JavaEE项目，选择Servlet的版本3.0以上，可不创建web.xml</p></li><li><p>定义一个类，实现Servlet接口</p></li><li><p>复写方法</p></li><li><p>在类上使用@WebServlet注解，进行配置</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"资源路径"</span>)</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebServlet定义</span></span><br><span class="line"><span class="keyword">package</span> javax.servlet.annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@java</span>.lang.annotation.Target(&#123;java.lang.annotation.ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@java</span>.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@java</span>.lang.annotation.Documented</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    java.lang.<span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    java.lang.String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    java.lang.String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"></span><br><span class="line">    javax.servlet.annotation.WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    java.lang.<span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    java.lang.<span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    java.lang.<span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    java.lang.<span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>IDEA会为每一个tomcat部署的项目单独简历一份配置文件</p></li><li><p>查看控制台的log：Using CATALINA_BASE:   “C:\Users\Nier.IntelliJIdea2019.2\system\tomcat\Tomcat_8_5_31_Tomcat_2”</p></li><li><p>工作空间项目 和 tomcat部署的web项目</p><ul><li>tomcat真正访问的是“tomcat部署的web项目”，“tomcat部署的web项目”对应着“工作空间项目”的文本目录下的所有资源  </li><li>WEB-INF目录下的资源不能被浏览器直接访问</li></ul></li></ul><hr><h2 id="Servlet详解"><a href="#Servlet详解" class="headerlink" title="Servlet详解"></a>Servlet详解</h2><ul><li><p>Servlet的体系结构</p><p>Servlet – 接口</p><p>​      |</p><p>GenericServlet – 抽象类</p><p>​      |</p><p>HttpServlet – 抽象类</p><ul><li>GenericServlet: 将Servlet接口中其他的方法做了默认空实现，只有service方法作为抽象<ul><li>定义Servlet类是，可以继承GenericServlet，实现service()方法即可</li></ul></li><li>HttpServlet：对HTTP协议的一种封装，简化操作<ul><li>定义类继承HttpServlet</li><li>复写doGet/doPost</li></ul></li></ul></li><li><p>Servlet相关配置：</p><ol><li>urlpartten：Servlet访问路径<ul><li>一个Servlet可以定义多个访问路径</li><li>路径定义规则<ol><li>/xxx：路径匹配</li><li>/xxx/xxx：多层路径，目录结构</li><li>*.do：扩展名匹配</li></ol></li></ul></li></ol></li><li><p>请求消息：客户端发送给服务器端的数据</p><ul><li>数据格式：</li></ul><ol><li><p>请求行<br> 请求方式 请求url 请求协议/版本<br> GET /login.html HTTP/1.1</p><ol><li><p>请求方式：</p><ul><li><p>HTTP协议有7中请求方式，常用的有2种</p><ul><li><p>GET：</p><ol><li><p>请求参数在请求行中，在url后。</p></li><li><p>请求的url长度有限制的</p></li><li><p>不太安全</p></li></ol></li><li><p>POST：</p><ol><li>请求参数在请求体中</li><li>请求的url长度没有限制的</li><li>相对安全</li></ol></li></ul></li></ul></li></ol></li><li><p>请求头：客户端浏览器告诉服务器一些信息<br> 请求头名称: 请求头值</p><ul><li>常见的请求头：<ol><li>User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</li></ol><ul><li>可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li></ul></li></ul><ol start="2"><li>Referer：<a href="http://localhost/login.html" target="_blank" rel="noopener">http://localhost/login.html</a><pre><code>* 告诉服务器，当前请求从哪里来    * 作用：        1. 防盗链：        2. 统计工作：</code></pre></li></ol></li><li><p>请求空行<br> 空行，就是用于分割POST请求的请求头，和请求体的。</p></li><li><p>请求体(正文)：</p><ul><li>封装POST请求消息的请求参数的</li></ul></li></ol></li><li><p>字符串格式：</p><pre><code>POST /login.html    HTTP/1.1Host: localhostUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/2010010       Firefox/60.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateReferer: http://localhost/login.htmlConnection: keep-aliveUpgrade-Insecure-Requests: 1</code></pre></li></ul><pre><code>username=zhangsan</code></pre><ul><li><p>响应消息：服务器端发送给客户端的数据</p><ul><li><p>数据格式</p><ol><li><p>响应行</p><ol><li><p>组成：协议/版本 响应状态码 状态码描述</p></li><li><p>响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态</p><ol><li><p>状态码都是3位数字</p></li><li><p>分类：</p><ol><li>1xx：服务器接收客户端消息，但没有接收完成，等待一段时间后，发送1xx状态码</li><li>2xx：成功。代表：200</li><li>3xx：重定向。代表：302（重定向），304（访问缓存）</li><li>4xx：客户端错误。<ul><li>代表：<ul><li>404：请求路径没有对应的资源</li><li>405：请求方式没有对应的doXXX方法</li></ul></li></ul></li><li>5xx：服务器端错误，代表：500（服务器内部出现异常）</li></ol></li></ol></li></ol></li><li><p>响应头</p><ol><li>格式：头名称: 值</li><li>常见的响应头：<ol><li>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</li><li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据<ul><li>值：<ul><li>in-line：默认值，在当前页面打开</li><li>attachment; filename=xxx：以附件形式打开响应体。文件下载</li></ul></li></ul></li></ol></li></ol></li><li><p>响应空行</p></li><li><p>响应体：传输的数据</p></li></ol></li><li><p>响应字符串格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html;charset=UTF-8</span><br><span class="line">Content-Length: 101</span><br><span class="line">Date: Wed, 06 Jun 2018 07:08:42 GMT</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;response&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">hello, response</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="request和response对象"><a href="#request和response对象" class="headerlink" title="request和response对象"></a>request和response对象</h3><ul><li>原理：<ol><li>request和response对象是由服务器创建的，我们来使用它们</li><li>request对象用来获取请求消息，response对象用来设置响应消息</li></ol></li></ul><ul><li><p>request对象继承体系结构：</p><p>ServletRequest        –    接口</p><pre><code>|    继承</code></pre><p>HttpServletRequest    –   接口</p><pre><code>|    实现</code></pre><p>org.apache.catalina.connector.RequestFacade 类(tomcat)</p></li></ul><h4 id="request"><a href="#request" class="headerlink" title="request"></a>request</h4><ol><li><p>获取请求消息数据</p><ol><li><p>获取请求行数据</p><ul><li><p>GET /servletdemo/demo1/?name=zhangsan HTTP/1.1</p></li><li><p>方法：</p><ol><li>获取请求方式：GET<ul><li>String getMethod()</li></ul></li><li>（*）获取虚拟目录：/servletdemo<ul><li>String getContextPath()</li></ul></li><li>获取Servlet路径：/demo1<ul><li>String getServletPath()</li></ul></li><li>获取get方式请求参数：name=zhangsan<ul><li>String getQuery()</li></ul></li><li>（*）获取请求URI：/servletdemo/demo1<ul><li>String getRequestURI()：返回/servletdemo/demo1</li><li>StringBuffer getRequestUrl()：返回<a href="http://localhost/servletdemo/demo1" target="_blank" rel="noopener">http://localhost/servletdemo/demo1</a></li><li>URL：统一资源定位符</li><li>URI：统一资源标识符</li></ul></li><li>获取协议及版本：HTTP/1.1<ul><li>String getProtocol()</li></ul></li><li>获取客户机的IP地址<ul><li>String getRemoteAddr()</li></ul></li></ol></li></ul></li><li><p>获取请求头数据</p><ul><li>方法：<ul><li>（*）String getHeader(String name)：通过请求头的名称获取请求头的值</li><li>Enumeration&lt;String&gt; getHeaderNames()：获取所有的请求头名称</li></ul></li></ul></li><li><p>获取请求体数据</p><ul><li><p>只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</p></li><li><p>步骤：</p><ol><li><p>获取流对象</p><ol><li>BufferedReader getReader()：获取字符输入流，只能操作字符数据</li><li>ServletInputStream getInputStream()：获取字节数据输入流，可以操作所有类型数据</li></ol></li><li><p>再从流对象中拿数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/requestDemo5"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo5</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求消息体--请求参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取字符流</span></span><br><span class="line">        BufferedReader br = request.getReader();</span><br><span class="line">        <span class="comment">//2.读取数据</span></span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol></li><li><p>其他功能：</p><ol><li><p>获取请求参数通用方式：get和珀斯特请求方式都可以使用下列方式来获取请求参数</p><ol><li>String getParameter(String name)：根据参数名称获取参数值</li><li>String[] getParameterValues(String name)：根据参数名称获取参数值的数组（多用于复选框）</li><li>Enumeration&lt;String&gt; getParameterNames()：获取所有请求的参数名称</li><li>Map&lt;String, String[]&gt; getParameterMap()：获取所有参数的map集合</li></ol><p><strong>中文乱码问题</strong>：</p><ul><li>get方式：tomcat8已经将乱码问题解决</li><li>post方式：会乱码<ul><li>解决：在获取参数前，设置request的编码</li><li>request.setCharacterEncoding(“utr-8”);</li></ul></li></ul></li><li><p>请求转发：一种在服务器内部的资源跳转方式</p><ol><li>步骤：<ol><li>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</li><li>使用该对象进行转发: forward(ServletRequest request, ServletResponse response)</li></ol></li><li>特点：<a name="Forward" href></a><ol><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器内部资源中</li><li>转发是一次请求，<strong>可以使用request对象共享数据</strong></li><li>对比：<a href="#Redirect">重定向的特点</a></li></ol></li><li>共享数据：<ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li><li>方法：<ol><li>setAttribute(String name, Object obj)：存储数据</li><li>getAttribute(String name)：通过键获取值</li><li>removeAttribute(String name)：通过键移除值对</li></ol></li></ul></li><li>获取ServletContext对象：<ul><li>ServletContext getServletContext()</li></ul></li></ol></li></ol></li></ol><h4 id="response"><a href="#response" class="headerlink" title="response"></a>response</h4><ul><li>功能：设置响应消息<ol><li>设置响应行<ol><li>格式：HTTP/1.1 200 OK</li><li>设置状态码：setStatus(int sc)</li></ol></li><li>设置响应头：setHeader(String name, String value)</li><li>设置响应体<ul><li>使用步骤：<ol><li>获取输出流<ul><li>字符输出流：PrintWriter getWriter()</li><li>字节输出流：ServletOutputStream getOutputStream()</li></ul></li><li>使用输出流，将数据输出到客户端浏览器</li></ol></li></ul></li></ol></li></ul><ul><li><p>案例：</p><ol><li><p>完成重定向</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重定向</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/responseDemo1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"demo1..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//访问这个资源会自动跳转到/responseDemo2资源</span></span><br><span class="line">        <span class="comment">//1. 设置状态码为302</span></span><br><span class="line">        response.setStatus(<span class="number">302</span>);</span><br><span class="line">        <span class="comment">//2. 设置响应头location</span></span><br><span class="line">        response.setHeader(<span class="string">"location"</span>, <span class="string">"/Response/responseDemo2"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//简单的重定向方法</span></span><br><span class="line">        response.sendRedirect(<span class="string">"/Response/responseDemo2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重定向的特点：<a name="Redirect" href></a><ol><li>地址栏发生变化</li><li>重定向可以访问其他站点（服务器）的资源</li><li>重定向是两次请求，<strong>不能用request对象共享数据</strong></li></ol></li><li>对比：<a href="#Forward">转发的特点</a></li><li>路径的写法：<ul><li>相对路径：通过相对路径不可以确定唯一资源<ul><li>如：./index.html（ ./ 可以省略）</li><li>不以 / 开头，以 . 开头</li><li>规则：确定访问当前资源和目标资源之间的相对位置关系<ul><li>./：当前目录</li><li>../：后退一级目录</li></ul></li></ul></li><li>绝对路径：通过绝对路径可以确定唯一资源<ul><li>如：<a href="http://locahost/day15/responseDemo2" target="_blank" rel="noopener">http://locahost/day15/responseDemo2</a>        /day15/responseDemo2</li><li>以 / 开头的路径</li><li>规则：判断定义路径是给谁用的<ul><li>给客户端浏览器使用：需要加虚拟目录（项目的访问路径）<ul><li><strong>最好动态获取虚拟目录</strong>：request.getContextPath</li><li>&lt;a&gt;, &lt;form&gt;, 重定向</li></ul></li><li>给服务器使用：不需要加虚拟目录 <ul><li>转发路径</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>服务器输出字符数据到浏览器：注意编码</p><ul><li><p>步骤</p><ul><li><p>获取字符输出流</p></li><li><p>输出数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取流对象之前，设置流的默认编码，ISO-8859-1设置为：GBK</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//告诉浏览器，服务器发送的消息体数据的编码，建议浏览器使用该编码解码</span></span><br><span class="line">    response.setHeader(<span class="string">"content-type"</span>, <span class="string">"text/html; charset=utf-8"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//简单形式设置编码</span></span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">    <span class="comment">//1.获取字符输出流</span></span><br><span class="line">    PrintWriter pw = response.getWriter();</span><br><span class="line">    <span class="comment">//2.输出数据</span></span><br><span class="line">    pw.write(<span class="string">"&lt;h1&gt;Hello response&lt;/h1&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>服务器输出字节数据到浏览器</p><ul><li>步骤：<ul><li>获取字节输出流</li><li>输出数据</li></ul></li></ul></li><li><p>验证码</p><ul><li><p>本质：图片</p></li><li><p>目的：防止恶意表单注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/checkCodeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一对象，在内存中图片(验证码图片对象)</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();<span class="comment">//画笔对象</span></span><br><span class="line">        g.setColor(Color.PINK);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2画边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width - <span class="number">1</span>,height - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">""</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片输出到页面展示</span></span><br><span class="line">        ImageIO.write(image,<span class="string">"jpg"</span>,response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">            分析：</span><br><span class="line">                点击超链接或者图片，换一张图片</span><br><span class="line">                1.给超链接和图片绑定单击事件</span><br><span class="line">                2.重新设置图片的src属性值</span><br><span class="line">         */</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//1.获取图片对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"checkCode"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//2.绑定单击事件</span></span></span><br><span class="line"><span class="javascript">        img.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//加时间戳</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">            img.src = <span class="string">"/day15/checkCodeServlet?"</span>+date;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"checkCode"</span> <span class="attr">src</span>=<span class="string">"/day15/checkCodeServlet"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"change"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>看不清换一张？<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>案例：</p><ul><li>文件下载：<ol><li>页面显示超链接</li><li>点击超链接后弹出下载提示框</li><li>完成图片文件下载</li></ol></li><li>分析：<ol><li>超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</li><li>任何资源都必须弹出下载提示框</li><li>使用响应头设置资源的打开方式<ul><li>content-disposition：attachment;filename=xxx</li></ul></li></ol></li><li>步骤：<ol><li>定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</li><li>定义Servlet<ol><li>获取文件名称</li><li>使用字节输入流加载文件进内存</li><li>指定response的响应头：content-disposition: attachment;filename=xxx</li><li>将数据写出到response输出流</li></ol></li></ol></li></ul></li><li><p>html页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/Response/img/1.png"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/Response//downloadServlet?filename=1.png"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Servlet代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/downloadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求餐宿和，文件名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line">        <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1找到文件的服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/img/"</span> + filename);</span><br><span class="line">        <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型 content-type</span></span><br><span class="line">        <span class="comment">//获取文件MIME类型</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);</span><br><span class="line">        response.setHeader(<span class="string">"content-type"</span>, mimeType);</span><br><span class="line">        <span class="comment">//3.2设置响应头打开方式 content-disposition</span></span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream outputStream = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(buff)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>中文文件名问题</strong>：</p><ul><li>解决思路：<ol><li>获取客户端使用的浏览器版本信息</li><li>根据不同的浏览器信息进行编码处理，工具类可以从网上下载</li></ol></li><li>工具类示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="BeanUtils工具类"><a href="#BeanUtils工具类" class="headerlink" title="BeanUtils工具类"></a>BeanUtils工具类</h2><ul><li><p>用于封装JavaBean</p><ol><li><p>JavaBean：标准的Java类</p><ul><li>要求：<ol><li>类必须被public修饰</li><li>必须提供空参的构造器</li><li>成员变量必须使用private修饰</li><li>提供公共setter和getter方法</li></ol></li><li>功能：封装数据</li></ul></li><li><p>概念：<strong>属性</strong>：setter和getter后截取的产物</p><p>如成员变量为user，setter为setUser，则<strong>U</strong>ser为属性（若setter为setHehe，则Hehe为属性，与user无关，只与setter有关）</p></li><li><p>方法：</p><ol><li>setProperty()：操作的是属性，不是成员变量</li><li>getProperty()</li><li><strong>populate</strong>(Object obj，Map map)：将map集合的键值对信息，封装到对应的JavaBean对象中</li></ol></li></ol></li></ul><hr><h2 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h2><ol><li><p>概念：代表整个web应用，可以和程序的容器（服务器）来通信</p></li><li><p>获取：</p><ol><li><p>通过request对象获取</p><p>request.getServletContext();</p></li><li><p>通过HttpServlet获取</p><p>this.getServletContext();</p></li></ol></li><li><p>功能：</p><ol><li><p>获取MIME类型</p><ul><li>MIME类型：在互联网通信过程中顶一顶一种文件数据类型<ul><li>格式：大类型/小类型        text/html        image/jpeg</li></ul></li><li>获取：String getMimeType(String file)</li></ul></li><li><p>域对象：共享数据</p><ol><li>setAttribute(String name, Object value)</li><li>getAttribute(String name)</li><li>removeAttribute(String name)</li></ol><ul><li>ServletContext对象范围：所有用户所有请求的数据</li></ul></li><li><p>获取文件的真实（服务器）路径</p><ol><li>方法：String getRealPath(String path)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 通过HttpServlet获取</span></span><br><span class="line"> ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"> <span class="comment">// 获取文件的服务器路径</span></span><br><span class="line"> String b = context.getRealPath(<span class="string">"/b.txt"</span>);<span class="comment">//web目录下资源访问</span></span><br><span class="line"> System.out.println(b);</span><br><span class="line"><span class="comment">// File file = new File(realPath);</span></span><br><span class="line">      </span><br><span class="line"> String c = context.getRealPath(<span class="string">"/WEB-INF/c.txt"</span>);<span class="comment">//WEB-INF目录下的资源访问</span></span><br><span class="line"> System.out.println(c);</span><br><span class="line">      </span><br><span class="line"> String a = context.getRealPath(<span class="string">"/WEB-INF/classes/a.txt"</span>);<span class="comment">//src目录下的资源访问</span></span><br><span class="line"> System.out.println(a);</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web服务器软件：Tomcat</title>
      <link href="/JavaWeb-Tomcat/"/>
      <url>/JavaWeb-Tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="Web相关概念"><a href="#Web相关概念" class="headerlink" title="Web相关概念"></a>Web相关概念</h2><ol><li>软件架构<ol><li><strong>C/S</strong>：客户端/服务器端</li><li><strong>B/S</strong>：浏览器/服务器端</li></ol></li><li>资源分类<ol><li><strong>静态资源</strong>：所有用户访问后，得到的结果都一样，静态资源可以直接被浏览器解析<ul><li>如：html，css，JavaScript</li></ul></li><li><strong>动态资源</strong>：每一个用户访问相同资源后得到的结果可能不一样。动态资源被访问后，需要先转换为静态资源，再返回给浏览器<ul><li>如：servlet/jsp，php，asp…</li></ul></li></ol></li><li>网络通信三要素<ol><li><strong>IP</strong>：电子设备在网络中的唯一标识</li><li><strong>端口</strong>：应用程序在计算机中的唯一标识。0~65536</li><li><strong>传输协议</strong>：规定了数据传输的规则<ol><li>基础协议：<ol><li><strong>tcp</strong>：安全协议，三次握手。速度稍慢</li><li><strong>udp</strong>：不安全协议。速度快</li></ol></li></ol></li></ol></li></ol><h2 id="Web服务器软件"><a href="#Web服务器软件" class="headerlink" title="Web服务器软件"></a>Web服务器软件</h2><ul><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户请求，处理请求，做出响应</li><li>web服务器软件：接收用户请求，处理请求，做出响应<ul><li>在Web服务器软件中，可以部署web项目，让用户通过浏览器来访问</li><li>web容器</li></ul></li></ul><ul><li>常见的java相关的Web服务器软件：<ul><li>webLogic：Oracle公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li><li>webSphere：IBM公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li><li>JBOSS：JBOSS公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li><li>Tomcat：Apache基金组织，中小型JavaEE服务器，仅仅支持少量JavaEE规范，开源的，免费的。</li></ul></li><li>JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</li></ul><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><ol><li>下载：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></li></ol><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190819163625.png" alt></p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190819163747.png" alt></p><ol start="2"><li>安装：解压压缩包即可<ul><li><strong>注意</strong>：安装目录建议不要有中文</li></ul></li><li>卸载：删除目录即可</li><li>启动</li></ol><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20190821110351.png" alt></p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821110902.png" alt></p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821111428.png" alt></p><ul><li><p>可能遇到的问题：</p><ol><li><p>黑窗口一闪而过：</p><ul><li>原因：没有正确配置JAVA_HOME环境变量</li><li>解决方案：正确配置JAVA_HOME环境变量即可（在环境变量中新建JAVA_HOME环境变量，再将path中的jdk路径修改为%JAVA_HOME%\bin）</li></ul></li><li><p>启动报错</p><ol><li><p>暴力：找到占用的端口号，并找到对应的进程，杀死该进程</p><ul><li><p>netstat -ano：在列表中找到对应端口号的PID</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821112940.png" alt></p></li><li><p>使任务管理器显示PID</p><ul><li><p>win7：任务管理器–&gt;查看–&gt;选择列–&gt;勾选PID</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821113252.png" alt></p></li><li><p>win10：在名称栏处右键，勾选PID</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/%E6%97%A0%E6%A0%87%E9%A2%98.png" alt></p></li></ul></li><li><p>关闭相应进程</p></li></ul></li><li><p>温柔：修改自身端口号</p><ul><li>安装目录/conf/server.xml，编辑该文件</li></ul><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821113904.png" alt></p><p>注意该文件中的其他端口号也要改，如redirectPort等</p><ul><li>一般会将tomcat的默认端口号修改为80。80端口是http协议的默认端口号，访问时可以不用输入端口号</li></ul></li></ol></li></ol></li></ul><ol start="5"><li><p>关闭</p><ul><li>正常关闭：<ul><li>bin\shutdown.bat</li><li>在启动窗口按ctrl+c</li></ul></li><li>强制关闭：<ul><li>点击启动窗口的×</li></ul></li></ul></li><li><p>配置</p><ul><li><p>部署项目的方式：</p><ol><li>直接将项目放到webapps文件夹下即可（localhost\项目名称\资源文件 可以直接访问）<ul><li>\项目名称：项目的访问路径–&gt;虚拟目录</li><li>简化方式：将项目打包成一个war包，再将war包放置在webapps目录下。<ul><li>在webapps目录下，war包会自动解压</li><li>可以通过将项目压缩为zip文件再改后缀名得到war包，也可通过专门的war打包软件获得</li></ul></li></ul></li><li>/conf/server.xml文件的Host标签提中添加配置</li></ol><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821144851.png" alt></p><ol start="3"><li><p>在\conf\Catalina\localhost文件夹下新建deploy.xml（名字随意），添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"D:\hello"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ol><pre><code>此时的虚拟目录：xml文件的名称</code></pre><ul><li><p>静态项目和动态项目</p><ul><li><p>目录结构</p><ul><li><p>静态项目放置静态资源</p></li><li><p>java动态项目的目录结构：</p><p>– 项目的根目录</p><p>​    – WEB-INF目录：</p><p>​        – web.xml：web项目的核心配置文件</p><p>​        – classes目录：防止字节码文件的目录</p><p>​        – lib目录：防止依赖的jar包</p></li></ul></li></ul></li></ul><h2 id="Tomcat集成到IDEA中"><a href="#Tomcat集成到IDEA中" class="headerlink" title="Tomcat集成到IDEA中"></a>Tomcat集成到IDEA中</h2><ol><li><p>打开IDEA</p></li><li><p>Run–&gt;Edit Configurations</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821150338.png" alt></p></li><li><p>选择Template–&gt;Tomcat Server–&gt;Local–&gt;Configure..</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821150548.png" alt></p></li><li><p>选择自己的Tomcat目录</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821150650.png" alt></p></li><li><p>完成配置</p></li><li><p>创建JavaWeb项目</p><p><img src="https://wnghilin-blog.oss-cn-beijing.aliyuncs.com/20190821151107.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML入门</title>
      <link href="/JavaWeb-XML/"/>
      <url>/JavaWeb-XML/</url>
      
        <content type="html"><![CDATA[<h2 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h2><ol><li>概念：Extensible Markup Language 可扩展标记语言<ul><li>可扩展：标签都是自定义的</li></ul></li><li>功能：<ul><li>存储数据：<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li><strong>xml</strong>与<strong>html</strong>的区别<ul><li>xml标签都是自定义，html标签时预定义</li><li>xml语法严格，html语法松散</li><li>xml是存储数据的，html是展示数据的</li></ul></li></ol><ul><li>w3c：万维网联盟</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><p>基本语法：</p><ol><li>文档后缀名 .xml</li><li>xml第一行必须定义为文档声明</li><li>xml文档中有且仅有一个根标签</li><li>属性值必须使用引号引起来（单双都可）</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol></li><li><p>组成部分：</p><ol><li><p><strong>文档声明</strong></p><ol><li>格式：&lt;?xml$ 属性列表 ?&gt;</li><li>属性列表：<ul><li>version：版本号，必需的属性</li><li>encoding：编码方式，告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</li><li>standalone：是否独立<ul><li>取值<ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul></li></ul></li></ol></li><li><p>指令（了解）：结合css</p><ul><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;? xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>标签</strong>：标签名称自定义</p><ul><li>名称可以含字母、数字以及其他的字符</li><li>名称不能以数字或者标点符号开始</li><li>名称不能以字符 “xml”（或者 XML、Xml）开始</li><li>名称不能包含空格</li></ul></li><li><p><strong>属性</strong>：</p><ul><li>id属性值唯一</li></ul></li><li><p><strong>文本</strong></p><ul><li>CDATA区：该区域内的数据会被原样展示<ul><li>格式：&lt;![CDATA[数据]]&gt;</li></ul></li></ul></li></ol></li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>概念：规定xml文档的书写规则<ul><li>在xml中引入约束文档</li><li>读懂约束文档</li></ul></li><li>分类：<ol><li>DTD：一种简单的约束技术</li><li>Schema：一种复杂的约束技术</li></ol></li></ul><h3 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h3><ul><li><p>引入dtd文档到xml文档中：</p><ul><li>内部dtd：将约束规则定义在xml文档中（较少使用）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE students [</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT students (student*) &gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT student (name,age,sex)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT name (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT age (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT sex (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST student number ID #REQUIRED&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外部dtd：将约束的规则定义在外部的dtd文件中<ul><li>本地：&lt;!DOCTYPE 根标签名 SYSTEM “dtd文件的位置”&gt;</li><li>网络：&lt;!DOCTYPE 根标签名 PUBLIC “dtd文件名字” “dtd文件的位置URL”&gt;</li></ul></li></ul></li></ul><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><ul><li><p>引入过程</p><ol><li><p>填写xml文档的根元素</p></li><li><p>引入xsi前缀.  xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;" target="_blank" rel="noopener">http://www.w3.org/2001/XMLSchema-instance&quot;</a></p></li><li><p>引入xsd文件命名空间.  xsi:schemaLocation=”命名空间url  文件名.xsd”</p></li><li><p>为每一个xsd约束声明一个前缀,作为标识  xmlns:前缀=”命名空间”</p></li></ol></li></ul><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><ul><li>概念：操作xml文档，将文档中的数据读取到内存中<ul><li>操作xml文档<ol><li><strong>解析</strong>(读取)：将文档中的数据读取当内存中</li><li>写入：将内存中的数据保存到xml文档中</li></ol></li><li>解析xml方式：<ol><li><strong>DOM</strong>：将标记语言文档一次性加载进内存，形成一棵DOM树<ul><li>优点：操作方便，可以对文件进行CRUD所有操作</li><li>缺点：占内存</li></ul></li><li><strong>SAX</strong>：逐行读取，基于事件驱动<ul><li>优点：不占内存</li><li>缺点：只能<strong>读取</strong>，不能增删改</li></ul></li></ol></li></ul></li><li>xml常见解析器：<ol><li>JAXP：Sun公司提供的解析器，支持dom和sax两种思想</li><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li>PULL：Android内置的解析器，sax方式</li></ol></li></ul><h3 id="Jsoup解析器"><a href="#Jsoup解析器" class="headerlink" title="Jsoup解析器"></a>Jsoup解析器</h3><ul><li>步骤：<ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jsoupDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//2.获取Document对象，根据xml文档获取</span></span><br><span class="line">        <span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">        String path = jsoupDemo1.class.getClassLoader().getResource(<span class="string">"student.xml"</span>).getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载进内训，获取dom树</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象 Element对象</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>对象的使用：</p><ol><li><p><strong>Jsoup</strong>：工具类，可以解析html或xml文档，返回Document</p><ul><li><p>parse：解析html或xml文档，返回Document</p><ul><li><strong>parse</strong>(File in, String charsetName)：解析xml或html文件</li><li><strong>parse</strong>(String html)：解析xml或html字符串，参数为html或xml代码</li><li><strong>parse</strong>(URL url, int timeoutMillis)：通过网络路径获取指定的文档对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://网址"</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><ol start="2"><li><p><strong>Document</strong>：文档对象。代表内存中的dom树</p><ul><li>获取Element对象<ul><li>getElementById(String id)：根据id属性值获取唯一的元素对象</li><li><strong>getElementsByTag</strong>(<strong>String</strong> <strong>TagName</strong>)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值来获取元素对象</li></ul></li></ul></li><li><p><strong>Elements</strong>：元素Element对象的a’t’h集合。可以当作ArrayList&lt;Elements&gt;来使用</p></li><li><p><strong>Element</strong>：元素对象</p><ol><li>获取子元素对象<ul><li>getElementById(String id)：根据id属性值获取唯一的元素对象</li><li><strong>getElementsByTag</strong>(<strong>String</strong> <strong>TagName</strong>)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值来获取元素对象</li></ul></li><li>获取属性值<ul><li>String attr(String key)：根据属性名称获取属性值</li></ul></li><li>获取文本内容<ul><li>String text()：获取文本内容</li><li>String html()：获取标签体的所有内容（包括子标签的字符串内容）</li></ul></li></ol></li><li><p><strong>Node</strong>：节点对象</p><ul><li>是Document和Element的父类</li></ul></li></ol><ul><li><p>快捷查询方式：</p><ol><li><p>selector：选择器</p><ul><li>方法：Elements select(String cssQuery)<ul><li>语法：参考Selector类中定义的语法</li></ul></li></ul></li><li><p>XPath：<strong>XPath</strong>即为<strong>XML路径语言</strong>（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。</p><ul><li>使用Jsoup的Xpath需要额外导入jar包</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">    JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//4.结合xpath语法查询（具体查看文档）</span></span><br><span class="line">    List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发框架——Bootstrap</title>
      <link href="/JavaWeb-Bootstrap/"/>
      <url>/JavaWeb-Bootstrap/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Bootstrap是美国<a href="https://baike.baidu.com/item/Twitter/2443267" target="_blank" rel="noopener">Twitter</a>公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、<a href="https://baike.baidu.com/item/JavaScript/321142" target="_blank" rel="noopener">JavaScript</a> 开发的简洁、直观、强悍的<a href="https://baike.baidu.com/item/前端/5956545" target="_blank" rel="noopener">前端</a>开发框架，使得 Web 开发更加快捷。</p></blockquote><h2 id="Bootstrap简介"><a href="#Bootstrap简介" class="headerlink" title="Bootstrap简介"></a>Bootstrap简介</h2><ol><li><p>好处</p><ol><li>Bootstrap定义了很多css样式和js插件，可以提供极为丰富的页面效果</li><li>响应式布局。<ul><li>同一套页面可以兼容不同分辨率的设备</li></ul></li></ol></li><li><p>使用</p><ol><li><p>下载Bootstra <a href="https://v3.bootcss.com/" target="_blank" rel="noopener">https://v3.bootcss.com/</a></p></li><li><p>将3个文件夹复制进项目</p></li><li><p>创建html页面，引入必要的资源文件，以下为基本模板（去掉了兼容ie8的设置）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.2.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><ul><li><p>同一套页面可以建中不同分辨率的设备</p></li><li><p>实现：依赖于<strong>栅格系统</strong></p><ul><li>栅格系统：将一行平均分为12个格子，可以指定元素占几个格子</li></ul></li><li><p>步骤：</p><ol><li><p>定义<strong>容器</strong>。相当于table</p><ol><li>分类：<ol><li><strong>container</strong>：两边留白</li><li><strong>container-fluid</strong>：每种设备都占满100%宽度</li></ol></li></ol></li><li><p>定义<strong>行</strong>。相当于tr      样式：<strong>row</strong></p></li><li><p>定义<strong>元素</strong>。指定该元素在不同的设备上所占的格子的数目    样式：<strong>col-设备代号-格子数目</strong></p><ul><li><p>设备代号：</p><ol><li><strong>xs</strong>：超小屏幕  手机( &lt;768px )</li><li><strong>sm</strong>：小屏幕  平板( ≥768px )</li><li><strong>md</strong>：中等屏幕  桌面显示器( ≥1200px )</li><li><strong>lg</strong>：大屏幕  大桌面显示器( 大于等于1200px )</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.定义容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.定义行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 3.定义元素</span></span><br><span class="line"><span class="comment">                大显示器一行12个格子</span></span><br><span class="line"><span class="comment">                pad上一行6个格子</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-1 col-sm-2"</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注</strong>：</p><ol><li>一行中格子数目超过12，超出部分自动换行</li><li>栅格类属性可以向上兼容（适用于与屏幕宽度大于或等于分界点大小的设备）</li><li>如果设备宽度小于设置栅格类属性设备代码的最小值，会一个元素占满一整行</li></ol></li></ul></li></ol></li></ul><h2 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h2><h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h3><ul><li><p>全局CSS样式</p><ul><li><p><strong>按钮</strong>：<a href="https://v3.bootcss.com/css/#buttons" target="_blank" rel="noopener">官方文档</a></p><ul><li><p>设置默认按钮：<a href="https://v3.bootcss.com/css/#buttons-tags" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置按钮样式: <a href="https://v3.bootcss.com/css/#buttons-options" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>（默认样式）Default<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>（首选项）Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>（成功）Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>（一般信息）Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>（警告）Warning<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>（危险）Danger<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-link"</span>&gt;</span>（链接）Link<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置按钮尺寸：<a href="https://v3.bootcss.com/css/#buttons-sizes" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-lg"</span>&gt;</span>（大按钮）Large button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>（默认尺寸）Default button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-sm"</span>&gt;</span>（小按钮）Small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-xs"</span>&gt;</span>（超小尺寸）Extra small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><strong>图片</strong></p><ul><li><p>图片在任意尺寸都占100%</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-responsive"</span> <span class="attr">alt</span>=<span class="string">"Responsive image"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>图片的形状</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方形--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--圆形--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-circle"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--相框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>表格</strong>：<a href="https://v3.bootcss.com/css/#tables" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>表单</strong>：<a href="https://v3.bootcss.com/css/#forms" target="_blank" rel="noopener">官方文档</a></p><ul><li><p>可以给表单项添加：class=”form-control”(所有设置了 <code>.form-control</code> 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 <code>width: 100%;</code>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail1"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail1"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputPassword1"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputPassword1"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputFile"</span>&gt;</span>File input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"exampleInputFile"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Example block-level help text here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Check me out</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>组件：</p><ul><li><p>导航条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>分页条</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="JS插件"><a href="#JS插件" class="headerlink" title="JS插件"></a>JS插件</h3><ul><li>轮播图：<a href="https://v3.bootcss.com/javascript/#carousel" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池与JDBC Template</title>
      <link href="/JavaWeb_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8EJDBC-Template/"/>
      <url>/JavaWeb_%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%B8%8EJDBC-Template/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ul><li>概念：一个容器（集合），用来存放数据库连接。当系统初始化好后，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器</li><li>优势:<ol><li>节约资源</li><li>用户访问高效</li></ol></li><li>实现：<ol><li>标准接口：DataSource    javax.sql包下的<ol><li>方法：<ul><li>获取连接：getConnection()</li><li>归还连接：如果连接对象Conection是从连接池中获取，调用Connection.close()，则不会再关闭连接，而是归还连接</li></ul></li></ol></li><li>由数据库厂商来实现<ol><li>C3P0：数据库连接池技术</li><li>Druid：数据库连接池实现技术，由阿里巴巴提供</li></ol></li></ol></li></ul><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><ul><li><p>步骤：</p><ol><li>导入jar包：c3p0-0.9.5.2.jar和mchange-commons-java-0.2.12.jar（不能忘记导入数据库驱动jar包）</li><li>定义配置文件<ul><li>名称：c3p0.properties 或 c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可</li></ul></li><li>创建核心对象   数据库连接池对象  ComboPooledDataSource</li><li>获取连接：getConnection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建数据库连接池</span></span><br><span class="line">DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">//2.获取连接对象s</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure></li></ul><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><ul><li>步骤：<ol><li>导入jar包：druid-1.0.9.jar(和数据库驱动jar包)</li><li>定义配置文件<ol><li>properties形式</li><li>可以叫任意名称，可以放在任意目录下</li></ol></li><li>加载配置文件.properties</li><li>获取数据库连接池对象：通过工厂类来获取  DruidDataSourceFactory</li><li>获取连接：getConnection</li></ol></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.配置文件</span></span><br><span class="line">        <span class="comment">//3.加载配置文件</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is = DruidDemo1.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line">        <span class="comment">//4.获取连接池对象</span></span><br><span class="line">        DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.获取连接</span></span><br><span class="line">        Connection conn = ds.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义工具类<ol><li>定义一个类 JDBCUtils</li><li>提供方法：<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li></ol></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid连接池的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义成员变量Datasource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>));</span><br><span class="line">            <span class="comment">//获取Datasource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源，此处close为归还连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span></span>&#123;略，同上&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, DataStatement stmt, Connection conn)</span></span>&#123;略，同上&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSourse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><ul><li>Spring框架对JDBC的简单封装。提供JDBCTemplate对象简化JDBC的开发</li><li>步骤<ol><li>导入jar包</li><li>创建JdbcTemplate对象。依赖于数据源的DataSource<ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul></li><li>调用JdbcTemplate的方法完成CRUD操作<ul><li>update()：执行DML语句</li><li>queryForMap()：查询结果，将结果封装为map集合<ul><li>查询的结果集长度只能是1，即只能查找一条结果</li></ul></li><li>queryForList()：查询结果，将结果封装为list集合<ul><li>将每一条记录封装成map集合，再将这些map封装成list集合</li></ul></li><li>query()：查询结果，将结果封装为JavaBean对象<ul><li>参数：RowMapper<ul><li>一般使用BeanPropertyRowMapper，见下方实例</li></ul></li></ul></li><li>queryForObject()：查询结果，将结果封装为对象</li></ul></li></ol></li></ul><p>update方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTemplateDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">        JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        String sql = <span class="string">"update account set balance = 5000 where id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">3</span>);<span class="comment">//将?的值设置为3</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>query方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTemplateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSourse());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试query()方法,自写RowMapper实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">        List&lt;Account&gt; accounts = template.query(sql, <span class="keyword">new</span> RowMapper&lt;Account&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Account ac = <span class="keyword">new</span> Account();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                <span class="keyword">int</span> balance = rs.getInt(<span class="string">"balance"</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">                ac.setBalance(balance);</span><br><span class="line">                ac.setName(name);</span><br><span class="line">                ac.setId(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ac;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(accounts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用写好的BeanProperRowMapper类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from account"</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Account&gt; accounts = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class));</span><br><span class="line"></span><br><span class="line">        System.out.println(accounts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-在Java中操作数据库</title>
      <link href="/JavaWeb-JDBC/"/>
      <url>/JavaWeb-JDBC/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC基础"><a href="#JDBC基础" class="headerlink" title="JDBC基础"></a>JDBC基础</h2><ul><li><p>概念：Java Database Connectivity  Java数据库连接</p><ul><li>本质：官方定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商实现这套接口，提供数据库驱动 jar 包，可以使用（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</li></ul></li><li><p>快速入门：</p><ul><li><p>步骤：</p><ol><li>导入驱动jar包 mysql-connector-java-版本号-bin.jar<ol><li>复制到mysql-connector-java-版本号-bin.jar到项目的libs目录下</li><li>右键 –&gt; Add As Libary</li></ol></li><li>注册驱动</li><li>获取数据库的连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class JDBCdemo1 &#123;</span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        //1.导入驱动jar包</span><br><span class="line">        //2.注册驱动</span><br><span class="line">        Class.forName("com.mysql.jdbc.Driver");</span><br><span class="line">        //3.获取数据库连接对象 Connection</span><br><span class="line">        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db2", "用户名", "密码");</span><br><span class="line">        //4.定义sql语句</span><br><span class="line">        String sql = "sql语句";</span><br><span class="line">        //5.获取执行sql的对象 Statement</span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        //6.执行sql</span><br><span class="line">        int count = stmt.executeUpdate(sql);</span><br><span class="line">        //7.处理结果</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        //8.释放资源</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="详解各个对象"><a href="#详解各个对象" class="headerlink" title="详解各个对象"></a>详解各个对象</h2><h3 id="DriverManager：驱动管理对象"><a href="#DriverManager：驱动管理对象" class="headerlink" title="DriverManager：驱动管理对象"></a>DriverManager：驱动管理对象</h3><ul><li><p>功能：</p><ol><li><p>注册驱动：该执行哪一个jar包</p><ol><li><p>static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。 </p></li><li><p>写代码使用：  Class.forName(“com.mysql.jdbc.Driver”);</p><ul><li>在com.mysql.jdbc.Driver类中存在静态代码块，该代码的内容为调用registerDriver方法，所以方法2较为方便。</li></ul><p><strong>注</strong>：mysql5之后的驱动jar包可以省略注册驱动的步骤</p></li></ol></li><li><p>获取数据库连接</p><ul><li>方法：static Connection getConnection(String url, String user, String password) </li><li>参数：<ul><li>url：指定连接的路径<ul><li>语法：jdbc:mysql://ip地址(域名):端口号/数据库名称</li><li>如果连接的是本机的mysql服务器，并且mysql服务器默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称</li></ul></li><li>user：用户名</li><li>password：密码</li></ul></li></ul></li></ol></li></ul><h3 id="Connection：数据库连接对象"><a href="#Connection：数据库连接对象" class="headerlink" title="Connection：数据库连接对象"></a>Connection：数据库连接对象</h3><ul><li>功能：<ol><li>获取执行sql的对象：<ul><li>Statement createStatement()</li><li>PreparedStatement prepareStatement(String sql)</li></ul></li><li>管理事务：<ul><li>开启事务：void setAutoCommit(boolean autoCommit)   <ul><li>调用该方法，设置参数为false，即开启事务</li></ul></li><li>提交事务：commit()</li><li>回滚事务：rollback()</li></ul></li></ol></li></ul><h3 id="Statement：执行sql的对象"><a href="#Statement：执行sql的对象" class="headerlink" title="Statement：执行sql的对象"></a>Statement：执行sql的对象</h3><ul><li>执行sql<ul><li>boolean execute(String sql)：可以执行任意sql语句（了解）</li><li>int executeUpdate(String sql)：执行DML语句、DDL语句<ul><li>返回值：影响的行数，通过影响的行数判断执行是否成功(若大于 0 则执行成功)，创建表返回值为0</li></ul></li><li>ResultSet executeQuery(String sql)：执行DQL(select)语句</li></ul></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCdemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2.定义SQL</span></span><br><span class="line">            String sql = <span class="string">"insert into account values(null, 'wangwu', 3000)"</span>;</span><br><span class="line">            <span class="comment">//3.获取Connection对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql:///db2"</span>, <span class="string">"root"</span>, <span class="string">"wnghilin"</span>);</span><br><span class="line">            <span class="comment">//4.获取Statement对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.执行Sql</span></span><br><span class="line">            <span class="keyword">int</span> count = stmt.executeUpdate(sql); <span class="comment">//影响的行数</span></span><br><span class="line">            <span class="comment">//6.处理结果</span></span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//7.释放资源</span></span><br><span class="line">            <span class="comment">//注意避免空指针异常</span></span><br><span class="line">            <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ResultSet：结果集对象"><a href="#ResultSet：结果集对象" class="headerlink" title="ResultSet：结果集对象"></a>ResultSet：结果集对象</h3><ul><li><p>功能：封装查找结果</p><ul><li>next()：游标向下移动一行(游标最开始指向如图所示位置)</li></ul><p><img src="https://s2.ax1x.com/2019/08/15/mA4oKx.png" alt></p><ul><li>getXxx(参数)：获取数据<ul><li>Xxx：代表数据    如：int getInt(),   String getString()</li><li>参数：<ul><li>int：代表列的编号，如：getString(1)，获取第一列，不是从0开始</li><li>String：代表列的名称，如：getInt(“id”)</li></ul></li></ul></li></ul></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCdemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2.定义SQL</span></span><br><span class="line">            String sql = <span class="string">"select * from account"</span>;</span><br><span class="line">            <span class="comment">//3.获取Connection对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql:///db2"</span>, <span class="string">"root"</span>, <span class="string">"wnghilin"</span>);</span><br><span class="line">            <span class="comment">//4.获取Statement对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.执行Sql</span></span><br><span class="line">            result = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//6.处理结果</span></span><br><span class="line">            <span class="comment">//6.1让游标向下移动一行</span></span><br><span class="line">            result.next();</span><br><span class="line">            <span class="comment">//6.2获取数据</span></span><br><span class="line">            <span class="keyword">int</span> id = result.getInt(<span class="string">"id"</span>);</span><br><span class="line">            String name = result.getString(<span class="string">"name"</span>);</span><br><span class="line">            <span class="keyword">double</span> balance = result.getDouble(<span class="number">3</span>);</span><br><span class="line">            System.out.println(id + <span class="string">"---"</span> + name + <span class="string">"---"</span> + balance);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//7.释放资源</span></span><br><span class="line">            <span class="comment">//注意避免空指针异常</span></span><br><span class="line">            <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        stmt.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        conn.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PreparedStatement：执行sql的对象"><a href="#PreparedStatement：执行sql的对象" class="headerlink" title="PreparedStatement：执行sql的对象"></a>PreparedStatement：执行sql的对象</h3><ol><li><p>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接，会造成安全问题</p><ol><li><p>输入用户随便，输入密码a’ or ‘a’ = ‘a</p></li><li><p>sql: select * from user where username = ‘随便’ and password = ‘a’ or ‘a’ = ‘a’</p><p>一定返回true</p></li></ol></li><li><p>解决：使用PreparedStatement</p></li><li><p>预编译的SQL：参数使用?作为占位符</p></li><li><p>步骤</p><ol><li>导入驱动jar包 mysql-connector-java-版本号-bin.jar</li><li>注册驱动</li><li>获取数据库的连接对象 Connection</li><li>定义sql<ul><li>注意：sql参数使用?作为占位符，如select * from user where username=? and password = ?;</li></ul></li><li>获取执行sql语句的对象 PreparedStatement<ul><li>Connection.prepareStatement(String sql)</li></ul></li><li>给?赋值<ul><li>方法：setXxx(参数1, 参数2)</li><li>参数1：?的位置，从1开始</li><li>参数2：?的值</li></ul></li><li>执行sql，接受返回结果，不需要再传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li><p><strong>优势</strong>：</p><ul><li>可以防止SQL注入</li><li>效率更高</li></ul></li></ol><hr><h2 id="抽取JDBC工具类：JDBCUtils"><a href="#抽取JDBC工具类：JDBCUtils" class="headerlink" title="抽取JDBC工具类：JDBCUtils"></a>抽取JDBC工具类：JDBCUtils</h2><ul><li>目的：简化书写</li><li>分析：<ul><li>注册驱动抽取</li><li>抽取方法获取连接对象<ul><li>不传递参数，但需要保证类的通用性</li><li>解决方案：配置文件</li></ul></li><li>抽取方法释放资源</li></ul></li></ul><center>示例</center><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只需要读取一次就可以拿到这些值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Properties集合类</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式:ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            String path = res.getPath();</span><br><span class="line">            <span class="comment">//2.加载文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            <span class="comment">//4.注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL简要学习</title>
      <link href="/JavaWeb_MySQL/"/>
      <url>/JavaWeb_MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><hr><ul><li><strong>数据库</strong>(database)：<ul><li>用于存储和管理数据的仓库</li><li>特点：<ol><li>持久化存储数据（数据库就是一个文件系统）</li><li>方便存储和管理数据</li><li>使用同意的方式操作数据库  — SQL</li></ol></li><li>数据库软件：Oracle、MySQL、Microsoft SQL Server、DB2</li></ul></li></ul><hr><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>服务启动：<ul><li>net start mysql：需要管理员权限</li><li>services.msc</li></ul></li><li>登录：<ol><li>mysql -uroot -p<strong>自己的密码</strong>(mysql -uroot -p也可)</li><li>mysql -h<strong>ip</strong> -uroot -p<strong>链接目标的密码</strong>（ip替换为目标的ip地址）</li><li>mysql –host=<strong>ip</strong> –user=root –password=root</li></ol></li><li>退出：<ol><li>exit</li><li>quit</li></ol></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ol><li>安装目录<ul><li>配置文件：my.ini</li></ul></li><li>数据目录<ul><li>数据库：文件夹</li><li>表：文件</li><li>数据：文件中储存的数据</li></ul></li></ol><hr><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>Struct Query Language：结构化查询语言</li><li>操作所有关系型数据库的规则</li><li>每一种数据库操作方式存在不一样的地方，称为“方言”</li></ul><h3 id="通用语法"><a href="#通用语法" class="headerlink" title="通用语法"></a>通用语法</h3><ol><li>SQL语句可以单行或多行书写，以分号结尾</li><li>使用空格和缩进增强语句可读性</li><li>MySQL的SQL语句不区分大小写，但关键字建议用大写</li><li>3种注释：<ul><li>单行注释：<strong>– 注释内容</strong>或 <strong># 注释内容</strong>（注意空格）</li><li>多行注释：<strong>/* 注释 */</strong></li></ul></li></ol><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li><strong>DDL(Data Definition Language)数据定义语言</strong><ul><li>用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</li></ul></li><li><strong>DML(Data Manipulation Language)数据操作语言</strong><ul><li>用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</li></ul></li><li><strong>DQL(Data Query Language)数据查询语言</strong><ul><li>用来查询数据库中表的记录(数据)。关键字：select, where 等</li></ul></li><li><strong>DCL(Data Control Language)数据控制语言</strong>(了解)<ul><li>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</li></ul></li></ol><h3 id="DDL：操作数据库、表"><a href="#DDL：操作数据库、表" class="headerlink" title="DDL：操作数据库、表"></a>DDL：操作数据库、表</h3><ol><li><p>操作数据库：CRUD</p><ol><li><p>C(<strong>Create</strong>)：创建</p><ul><li>创建数据库<ul><li>create database 数据库名;</li><li>create database if not exists 数据库名;– 如果数据库不存在，则创建数据库</li><li>create database 数据库名 character set 字符集名;– 手动指定字符集</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建db4并且将其字符集设置为gbk</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> db4 <span class="built_in">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>R(<strong>Retrieve</strong>)：查询</p><ul><li>查询所有数据库的名称：<ul><li>show databases;</li></ul></li><li>查看某个数据库的字符集，查询某个数据库的创建语句<ul><li>show create database 数据库名称;</li></ul></li></ul></li><li><p>U(<strong>Update</strong>)：修改</p><ul><li>修改数据库的字符集<ul><li>alter database 数据库名称 character set 字符集名称;</li></ul></li></ul></li><li><p>D(<strong>Delete</strong>)：删除</p><ul><li>删除数据库<ul><li>drop database 数据库名称;</li><li>drop database if exisits 数据库名称; – 判断数据库是否存在</li><li><strong>慎用</strong></li></ul></li></ul></li><li><p>使用数据库</p><ul><li>查询当前正在使用的数据库名称<ul><li>select database();</li></ul></li><li>使用数据库<ul><li>use 数据库名称;</li></ul></li></ul></li></ol><ol start="2"><li><p>操作表：CRUD</p><ol><li><p>C(<strong>Create</strong>)：创建</p><ul><li><p>数据类型：</p><ul><li>int：整数类型<ul><li>age int;</li></ul></li><li>double：小数类型<ul><li>score double(5, 2); – 一共5位，保留两位小数</li></ul></li><li>date：日期，只包含年月日，yyyy-MM-dd</li><li>datetime：日期，包含年月日时分秒，yyyy-MM-dd HH:mm:ss</li><li>timestamp：事件错类型，包含年月日时分秒，yyyy-MM-dd HH:mm:ss<ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间自动赋值</li></ul></li><li>varchar：字符串类型<ul><li>name varchar(20); – 姓名最大20个字符</li><li>zhangsan 8个字符， 张三 2个字符</li></ul></li></ul></li><li><p>创建表</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名<span class="number">1</span> 数据类型<span class="number">1</span>,</span><br><span class="line">    列名<span class="number">2</span> 数据类型<span class="number">2</span>,</span><br><span class="line">    ......</span><br><span class="line">    列名n 数据类型n</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 注意最后一列不用加逗号(,)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>复制表：create table 表名 like 被复制表名;</p></li></ul></li><li><p>R(<strong>Retrieve</strong>)：查询</p><ul><li>查询某个数据库中所有的表名称<ul><li>show tables;</li></ul></li><li>查询表结构<ul><li>desc 表名;</li></ul></li></ul></li><li><p>U(<strong>Update</strong>)：修改</p><ul><li>修改表名<ul><li>alter table 表名 rename to 新的表名;</li></ul></li><li>修改字符集<ul><li>show create table 表名;– 查看表的字符集</li><li>alter table 表名 character set 字符集;</li></ul></li><li>添加一列<ul><li>alter table 表名 add 列名 数据类型;</li></ul></li><li>修改列名称 类型<ul><li>alter table 表名 change 列名 新列名 新数据类型;</li><li>alter table 表名 modify 列名 新数据类型;</li></ul></li><li>删除列<ul><li>alter table 表名 drop 列名;</li></ul></li></ul></li><li><p>D(<strong>Delete</strong>)：删除</p><ul><li>drop table if exists 表名;</li><li>drop table 表名;</li></ul></li></ol></li></ol><h3 id="DML：增删改标中数据"><a href="#DML：增删改标中数据" class="headerlink" title="DML：增删改标中数据"></a>DML：增删改标中数据</h3><ol><li><p>添加数据</p><ul><li><p>语法：</p><ul><li>insert into 表名(列名1, 列名2, …… 列名n) values(值1, 值2, …… 值n);</li></ul></li><li><p>注意：</p><ul><li><p>列名和值应该一一对应</p></li><li><p>如果表名后，不定义列名，则默认给所有列添加值</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INEINSERT INTO stu <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">'秀吉'</span>,<span class="number">18</span>,<span class="number">99.2</span>,<span class="string">'2000-08-23'</span>,<span class="literal">NULL</span>,<span class="string">"秀吉"</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>出了数字类型，其他类型需要’ ‘或” “引起来</p></li></ul></li></ul></li><li><p>删除数据</p><ul><li><p>语法：</p><ul><li><p>delete from 表名 [where 条件];</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> stu <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>注意</strong>：</p><ul><li>如果不加条件，则删除表中所有记录</li><li>truncate table 表名; – 删除表，再创建一个一模一样的空表，建议用这种方式删除全部记录</li><li>delete from 表名; – 执行次数为记录条数，效率较低</li></ul></li></ul></li><li><p>修改数据</p><ul><li>语法：<ul><li>update 表名 set 列名1 = 值1, 列名2 = 值2, … [where 条件];</li></ul></li><li><strong>注意</strong><ul><li>如果不加条件，则修改表中所有数据</li></ul></li></ul></li></ol><h3 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h3><ol><li>语法：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">分组字段</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">分组之后的条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">排序</span><br><span class="line"><span class="keyword">limit</span></span><br><span class="line">分页限定</span><br></pre></td></tr></table></figure><ol start="2"><li><p>基础查询</p><ol><li><p>多个字段的查询</p><ul><li>select 字段名1, 字段名2… from 表名;</li><li>可用*来替代所有字段</li></ul></li><li><p>去除重复</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 去除重复的结果集</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> address <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>计算列</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算math和english两列的和</span></span><br><span class="line"><span class="comment">-- 如果有null参加运算，则结果仍为null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, math, english, math + english <span class="keyword">FROM</span> student3;</span><br><span class="line"><span class="comment">-- 将NULL替换为0</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, math, <span class="keyword">IFNULL</span>(english), math + english <span class="keyword">FROM</span> student3;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>起别名</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, math, english, math + english <span class="keyword">AS</span> 总分 <span class="keyword">FROM</span> student3;</span><br><span class="line"><span class="comment">-- 简化形式</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, math 数学, english 英语, math + english 总分 <span class="keyword">FROM</span> student3;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>条件查询</p><ol><li><p>where后跟条件</p></li><li><p>运算符</p><ul><li>“&gt;”, “&lt;”, “&lt;=”, “&gt;=”, “=”, “&lt;&gt;”</li><li>BETWEEN…AND</li><li>IN（集合）</li><li>LIKE<ul><li>占位符：<ul><li>_：单个任意字符</li><li>%：多个任意字符</li></ul></li></ul></li><li>IS NULL</li><li>and 或 &amp;&amp;</li><li>or 或 ||</li><li>not 或 !</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄在20到30之间的（包含20和30）</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 查询英语成绩为空</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">-- 查询英语成绩不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>模糊查询</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有姓王的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'王%'</span>;</span><br><span class="line"><span class="comment">-- 查询名字有三个字的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'___'</span>;</span><br><span class="line"><span class="comment">-- 查询姓名中有“国”字的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student3 <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'%国%'</span>;</span><br></pre></td></tr></table></figure></li><li></li></ul></li></ol><ul><li><p>排序查询</p><ul><li><p>语法：</p><ul><li>order by 排序字段1 排序方式1, 排序字段2 排序方式2, …;</li><li>先按字段1排序，如有相同，按字段2排序，以此类推。</li></ul></li><li><p>排序方式</p><ul><li><p>ASC：升序，默认</p></li><li><p>DESC：降序</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> stu <span class="keyword">ORDER</span> <span class="keyword">BY</span> math <span class="keyword">ASC</span>, english <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>聚合函数：将一列数据作为一个整体，进行纵向的计算。</p><ol><li>count：计算个数</li><li>max：计算最大值</li><li>min：计算最小值</li><li>sum：计算和</li><li>avg：计算平均值<ul><li><strong>注</strong>：所有聚合函数会排除为NULL的数据</li></ul></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(math) <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>排除NULL的解决方案</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">IFNULL</span>(english,<span class="number">0</span>)) <span class="keyword">FROM</span> student;<span class="comment">-- 把NULL替换成0，以便统计人数等（不会修改原数据）</span></span><br><span class="line"><span class="comment">-- 或选择非空的列进行计算</span></span><br></pre></td></tr></table></figure></li><li><p>分组查询：</p><ul><li>语法：group by 分组字段;</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照性别分组，并分别求数学的平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> sex, <span class="keyword">AVG</span>(math) <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"><span class="comment">-- 加入分组限定条件</span></span><br><span class="line"><span class="keyword">SELECT</span> sex, <span class="keyword">AVG</span>(math), <span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"><span class="keyword">SELECT</span> sex, <span class="keyword">AVG</span>(math), <span class="keyword">COUNT</span>(<span class="keyword">id</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math &gt; <span class="number">60</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(<span class="keyword">id</span>)&gt;<span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：<ol><li>分组之后查询的字段：分组字段，聚合函数</li><li>where 和 having的区别<ol><li>where在分组前限定，如不满足条件，则不参与分组；having在分组后进行限定，如果不满足结果，则不会被查询出来。</li><li>where后不可以跟聚合函数，having可以</li></ol></li></ol></li></ul></li><li><p>分页查询：</p><ul><li>语法：limit 开始的索引, 每页查询的条数;</li><li>开始的索引 = （当前的页码 - 1） *  每页显示的条数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 每一页显示3条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">3</span>; <span class="comment">-- 第一页</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LIMIT</span> <span class="number">3</span>,<span class="number">3</span>; <span class="comment">-- 第二页</span></span><br></pre></td></tr></table></figure><ul><li>分页操作是一个MySQL“ 方言 ” </li></ul></li></ul><h3 id="DCL：管理用户-amp-授权"><a href="#DCL：管理用户-amp-授权" class="headerlink" title="DCL：管理用户&amp;授权"></a>DCL：管理用户&amp;授权</h3><ol><li><p>管理用户</p><ol><li><p>添加用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">USER</span> <span class="keyword">SET</span> <span class="keyword">PASSWORD</span> =  <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>) <span class="keyword">WHERE</span> <span class="keyword">USER</span> = <span class="string">'用户名'</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span> = <span class="keyword">PASSWORD</span>(<span class="string">'新密码'</span>);</span><br></pre></td></tr></table></figure><ul><li>忘记root密码<ol><li>管理员运行cmd –&gt; net stop mysql</li><li>使用无验证方式启动mysql：mysqld –skip-grant-tables;</li><li>修改root密码</li><li>在任务管理器中关闭mysqld.exe进程</li></ol></li></ul></li><li><p>查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 切换到mysql数据库</span></span><br><span class="line"><span class="keyword">USE</span> mysql;</span><br><span class="line"><span class="comment">-- 查询user表</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：% 表示可以在任意主机使用用户登录</li></ul></li></ol></li></ol><ol start="2"><li><p>权限管理</p><ol><li><p>查询权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GRANTS</span> <span class="keyword">FOR</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br><span class="line"><span class="comment">-- 授予所有权限，在任意数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="3"><li><p>撤销权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">'用户名'</span>@<span class="string">'主机名'</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul><li><p><strong>概念</strong>：对标重的数据进行限定，保证数据的正确性、有效性和完整性。</p></li><li><p><strong>分类</strong>:</p><ol><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ol></li><li><p><strong>非空约束 not null</strong>：</p><ul><li>创建表时添加约束：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="comment">-- name 为非空约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>创建表后添加约束：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><ul><li>删除非空约束 <a name="DeleteNotNULL" href></a></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>唯一约束：unique</strong></p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span>, </span><br><span class="line">phone_number <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> phone_number <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>;</span><br><span class="line"><span class="comment">-- 若已有重复数据，则无法添加唯一约束</span></span><br><span class="line"><span class="comment">-- mysql中 唯一约束限定的列的值可以有多个null</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> <span class="keyword">INDEX</span> phone_number;</span><br><span class="line"><span class="comment">-- 注意，与非空约束方法不同</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>主键约束：primary key</strong></p><ul><li><p>基本概念：</p><ol><li>含义：非空且唯一</li><li>一张表只有一个字段为主键</li><li>主键就是表中记录的唯一标识</li></ol></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) </span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">MODIFY</span> <span class="keyword">id</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line"><span class="comment">-- 有重复或空则无法添加主键约束</span></span><br></pre></td></tr></table></figure></li><li><p>删除</p><ul><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>自动增长：</p><ul><li>概念：如果某一列是数值类型，使用 auto_increment 可以完成值的自动增长</li><li>创建表时，添加主键乐数，并完成主键自增长</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT, </span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 之后不用输入id也可实现id的自增长，但也可手动输入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span>(<span class="literal">NULL</span>, <span class="string">'ccc'</span>);</span><br></pre></td></tr></table></figure><ul><li>删除：与非空约束方法相同，<a id="gotoMoreDeleteNotNULL" href="#DeleteNotNULL">非空约束的删除</a></li></ul></li></ul></li><li><p><strong>外键约束：foreign key</strong>，让表与表产生关系，从而保证数据的正确性</p><ol><li><p>在创建表时可以添加外键</p><ul><li><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    ......</span><br><span class="line">    外键列,<span class="comment">-- 注意这个逗号</span></span><br><span class="line">    <span class="keyword">constraint</span> 外键名称 <span class="keyword">foreign</span> <span class="keyword">key</span> (外键列名称) <span class="keyword">references</span> 主表名称(主表列的名称)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">age <span class="built_in">INT</span>,</span><br><span class="line">dep_id <span class="built_in">INT</span>, <span class="comment">-- 外键对应主表的主键</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> emp_dept_fk <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (dep_id) <span class="keyword">REFERENCES</span> department(<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> emp_dept_fk;</span><br></pre></td></tr></table></figure></li><li><p>创建表后创建外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (外键列名称) <span class="keyword">REFERENCES</span> 主表名称(主表列的名称);</span><br></pre></td></tr></table></figure></li><li><p>级联操作：</p><ul><li><p>设置级联更新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (外键列名称) <span class="keyword">REFERENCES</span> 主表名称(主表列的名称) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure></li><li><p>设置级联删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 二者可以同时存在</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (外键列名称) <span class="keyword">REFERENCES</span> 主表名称(主表列的名称) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><hr><h2 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h2><h3 id="多表之间的关系"><a href="#多表之间的关系" class="headerlink" title="多表之间的关系"></a>多表之间的关系</h3><ol><li>一对一<ul><li>一个人只有一张身份证，一个身份证只能对应一个人</li></ul></li><li>一对多（多对一）<ul><li>一个部门有多个员工，一个员工只属于一个部门</li></ul></li><li>多对多<ul><li>一个学生可以选择很多门课程，一个课程也可以被很多学生选择</li></ul></li></ol><ul><li>多表关系的实现<ul><li>一对多（多对一）：<ul><li>在多的一方建立外键，指向一的一方的主键</li></ul></li><li>多对多：<ul><li>需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键。</li></ul></li><li>一对一：<ul><li>在任意一方添加唯一外键指向另一方的主键</li></ul></li></ul></li></ul><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><blockquote><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</p></blockquote><ul><li>分类<ol><li>第一范式(1NF)：每一列都是不可分割的原子数据项</li><li>第二范式(2NF)：在1NF基础上，非码属性必须完全依赖于候选码（在1NF基础上<strong>消除</strong>非主属性对主码的<strong>部分函数依赖</strong>）<ul><li>函数依赖：A–&gt;B，通过A的属性值，可以确定唯一B属性的值，则称B依赖于A。<ul><li>如：学号–&gt;姓名  （学号，课程名称）–&gt; 分数</li></ul></li><li>完全函数依赖：A–&gt;B，如果A是一个<strong>属性组</strong>，则B属性值的确定需要依赖于A属性组中<strong>所有</strong>的属性值<ul><li>如：（学号，课程名称）–&gt; 分数</li></ul></li><li>部分函数依赖：A–&gt;B，如果A 是一个<strong>属性组</strong>，则B属性值的确定只需要依赖于A属性值中<strong>某一些</strong>值即可<ul><li>如：（学号，课程名称）–&gt; 姓名</li></ul></li><li>传递函数依赖：A–&gt;B，B–C，称C传递依赖于A</li><li>码：如果在一张表中，一个属性或属性组，被其他<strong>所有属性</strong>所完全依赖，则称这个属性（属性组）为该表的码<ul><li>主属性：码属性组中的所有属性</li><li>非主属性：除去码属性组的属性</li></ul></li></ul></li><li>第三范式(3NF)：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</li></ol></li></ul><hr><h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><ol><li>命令行<ul><li>语法：<ul><li>备份：mysqldump -u用户名 -p密码 数据库的名称 &gt; 保存的路径</li><li>还原：<ol><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行文件：source 文件路径</li></ol></li></ul></li></ul></li><li>图形化工具</li></ol><hr><h2 id="MySQL多表-amp-事务"><a href="#MySQL多表-amp-事务" class="headerlink" title="MySQL多表&amp;事务"></a>MySQL多表&amp;事务</h2><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ul><li><p>查询语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">列名列表</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表名列表</span><br><span class="line">where......</span><br><span class="line"><span class="comment">-- 查询出的结果为多个表的笛卡儿积</span></span><br></pre></td></tr></table></figure></li><li><p>分类</p><ol><li><p>内连接查询</p><ul><li><p>隐式内连接：使用where条件消除无用数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp, department <span class="keyword">WHERE</span> emp.id = department.id;</span><br><span class="line"><span class="comment">-- 或者使用别名</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">t1.name,</span><br><span class="line">t1.gender,</span><br><span class="line">t2.name</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">emp t1, department t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">t1.id = t2.id;</span><br></pre></td></tr></table></figure></li><li><p>显式内连接：</p><ul><li>select 字段列表 from 表名1 inner join 表名2 on 条件;</li><li>select 字段列表 from 表名1 join 表名2 on 条件;</li></ul></li><li><p>注意事项</p><ul><li>从哪些表查找数据、条件是什么、查询哪些字段</li></ul></li></ul></li><li><p>外连接查询</p><ul><li>左外连接<ul><li>语法：select 字段列表 from 表1 left [outer] join 表2 on 条件;</li><li>查询的是<strong>左表</strong>所有数据以及其交集部分</li></ul></li><li>右外连接<ul><li>语法：select 字段列表 from 表1 right [outer] join 表2 on 条件;</li><li>查询的是<strong>右表</strong>所有数据以及其交集部分</li></ul></li></ul></li><li><p>子查询</p><ul><li><p>概念：查询中嵌套查询，称嵌套查询为子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例子：查找工资最高的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`salary`</span>=(<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure></li><li><p>不同情况</p><ol><li><p>结果是<strong>单行单列</strong></p><ul><li>子查询可以作为条件，使用运算符判断，如上方例子</li><li>$&gt;,&lt;,&gt;=,&lt;=,=$，</li></ul></li><li><p>结果是<strong>多行单列</strong></p><ul><li><p>子查询可以作为条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例子：查询财务部和市场部的所有人员</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'财务部'</span> <span class="keyword">OR</span> <span class="keyword">NAME</span> = <span class="string">'市场部'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>结果是<strong>多行多列</strong></p><ul><li><p>子查询可以作为一张虚拟表来进行表的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> </span><br><span class="line">dept t1, (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.<span class="string">`join_date`</span> &gt; <span class="string">'2011-11-11'</span>) t2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">t1.id = t2.dept_id;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul></li></ol></li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ol><li><p>基本介绍</p><ul><li><p>如果一个包含多个步骤的<strong>业务操作</strong>，被<strong>事务</strong>管理，那么这些操作要么同时成功，要么同时失败</p></li><li><p>操作：</p><ol><li>开启事务（start transaction）</li><li>回滚（rollback）</li><li>提交（commit）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">balance <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span> (<span class="keyword">NAME</span>, balance) <span class="keyword">VALUES</span> (<span class="string">'zhangsan'</span>, <span class="number">1000</span>), (<span class="string">'lisi'</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="comment">-- 张三给李四转账500元</span></span><br><span class="line"><span class="comment">-- 张三账户-500</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance - <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'zhangsan'</span>;</span><br><span class="line"><span class="comment">-- 李四账户+500</span></span><br><span class="line">这里出错了......</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">SET</span> balance = balance + <span class="number">500</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span> = <span class="string">'lisi'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 发现执行没有问题，提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 发现出问题，回滚事务</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>MySQL数据库总事务默认自动提交</p><ul><li><p>一条DML(增删改)语句，会自动提交一次</p></li><li><p>事务提交的方式：</p><ul><li>自动提交</li><li>手动提交：<ul><li>需要先开启事务</li></ul></li></ul></li><li><p>修改默认提交方式</p><ul><li><p>查看默认提交方式：</p><p>SELECT @@autocommit; – 1代表自动提交，0代表手动提交</p></li><li><p>修改 ：SET @@autocommit = 0;</p></li></ul></li></ul></li></ol></li></ul></li><li><p>四大特征</p><ul><li><strong>原子性</strong>：是不可分割的最小操作单位，要么同时成功，要么同时失败。</li><li><strong>持久性</strong>：当事务提交或回滚后，数据库会持久化地保存数据。</li><li><strong>隔离性</strong>：多个事务之间，相互独立。</li><li><strong>一致性</strong>：事务操作前后，数据总量不变。</li></ul></li><li><p>事务隔离级别（了解）</p><ul><li><p>多个事务操作同一批数据，可能出现问题。可通过设置不同隔离级别来解决这些问题。</p></li><li><p>问题</p><ol><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复读（虚读）：在同一个食物中，两次读取到的数据不一样</li><li>幻读：一个事务操作（DML）数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改</li></ol></li><li><p>隔离级别</p><ol><li>read uncommitted<ul><li>产生问题：脏读、不可重复读、幻读</li></ul></li><li>read committed（Oracle默认）<ul><li>产生问题：不可重复读、幻读</li></ul></li><li>repeatable read（MySQL默认）<ul><li>产生问题：幻读</li></ul></li><li>serializable：串行化<ul><li>可以解决所有问题</li></ul></li></ol><p><strong>注</strong>：隔离级别从小到大安全性越来越高，效率越来越低</p><ul><li><p>查询隔离级别：SELECT @@tx_isolation;</p></li><li><p>设置隔离级别：set global transaction isolation level 级别字符串;（需要重新打开生效）</p></li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript简要学习</title>
      <link href="/JavaWeb_Javascript%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/JavaWeb_Javascript%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript：</p><ul><li>是<strong>基于对象</strong>和<strong>事件驱动</strong>的语言，应用于<strong>客户端</strong><ul><li>基于对象：<ul><li>提供了很多对象，可直接使用</li></ul></li><li>事件驱动：<ul><li>可以实现动态效果</li></ul></li><li>客户端：指浏览器</li></ul></li><li>特点：<ul><li>交互性<ul><li>信息的动态交互</li></ul></li><li>安全性：<ul><li>js不能访问本地磁盘的文件</li></ul></li><li>跨平台性：<ul><li>通过浏览器实现</li></ul></li></ul></li><li>组成：<ul><li>（1）<strong>ECMAScript</strong><ul><li>ECMA ：欧洲计算机协会</li><li>由ECMA组织指定的js语法和语句</li></ul></li><li>（2）<strong>BOM</strong><ul><li>browser object model 浏览器对象模型</li></ul></li><li>（3）<strong>DOM</strong><ul><li>document object model 文档对象模型</li></ul></li></ul></li></ul><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="JS和HTML的结合方式"><a href="#JS和HTML的结合方式" class="headerlink" title="JS和HTML的结合方式"></a>JS和HTML的结合方式</h3><ul><li><p>（1）使用script标签</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>（2）引入外部的js文件</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">srt</span>=<span class="string">"*.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>script标签放置：可以放在任何位置，但html是从上到下解析，所以最好放在后面，否则JavaScript可能获取不到input等标签里面的值。</p></li></ul><h3 id="原始类型和声明变量"><a href="#原始类型和声明变量" class="headerlink" title="原始类型和声明变量"></a>原始类型和声明变量</h3><ul><li><p>js是弱类型语言</p></li><li><p>定义变量 使用关键字var</p></li><li><p>原始类型：</p><ul><li>string：字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li>number：数字类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><ul><li>boolean：true or false</li><li>null：获取对象的引用，null表示对象引用为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>undefined：定义一个变量，没有赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aa;</span><br></pre></td></tr></table></figure></li><li><p>typeof()：可以查看变量的类型</p></li></ul><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul><li><p>种类：</p><ul><li><p>if判断</p></li><li><p>switch语句：js所有类型都支持</p></li><li><p>循环 for while do-while</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>与java类似</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>与java中不同的：<ul><li>js中不区分整数和小数，123 / 1000 == 0.123</li><li>字符串相加和相减：<ul><li>“456” + 1 == “4561”（相加做字符串连接）</li><li>“456” - 1 == “455”（相减进行真正的相减）</li><li>“abc” - 1会提示NaN表示不是一个数字</li></ul></li><li>boolean操作：<ul><li>true + 1 == 2</li><li>false + 1 == 1</li><li>即true是1，false是0</li></ul></li><li>“ === ”和“ == ”：<ul><li>==：值是否相等</li><li>===：值和类型是否相等</li></ul></li><li>补充：document.write()：<ul><li>直接向页面写入内容，可以写入变量，固定值，html代码</li></ul></li></ul></li></ul><p><a name="Array" href></a></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>定义：</p><ul><li><p>（1）var[] arr = {1, 2, 3}; //数组可以存放不同的数据类型</p></li><li><p>（2）使用内置Array对象</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>); <span class="comment">//建立有5个元素的数组</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">//创建数组&#123;3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>属性：</p><ul><li>（1）length：arr.length;</li><li><a id="gotoMoreArray" href="#LearnMoreArray">深入学习数组</a></li></ul></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>定义函数：</p><ul><li>（1）使用function关键字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 方法名(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    （返回值）;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数列表直接写参数名称，不用写var</span></span><br></pre></td></tr></table></figure><ul><li>（2）匿名函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体和返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（3）使用内置对象Function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"参数列表"</span>, <span class="string">"方法体和返回值"</span>);</span><br><span class="line"><span class="comment">//使用较少</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><ul><li><strong>全局变量</strong>：在script标签里定义一个变量，其在<strong>整个页面</strong>的js部分都可使用<ul><li>方法内外，在另一个script标签使用</li></ul></li><li><strong>局部变量</strong>：在方法内部定义一个变量，只能在方法内部使用</li></ul><p><a name="Reload" href></a></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><ul><li>定义：函数名相同，函数参数列表不同(参数个数和参数类型)，根据参数不同去执行不同操作，但在js中，同一个作用域，出现两个名字一样的函数，后面的会覆盖前面的。故<strong>JavaScript没有真正意义上的重载</strong>。</li></ul><hr><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li><strong>创建</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>属性</strong>：</p><ul><li><strong>length</strong>：字符串的长度</li></ul></li><li><p><strong>方法</strong>：</p><ul><li><p>（1）与HTML相关：</p><ul><li><strong>bold</strong>：实现加粗</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(str.bold());</span><br></pre></td></tr></table></figure><ul><li><strong>fontcolor</strong>：修改字符串的颜色</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str2.fontcolor(<span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>fontsize</strong>：修改字体大小</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str3.fontsize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>link</strong>：将字符串显示为超链接</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str4.link(<span class="string">"wnghilin.top"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>sub</strong>、<strong>sup</strong>：将字符串显示为上下标</li></ul></li><li><p>（2）与Java类似：</p><ul><li><strong>concat</strong>：连接两个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"gds"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str1.concat(str2));</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">abcgds</span><br></pre></td></tr></table></figure><ul><li><strong>charAt</strong>：返回指定位置的字符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = <span class="string">"abcdefg"</span>;</span><br><span class="line">str3.charAt(<span class="number">0</span>);<span class="comment">//返回a</span></span><br><span class="line">str3.charAt(<span class="number">20</span>);<span class="comment">//返回空字符串</span></span><br></pre></td></tr></table></figure><ul><li><strong>indexOf</strong>：返回字符串位置，若不存在，返回-1</li><li><strong>split</strong>：切分字符串，分为数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str4 = <span class="string">"a-b-c-d"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = str4.split(<span class="string">"-"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>replace</strong>：替换字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str6.replace(<span class="string">"a"</span>, <span class="string">"6"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>substr</strong> 和 <strong>substring</strong>：截取子字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str5 = <span class="string">"abcdefghuiop"</span>;</span><br><span class="line">str5.substr(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">//fgh 从5开始向后开始截取3个字符</span></span><br><span class="line">str5.substring(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">//de 从3位开始，第5位结束但不包含第5位</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><a name="LearnMoreArray" href></a></p><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li><p>创建：<a id="goArray" href="#Array">链接</a></p></li><li><p>属性：</p><ul><li>length：数组的长度</li></ul></li><li><p>方法：</p><ul><li><strong>concat</strong>：数组拼接，用法类似字符串</li><li><strong>join</strong>：根据指定字符分隔数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr); <span class="comment">//输出：a, b, c</span></span><br><span class="line"><span class="built_in">document</span>.write(arr.join(<span class="string">"-"</span>)); <span class="comment">//输出：a-b-c</span></span><br></pre></td></tr></table></figure><ul><li><strong>push</strong>：向数组末尾添加一个或多个新的元素，并返回数组新的长度</li></ul><p><strong>&lt;注&gt;</strong>如果向末尾添加的是数组，会将整个数组看作一个元素将其加入到原有数组中</p><ul><li><strong>pop</strong>：删除并返回最后一个元素</li><li><strong>reverse</strong>：反转数组</li></ul></li></ul><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><ul><li>获取当前时间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date; <span class="comment">//Fri Aug 02 2019 15:51:13 GMT+0800 (中国标准时间)</span></span><br><span class="line">date.toLocaleString();<span class="comment">// 2019/8/2 下午3:53:45</span></span><br></pre></td></tr></table></figure><ul><li>获取当前年月日和星期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date.getFullYear(); <span class="comment">//2019</span></span><br><span class="line">date.getMonth(); <span class="comment">//7，因为返回结果是0-11月，需要再加一返回真实月数</span></span><br><span class="line">date.getDate(); <span class="comment">//2</span></span><br><span class="line">date.getDay(); <span class="comment">//5，返回0-6，星期日是0</span></span><br></pre></td></tr></table></figure><ul><li>获取当前时分秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date.getHours(); <span class="comment">//16</span></span><br><span class="line">date.getMinutes(); <span class="comment">//5</span></span><br><span class="line">date.getSeconds(); <span class="comment">//36</span></span><br></pre></td></tr></table></figure><ul><li>获取毫秒数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.getTime(); <span class="comment">//1564733221660，1970年1月1日至今的毫秒数</span></span><br></pre></td></tr></table></figure><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>都是静态方法，只能通过<strong>类名</strong>+<strong>方法</strong>调用</p><ul><li><p>方法：</p><ul><li><strong>cell</strong>：上舍入</li><li><strong>floor</strong>：下舍入</li><li><strong>round</strong>：四舍五入</li><li><strong>random</strong>：产生0.0到1.0之间的随机数</li></ul></li><li><p>属性</p><ul><li><strong>PI</strong>：圆周率</li><li><strong>E</strong>：自然对数的底数</li></ul></li></ul><h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><ul><li><p>不属于任何对象，致谢写名称使用</p><ul><li><strong>eval</strong>：如果字符串是js代码，使用该方法直接执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"alert(1234)"</span>;</span><br><span class="line"><span class="built_in">eval</span>(str); <span class="comment">//执行alert(1234)</span></span><br></pre></td></tr></table></figure><ul><li><strong>encodeURI</strong> 和 <strong>decodeURI</strong>：对字符进行编码和解码<ul><li>将中文先编码再解码可以有效防止乱码</li></ul></li><li><strong>encodeURIComponent</strong> 和 <strong>decodeURIComponent</strong>：<ul><li>与上面只有编码字符多少的差别</li></ul></li><li><strong>isNaN</strong>：判断当前字符串是否是数字，若是，返回false</li><li><strong>parseInt</strong>：解析字符串并返回一个整数</li></ul></li></ul><h3 id="重载-1"><a href="#重载-1" class="headerlink" title="重载"></a>重载</h3><p>有没有重载？<a id="goReload" href="#Reload">链接</a></p><ul><li>重载可模拟实现<ul><li>使用arguments对象实现，这个方法的缺点是麻烦。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'一个参数'</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'两个参数'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数通过arguments[0]...来使用</span></span><br></pre></td></tr></table></figure><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li><p><strong>BOM</strong>：浏览器对象模型</p></li><li><p>有哪些对象：</p><ul><li><p>navigator：可以货期客户机的信息（浏览器的信息）</p><ul><li>navigator.appName; //显示浏览器的名称</li></ul></li><li><p>screen：可返回屏幕信息</p><ul><li>screen.width; //返回屏幕的宽</li><li>screen.height; //返回屏幕的高</li></ul></li><li><p>location：请求url地址</p><ul><li><p>reload()  重新加载当前文档，刷新</p></li><li><p>href属性</p><ul><li><p>获取请求的url地址，即浏览器地址栏的地址</p></li><li><p>设置url地址</p><ul><li>可以设置页面按钮的事件，将其跳转到另外一个页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"跳转"</span> <span class="attr">onclick</span>=<span class="string">"href1()"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">href1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          location.href=<span class="string">"http://www.baidu.com"</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>history：请求url的历史记录</p><ul><li>可以通过其实现浏览器前进后退功能<ul><li>history.back(); //到上一个页面</li><li>history.forward(); //到下一个页面</li></ul></li><li>history.go(1); //到下一个页面<ul><li>history.go(-1); //到下一个页面</li></ul></li></ul></li><li><p><strong>window</strong></p></li></ul></li></ul><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><ul><li><p>窗口对象</p></li><li><p><strong>顶层对象</strong>（所用的bom对象都是在window对象的里面操作的）</p></li></ul><ul><li><p>方法：</p><ul><li><p>window.alert()：弹出一个消息提示框</p><ul><li>简写alert();</li></ul></li><li><p>confirm()：确认提示框，参数为提示内容</p><ul><li>返回值：若点击确认，则返回true，否则返回false</li></ul></li><li><p>prompt(text, defaultText)：输入对话框</p><ul><li>text为提示输入，defaultText为默认输入内容</li></ul></li><li><p><strong>open(URL,name,features,replace)</strong>：打开一个新窗口，并返回窗口对象</p><ul><li><p><strong>URL</strong>： 一个可选的字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者它的值是空字符串，那么新窗口就不会显示任何文档。</p></li><li><p><strong>name</strong>： 一个可选的字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 <a> 和 <form> 的属性 </form></a></p></li><li><p>*<em>target *</em>的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</p></li><li><p><strong>features</strong>： 一个可选的字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在窗口特征这个表格中，我们对该字符串的格式进行了详细的说明。</p></li><li><p><strong>replace</strong>： 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：</p><pre><code>**true - URL**： 替换浏览历史中的当前条目。</code></pre><p>​             <strong>false - URL：</strong> 在浏览历史中创建新的条目。</p></li></ul></li><li><p>close()：关闭窗口，浏览器兼容性较差</p><ul><li>关闭调用该方法的窗口</li></ul></li><li><p><strong>定时器有关方法</strong>：</p><ul><li>setInterval(code, millisec)：每millisec毫秒执行一次code（js代码或方法对象）代码<ul><li>setInterval(“fun();”, 3000);</li><li>setInterval(fun, 3000);</li></ul></li><li>setTimeout(code, millisec)：在millisec毫秒后执行一次code代码，且只会执行一次</li><li>clearInterval(setInterval的返回值)：清除setInterval设置的定时器</li><li>clearTimeout(setTimeout的返回值)：清除setTimeout设置的定时器</li></ul></li></ul></li></ul><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><ul><li><p>DOM：文档对象模型</p><ul><li><p>文档：超文本标记文档</p></li><li><p>可以用DOM提供的对象，对标记型文档进行操作，但需要把标记型文档里的所有内容封装成对象</p></li><li><p>用DOM解析html：根据html层级结构，在内存中分配一个树形结构，需要把html中的每部分封装成对象</p><p><img src="https://www.w3school.com.cn/i/ct_htmltree.gif" alt></p><ul><li><p><strong>注意每个标签节点后还有文本节点</strong></p></li><li><p><strong>Document对象</strong>：整个html文档</p></li><li><p><strong>Element对象</strong>：标签对象</p></li><li><p><strong>Attribute对象</strong>：属性对象</p></li><li><p><strong>Text对象</strong>：文本对象</p></li><li><p><strong>Comment对象</strong>：注释对象</p></li><li><p>Node节点对象：是这些对象的父对象</p></li></ul></li></ul></li></ul><h4 id="核心DOM模型"><a href="#核心DOM模型" class="headerlink" title="核心DOM模型"></a>核心DOM模型</h4><ul><li><p><strong>Document对象</strong>：整个html文档</p><ol><li>创建（获取）<ul><li>window.document(window可省略)</li></ul></li><li>方法<ol><li>获取Element对象<ol><li>getElementById()  查找具有指定的唯一 ID 的元素</li><li>getElementsByTagName()  根据元素名称获取元素对象（多个），返回值是数组</li><li>getElementsByClassName()  根据Class属性值获取元素对象们，返回值是数组</li><li>getElementsByName()  根据name属性值获取元素对象们</li></ol></li><li>创建其他DOM对象<ol><li>createAttribute(name)</li><li>createComment()</li><li>createElement()</li><li>createTextNode()</li></ol></li></ol></li><li>属性</li></ol></li><li><p><strong>Element对象</strong>：标签对象</p><ul><li>通过Document对象获取</li><li>方法<ul><li>removeAttribute()：删除属性</li><li>setAttribute()：设置属性</li></ul></li></ul></li></ul><ul><li><p>Node：节点对象</p><ul><li>特点：所有DOM对象都可以被认为是节点</li><li>方法：<ul><li>CRUD DOM树：<ul><li>appendChild()：项节点的子节点列表的结尾添加新的子节点</li><li>removeChild()：删除（并返回）当前节点指定的子节点</li><li>replaceChild()：用新节点替换一个子节点</li></ul></li></ul></li><li>属性：<ul><li>parentNode：返回当前节点的父节点</li></ul></li></ul></li></ul><h4 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h4><ol><li>标签体的设置和获取：innnerHTML</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTMLDOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">        div</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//div中替换一个文本输入框</span></span></span><br><span class="line"><span class="xml">        div.innerHTML = "<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span>&gt;</span>"</span></span><br><span class="line"><span class="javascript">        <span class="comment">//div中增加一个文本输入框</span></span></span><br><span class="line"><span class="xml">        div.innerHTML += "<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span>&gt;</span>"</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用html元素对象的属性</p></li><li><p>控制元素样式</p><ol><li><p>使用元素的style属性来设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 方式<span class="number">1</span> --&gt;</span><br><span class="line">        <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line">        div1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            div1.style.border = <span class="string">"1px solid red"</span>;</span><br><span class="line">            div1.style.width = <span class="string">"200px"</span>;</span><br><span class="line">            div1.style.height = <span class="string">"200px"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>提前定义好类选择器的样式，通过元素的className属性来设置其class属性值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.d2</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c4ff9e</span>;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!-- 方式2 --&gt;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</span></span><br><span class="line"><span class="javascript">        div2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            div2.className = <span class="string">"d2"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><p>概念：某些组件被执行了某些操作后，触发某些代码的执行</p><ul><li>事件：某些操作，如：单击、双击、键盘按下、鼠标移动</li><li>事件源：组件，如：按钮、文本输入框</li><li>监听器：代码</li><li>注册监听：将事件、事件源、监听器结合在一起。当事件源上发生了某个事件，则出发执行某个监听器代码</li></ul></li><li><p>常见的事件：</p><ol><li><p>点击事件</p><ol><li><strong>onclick</strong>：单击事件</li><li><strong>ondblclick</strong>：双击事件</li></ol></li><li><p>焦点事件</p><ol><li><strong>onblur</strong>：失去焦点</li><li><strong>onfocus</strong>：元素获得焦点</li></ol></li><li><p>加载事件</p><ol><li><strong>onload</strong>：一张页面或一幅图像完成加载</li></ol></li><li><p>鼠标事件</p><ol><li><strong>onmousedown</strong>：鼠标按钮被按下</li><li><strong>onmousemove</strong>：鼠标被移动</li><li><strong>onmouseover</strong>：鼠标移到某元素之上</li><li><strong>onmouseup</strong>：鼠标按键被松开</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"text"</span>).onmousedown=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    event.button;<span class="comment">//button值为0，左键被点击；1为中建，2为右键</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="5"><li><p>键盘事件</p><ol><li><strong>onkeydown</strong>：某个键盘按键被按下</li><li><strong>onkeyup</strong>：某个键盘按键被松开</li><li><strong>onkeypress</strong>：某个键盘按键按下再松开</li></ol></li><li><p>选择和改变</p><ol><li><strong>onchange</strong>：域的内容被改变</li><li><strong>onselect</strong>：文本被选中</li></ol></li><li><p>表单事件：</p><ol><li><strong>onsubmit</strong>：确认按钮被点击<ul><li>用于阻止表单提交，如果该事件方法返回值为false，则表单不会提交</li></ul></li><li><strong>onreset</strong>：重置按钮被点击</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript简要学习</title>
      <link href="/Javascript%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/Javascript%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript：</p><ul><li>是<strong>基于对象</strong>和<strong>事件驱动</strong>的语言，应用于<strong>客户端</strong><ul><li>基于对象：<ul><li>提供了很多对象，可直接使用</li></ul></li><li>事件驱动：<ul><li>可以实现动态效果</li></ul></li><li>客户端：指浏览器</li></ul></li><li>特点：<ul><li>交互性<ul><li>信息的动态交互</li></ul></li><li>安全性：<ul><li>js不能访问本地磁盘的文件</li></ul></li><li>跨平台性：<ul><li>通过浏览器实现</li></ul></li></ul></li><li>组成：<ul><li>（1）<strong>ECMAScript</strong><ul><li>ECMA ：欧洲计算机协会</li><li>由ECMA组织指定的js语法和语句</li></ul></li><li>（2）<strong>BOM</strong><ul><li>browser object model 浏览器对象模型</li></ul></li><li>（3）<strong>DOM</strong><ul><li>document object model 文档对象模型</li></ul></li></ul></li></ul><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="JS和HTML的结合方式"><a href="#JS和HTML的结合方式" class="headerlink" title="JS和HTML的结合方式"></a>JS和HTML的结合方式</h3><ul><li><p>（1）使用script标签</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>（2）引入外部的js文件</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">srt</span>=<span class="string">"*.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>script标签放置：可以放在任何位置，但html是从上到下解析，所以最好放在后面，否则JavaScript可能获取不到input等标签里面的值。</p></li></ul><h3 id="原始类型和声明变量"><a href="#原始类型和声明变量" class="headerlink" title="原始类型和声明变量"></a>原始类型和声明变量</h3><ul><li><p>js是弱类型语言</p></li><li><p>定义变量 使用关键字var</p></li><li><p>原始类型：</p><ul><li>string：字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li>number：数字类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><ul><li>boolean：true or false</li><li>null：获取对象的引用，null表示对象引用为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><ul><li>undefined：定义一个变量，没有赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aa;</span><br></pre></td></tr></table></figure></li><li><p>typeof()：可以查看变量的类型</p></li></ul><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul><li><p>种类：</p><ul><li><p>if判断</p></li><li><p>switch语句：js所有类型都支持</p></li><li><p>循环 for while do-while</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>与java类似</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>与java中不同的：<ul><li>js中不区分整数和小数，123 / 1000 == 0.123</li><li>字符串相加和相减：<ul><li>“456” + 1 == “4561”（相加做字符串连接）</li><li>“456” - 1 == “455”（相减进行真正的相减）</li><li>“abc” - 1会提示NaN表示不是一个数字</li></ul></li><li>boolean操作：<ul><li>true + 1 == 2</li><li>false + 1 == 1</li><li>即true是1，false是0</li></ul></li><li>“ === ”和“ == ”：<ul><li>==：值是否相等</li><li>===：值和类型是否相等</li></ul></li><li>补充：document.write()：<ul><li>直接向页面写入内容，可以写入变量，固定值，html代码</li></ul></li></ul></li></ul><p><a name="Array" href></a></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>定义：</p><ul><li><p>（1）var[] arr = {1, 2, 3}; //数组可以存放不同的数据类型</p></li><li><p>（2）使用内置Array对象</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>); <span class="comment">//建立有5个元素的数组</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">//创建数组&#123;3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>属性：</p><ul><li>（1）length：arr.length;</li><li><a id="gotoMoreArray" href="#LearnMoreArray">深入学习数组</a></li></ul></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>定义函数：</p><ul><li>（1）使用function关键字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 方法名(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    （返回值）;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数列表直接写参数名称，不用写var</span></span><br></pre></td></tr></table></figure><ul><li>（2）匿名函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    方法体和返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（3）使用内置对象Function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"参数列表"</span>, <span class="string">"方法体和返回值"</span>);</span><br><span class="line"><span class="comment">//使用较少</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><ul><li><strong>全局变量</strong>：在script标签里定义一个变量，其在<strong>整个页面</strong>的js部分都可使用<ul><li>方法内外，在另一个script标签使用</li></ul></li><li><strong>局部变量</strong>：在方法内部定义一个变量，只能在方法内部使用</li></ul><p><a name="Reload" href></a></p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><ul><li>定义：函数名相同，函数参数列表不同(参数个数和参数类型)，根据参数不同去执行不同操作，但在js中，同一个作用域，出现两个名字一样的函数，后面的会覆盖前面的。故<strong>JavaScript没有真正意义上的重载</strong>。</li></ul><hr><h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li><strong>创建</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>属性</strong>：</p><ul><li><strong>length</strong>：字符串的长度</li></ul></li><li><p><strong>方法</strong>：</p><ul><li><p>（1）与HTML相关：</p><ul><li><strong>bold</strong>：实现加粗</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(str.bold());</span><br></pre></td></tr></table></figure><ul><li><strong>fontcolor</strong>：修改字符串的颜色</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str2.fontcolor(<span class="string">"red"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>fontsize</strong>：修改字体大小</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str3.fontsize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>link</strong>：将字符串显示为超链接</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str4.link(<span class="string">"wnghilin.top"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>sub</strong>、<strong>sup</strong>：将字符串显示为上下标</li></ul></li><li><p>（2）与Java类似：</p><ul><li><strong>concat</strong>：连接两个字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"gds"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(str1.concat(str2));</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">abcgds</span><br></pre></td></tr></table></figure><ul><li><strong>charAt</strong>：返回指定位置的字符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str3 = <span class="string">"abcdefg"</span>;</span><br><span class="line">str3.charAt(<span class="number">0</span>);<span class="comment">//返回a</span></span><br><span class="line">str3.charAt(<span class="number">20</span>);<span class="comment">//返回空字符串</span></span><br></pre></td></tr></table></figure><ul><li><strong>indexOf</strong>：返回字符串位置，若不存在，返回-1</li><li><strong>split</strong>：切分字符串，分为数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str4 = <span class="string">"a-b-c-d"</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = str4.split(<span class="string">"-"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>replace</strong>：替换字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str6.replace(<span class="string">"a"</span>, <span class="string">"6"</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>substr</strong> 和 <strong>substring</strong>：截取子字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str5 = <span class="string">"abcdefghuiop"</span>;</span><br><span class="line">str5.substr(<span class="number">5</span>, <span class="number">3</span>); <span class="comment">//fgh 从5开始向后开始截取3个字符</span></span><br><span class="line">str5.substring(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">//de 从3位开始，第5位结束但不包含第5位</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><a name="LearnMoreArray" href></a></p><h3 id="Array：数组对象"><a href="#Array：数组对象" class="headerlink" title="Array：数组对象"></a>Array：数组对象</h3><ul><li><p>创建：<a id="goArray" href="#Array">链接</a></p></li><li><p>属性：</p><ul><li>length：数组的长度</li></ul></li><li><p>方法：</p><ul><li><strong>concat</strong>：数组拼接，用法类似字符串</li><li><strong>join</strong>：根据指定字符分隔数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr); <span class="comment">//输出：a, b, c</span></span><br><span class="line"><span class="built_in">document</span>.write(arr.join(<span class="string">"-"</span>)); <span class="comment">//输出：a-b-c</span></span><br></pre></td></tr></table></figure><ul><li><strong>push</strong>：向数组末尾添加一个或多个新的元素，并返回数组新的长度</li></ul><p><strong>&lt;注&gt;</strong>如果向末尾添加的是数组，会将整个数组看作一个元素将其加入到原有数组中</p><ul><li><strong>pop</strong>：删除并返回最后一个元素</li><li><strong>reverse</strong>：反转数组</li></ul></li></ul><h3 id="Date：日期对象"><a href="#Date：日期对象" class="headerlink" title="Date：日期对象"></a>Date：日期对象</h3><ul><li>获取当前时间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">date; <span class="comment">//Fri Aug 02 2019 15:51:13 GMT+0800 (中国标准时间)</span></span><br><span class="line">date.toLocaleString();<span class="comment">// 2019/8/2 下午3:53:45</span></span><br></pre></td></tr></table></figure><ul><li>获取当前年月日和星期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date.getFullYear(); <span class="comment">//2019</span></span><br><span class="line">date.getMonth(); <span class="comment">//7，因为返回结果是0-11月，需要再加一返回真实月数</span></span><br><span class="line">date.getDate(); <span class="comment">//2</span></span><br><span class="line">date.getDay(); <span class="comment">//5，返回0-6，星期日是0</span></span><br></pre></td></tr></table></figure><ul><li>获取当前时分秒</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date.getHours(); <span class="comment">//16</span></span><br><span class="line">date.getMinutes(); <span class="comment">//5</span></span><br><span class="line">date.getSeconds(); <span class="comment">//36</span></span><br></pre></td></tr></table></figure><ul><li>获取毫秒数：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.getTime(); <span class="comment">//1564733221660，1970年1月1日至今的毫秒数</span></span><br></pre></td></tr></table></figure><h3 id="Math：数学对象"><a href="#Math：数学对象" class="headerlink" title="Math：数学对象"></a>Math：数学对象</h3><p>都是静态方法，只能通过<strong>类名</strong>+<strong>方法</strong>调用</p><ul><li><p>方法：</p><ul><li><strong>cell</strong>：上舍入</li><li><strong>floor</strong>：下舍入</li><li><strong>round</strong>：四舍五入</li><li><strong>random</strong>：产生0.0到1.0之间的随机数</li></ul></li><li><p>属性</p><ul><li><strong>PI</strong>：圆周率</li><li><strong>E</strong>：自然对数的底数</li></ul></li></ul><h3 id="RegExp：正则表达式对象"><a href="#RegExp：正则表达式对象" class="headerlink" title="RegExp：正则表达式对象"></a>RegExp：正则表达式对象</h3><ol><li><p><strong>正则表达式</strong>：定义字符串的组成规则</p><ol><li><p>单个字符：[ ]</p><p>如：[a] [ab] [a-zA-Z0-9_]</p><p>特殊符号代表特殊含义的单个字符：</p><ul><li>\d：单个数字字符[0-9]</li><li>\w：单个单词字符[a-zA-Z0-9_]</li></ul></li><li><p>量词符号：</p><ul><li><p>*：表示出现0次或多次</p></li><li><p>?：表示出现0次或1次</p></li><li><p>+：表示出现1次或多次</p></li><li><p>{m,n}：表示 $m&lt;=数量&lt;=n$（逗号之后不能打空格）</p><ul><li>m如果缺省，{ ,n}：最多n次</li><li>n如果缺省，{m, }：最少m次</li></ul></li></ul></li><li><p>开始结束符号：</p><ul><li>^：开始</li><li>$：结束</li></ul></li></ol></li><li><p>对象：</p><ol><li><p>创建：</p><ol><li>var reg = new RegExp(“正则表达式”);</li><li>var reg = /正则表达式/;</li></ol></li><li><p>方法：</p><p>test(参数)：验证指定的字符串是否符合正则定义的规范</p></li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>RegExp对象<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\w&#123;6,12&#125;"</span>); <span class="comment">//此处两个\\，防止\w被转义为其他字符</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> reg2 = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span></span><br><span class="line"></span><br><span class="line">        alert(reg1);</span><br><span class="line">        alert(reg2);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = <span class="string">"zhangsan"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag = reg1.test(name);</span></span><br><span class="line">        alert(flag);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h3><ol><li><p>特点：全局对象，不需要对象名就可以直接使用</p><ul><li><strong>eval</strong>：如果字符串是js代码，使用该方法直接执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"alert(1234)"</span>;</span><br><span class="line"><span class="built_in">eval</span>(str); <span class="comment">//执行alert(1234)</span></span><br></pre></td></tr></table></figure><ul><li><strong>encodeURI</strong> 和 <strong>decodeURI</strong>：对字符进行编码和解码<ul><li>将中文先编码再解码可以有效防止乱码</li></ul></li><li><strong>encodeURIComponent</strong> 和 <strong>decodeURIComponent</strong>：<ul><li>与上面只有编码字符多少的差别</li></ul></li><li><strong>isNaN</strong>：判断当前字符串是否是数字，若是，返回false<ul><li>NaN参与的” == “比较，全部为false，包括NaN==NaN</li></ul></li><li><strong>parseInt</strong>：解析字符串并返回一个整数<ul><li>逐一判断每一个字符是否是数字，直到不是数字位置，将前面数字转为number</li><li>若第一个字符就是字母，则转为NaN</li></ul></li></ul></li></ol><h3 id="重载-1"><a href="#重载-1" class="headerlink" title="重载"></a>重载</h3><p>有没有重载？<a id="goReload" href="#Reload">链接</a></p><ul><li>重载可模拟实现<ul><li>使用arguments对象实现，这个方法的缺点是麻烦。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'一个参数'</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'两个参数'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数通过arguments[0]...来使用</span></span><br></pre></td></tr></table></figure><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li><p><strong>BOM</strong>：浏览器对象模型</p></li><li><p>有哪些对象：</p><ul><li><p>navigator：可以获取客户机的信息（浏览器的信息）</p><ul><li>navigator.appName; //显示浏览器的名称</li></ul></li><li><p>screen：可返回屏幕信息</p><ul><li>screen.width; //返回屏幕的宽</li><li>screen.height; //返回屏幕的高</li></ul></li><li><p>location：请求url地址</p><ul><li><p>href属性</p><ul><li><p>获取请求的url地址，即浏览器地址栏的地址</p></li><li><p>设置url地址</p><ul><li>可以设置页面按钮的事件，将其跳转到另外一个页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"跳转"</span> <span class="attr">onclick</span>=<span class="string">"href1()"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">href1</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        location.href=<span class="string">"http://www.baidu.com"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>history：请求url的历史记录</p><ul><li>可以通过其实现浏览器前进后退功能<ul><li>history.back(); //到上一个页面</li><li>history.forward(); //到下一个页面</li><li>history.go(1); //到下一个页面</li><li>history.go(-1); //到下一个页面</li></ul></li></ul></li><li><p><strong>window</strong></p></li></ul></li></ul><h4 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h4><ul><li><p>窗口对象</p></li><li><p><strong>顶层对象</strong>（所用的bom对象都是在window对象的里面操作的）</p></li></ul><ul><li><p>方法：</p><ul><li><p>window.alert()：弹出一个消息提示框</p><ul><li>简写alert();</li></ul></li><li><p>confirm()：确认提示框，参数为提示内容</p><ul><li>返回值：若点击确认，则返回true，否则返回false</li></ul></li><li><p>prompt(text, defaultText)：输入对话框</p><ul><li>text为提示输入，defaultText为默认输入内容</li></ul></li><li><p><strong>open(URL,name,features,replace)</strong>：打开一个新窗口，并返回窗口对象</p><ul><li><p><strong>URL</strong>： 一个可选的字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者它的值是空字符串，那么新窗口就不会显示任何文档。</p></li><li><p><strong>name</strong>： 一个可选的字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 <a> 和 <form> 的属性 </form></a></p></li><li><p>*<em>target *</em>的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</p></li><li><p><strong>features</strong>： 一个可选的字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在窗口特征这个表格中，我们对该字符串的格式进行了详细的说明。</p></li><li><p><strong>replace</strong>： 一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：</p><pre><code>**true - URL**： 替换浏览历史中的当前条目。</code></pre><p>​             <strong>false - URL：</strong> 在浏览历史中创建新的条目。</p></li></ul></li><li><p>close()：关闭窗口，浏览器兼容性较差</p></li><li><p><strong>做定时器</strong>：</p><ul><li>setInterval(code, millisec)：每millisec毫秒执行一次code代码。</li><li>setTimeout(code, millisec)：在millisec毫秒后执行一次code代码，且只会执行一次</li><li>clearInterval(setInterval的返回值)：清除setInterval设置的定时器</li><li>clearTimeout(setTimeout的返回值)：清除setTimeout设置的定时器</li></ul></li></ul></li></ul><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><ul><li><p>DOM：文档对象模型</p></li><li><p>功能：控制html文档的内容</p></li><li><p>代码：获取页面标签（元素）对象  Element</p><ul><li>document.getElementById(“id值”);  通过元素的id来获得元素对象</li></ul></li><li><p>操作Element对象：</p><ol><li><p>修改属性值：</p></li><li><p>修改标签体内容：</p><p>属性：innerHTML</p></li></ol></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><p>功能：某些组件被执行了某些操作后，触发某些代码的执行</p></li><li><p>绑定事件</p><ol><li><p>直接在html标签上，指定事件的属性，属性值就是js代码</p><ol><li><p>事件：onclick：点击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"light"</span> <span class="attr">src</span>=<span class="string">"img/off.gif"</span> <span class="attr">onclick</span>=<span class="string">"function();"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过js获取元素对象，指定事件属性，设置一个函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> light = <span class="built_in">document</span>.getElementById(<span class="string">"light"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;&#125;</span></span><br><span class="line">        light.onclick = fun2();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS简要学习</title>
      <link href="/css%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/"/>
      <url>/css%E7%AE%80%E8%A6%81%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h2><ul><li>css：层叠样式表<ul><li>样式表：有很多属性和属性值</li><li>css可以使得页面显示效果更好，可以提高后期样式代码的可维护性</li></ul></li></ul><hr><h2 id="CSS使用"><a href="#CSS使用" class="headerlink" title="CSS使用"></a>CSS使用</h2><h3 id="CSS和HTML的四种结合方式"><a href="#CSS和HTML的四种结合方式" class="headerlink" title="CSS和HTML的四种结合方式"></a>CSS和HTML的四种结合方式</h3><ul><li><p>（1）style属性：</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> = <span class="string">"background-color:red;color:green"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><center>style属性示例</center></li><li><p>（2） style标签：</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---  此处可以设置&lt;div&gt;标签的样式  ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    div&#123;</span><br><span class="line">        css代码;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><center>style标签示例</center></li><li><p>（3）在style标签 使用语句：</p><ul><li>创建css文件（.css）</li><li>在style标签中使用@import url(css文件路径)；</li></ul></li><li><p>（4）使用头标签引入外部css文件</p><ul><li><p>创建css文件</p></li><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css路径"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>注</strong>：第三种方式在某些浏览器下不起作用，一般用第四种</p></li></ul><h3 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h3><p>优先级：即最终以哪一个样式为准</p><ul><li>从上到下，从内到外，优先级从低到高。（一般情况）<ul><li>即html中，以在下方的和内部的样式为准</li><li>格式：选择器名称{属性名: 属性值; ······}</li></ul></li></ul><hr><h3 id="CSS基本选择器"><a href="#CSS基本选择器" class="headerlink" title="CSS基本选择器"></a>CSS基本选择器</h3><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><ul><li><p>（1）标签选择器：用标签的名称作为选择器</p></li><li><p>（2）class选择器：</p><ul><li><p>每个html标签都有个属性 class</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---  此处可以用class1作为选择器 ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.class1</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*此处修改所有class属性为class1的样式*/</span></span><br><span class="line"><span class="selector-class">.class1</span>&#123;</span><br><span class="line">    css代码；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>（3）id选择器：</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"id1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-id">#id1</span>&#123;</span><br><span class="line">css代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*此处修改所有id属性为id1的样式*/</span></span><br><span class="line"><span class="selector-id">#id1</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><ul><li>id选择器 &gt; class选择器 &gt; 标签选择器</li></ul><h3 id="CSS扩展选择器"><a href="#CSS扩展选择器" class="headerlink" title="CSS扩展选择器"></a>CSS扩展选择器</h3><ul><li><p>（1）关联选择器</p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置嵌套标签里的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*div里的p标签*/</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>（2）组合选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将div和p设置为相同样式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>（3）伪元素选择器</p><ul><li><p>css提供的定义好的样式，可以直接选用</p></li><li><p>比如超链接：</p><ul><li>状态：原始 悬停 点击 点击后</li><li>原始： :link</li><li>悬停： :hover</li><li>点击： :active</li><li>点击后： :visited</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    css代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h3><p>在布局前需要把数据装到一块一块的区域内，这个区域叫做盒子。</p><p><img src="https://www.runoob.com/images/box-model.gif" alt="css盒子模型"></p><ul><li><p><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</p><ul><li>与边框类似</li></ul></li><li><p><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</p><ul><li><p><strong>上</strong>：border-top</p></li><li><p><strong>下</strong>：border-bottom</p></li><li><p><strong>左</strong>：border-left</p></li><li><p><strong>右</strong>：border-right</p></li><li><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*统一设置*/</span></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*分别设置*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#id1</span>&#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">2px</span> dashed yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</p><ul><li>与边框类似</li></ul></li><li><p><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</p></li></ul><h3 id="布局的漂浮"><a href="#布局的漂浮" class="headerlink" title="布局的漂浮"></a>布局的漂浮</h3><ul><li><strong>float</strong>: 用于设置布局悬浮<ul><li><strong>none</strong>: 默认值，对象不漂浮。</li><li><strong>left</strong>: 文本流向对象的右边。（其后面的部分漂向它的右边，空出的位置由剩下的补齐）</li><li><strong>right</strong>: 文本流向对象的左边。</li></ul></li><li>缺点：在某些浏览器上无法使用</li></ul><h3 id="布局的定位"><a href="#布局的定位" class="headerlink" title="布局的定位"></a>布局的定位</h3><ul><li>position: 用于设置布局定位<ul><li>absolute: 将对象从文档流中拖出，其原来的位置由后面的补上<ul><li>可用 top、left等对它进行绝对定位。</li></ul></li><li>relative:  不从文档流中拖出，其余盒子位置不变</li></ul></li></ul><hr><p>学习资料：<a href="https://www.bilibili.com/video/av37452727/?p=28" target="_blank" rel="noopener">(28天完整版)JavaWeb视频教程</a></p><p>资料、图片来源：<a href="https://www.runoob.com/css/css-boxmodel.html" target="_blank" rel="noopener">CSS 盒子模型</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb基础概念</title>
      <link href="/JavaWeb%E5%9F%BA%E7%A1%80/"/>
      <url>/JavaWeb%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>框架：<strong>软件框架</strong>（software framework），通常指的是为了实现某个业界标准或完成特定基本任务的<a href="https://baike.baidu.com/item/软件组件/9817461" target="_blank" rel="noopener">软件组件</a>规范，也指为了实现某个软件组件规范时，提供规范所要求之基础功能的软件产品。也被称为半成品软件。可以在框架的基础上进行软件开发，可以简化编码。</p></blockquote><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>反射：将类的各个组成部分封装为其他对象，这就是反射机制。（在Class 类对象阶段，将.class文件的各个部分封装成不同的类对象，如将成员变量封装成Field类对象并用数组存储起来。其总体是由Class类对象储存的）<ul><li>好处：<pre><code>* 1.可以在程序运行过程中操作这些对象。* 2.可以解耦</code></pre></li></ul></li></ul><h3 id="获取字节码class对象的三种方式"><a href="#获取字节码class对象的三种方式" class="headerlink" title="获取字节码class对象的三种方式"></a>获取字节码class对象的三种方式</h3><ul><li><p>获取Class对象的方式：</p><ol><li><p>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象</p><ul><li>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</li></ul></li><li><p>类名.class：通过类名的属性class获取</p></li></ol><ul><li>多用于参数的传递</li></ul><ol start="3"><li><p>对象.getClass()：getClass()在Object类中定义 </p><ul><li><p>多用于对象的获取字节码的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><pre><code>* 结论：    同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</code></pre><h3 id="class类对象的获取功能"><a href="#class类对象的获取功能" class="headerlink" title="class类对象的获取功能"></a>class类对象的获取功能</h3><ul><li><p>Class对象功能：</p><ul><li><p>获取功能：</p><ol><li><p>获取成员变量：</p><ul><li><p>getFields() ：获取所有public修饰的成员变量，private或protected修饰的无法读取</p></li><li><p>getField(String name)   获取指定名称的 public修饰的成员变量</p></li><li><p>getDeclaredFields()  获取所有的成员变量，不考虑修饰符</p></li><li><p>getDeclaredField(String name)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用法示例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflectDemo</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">          Field[] fields = personClass.getFields();</span><br><span class="line">       <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">              System.out.println(field);</span><br><span class="line">          &#125;</span><br><span class="line">       Field a = personClass.getField(<span class="string">"a"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul></li></ul><pre><code>    * 成员变量的操作（Field类的方法）      1. 设置值         - void set(Object obj, Object value)           <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">a.set(p, <span class="string">"a"</span>); <span class="comment">//设置p对象的a属性的值</span></span><br></pre></td></tr></table></figure>      2. 获取值         - get(Object obj)       3. 忽略访问权限修饰符的安全检查         * setAccessible(true):暴力反射，设置之后即可访问private和protected修饰的变量2. 获取构造方法：   * getConstructors()     * getConstructor(类&lt;?&gt;... parameterTypes)     * getDeclaredConstructor(类&lt;?&gt;... parameterTypes)     * getDeclaredConstructors()     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Constructor cons = cls2.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(cons);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   * Constructor对象的操作：     * 创建对象：       * newInstance方法       * 用空参数构造方法创建对象，可以用Class对象的newInstance方法     * 暴力反射3. 获取成员方法：   * Method[] getMethods()  Method getMethod(String name, 类&lt;?&gt;... parameterTypes)   * Method[] getDeclaredMethods()    * Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)    * 操作：     * 执行方法：invoke方法，参数为一个对象     * 获取方法名称：getname4. 获取全类名       * String getName()</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li><p>案例：</p><ul><li><p>需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法</p><ul><li>实现：<ol><li>配置文件</li><li>反射</li></ol></li><li>步骤：<ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        <span class="comment">//1.1创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//1.2加载配置文件，转换为一个集合</span></span><br><span class="line">        <span class="comment">//1.2.1获取class目录的配置文件</span></span><br><span class="line">        ClassLoader classLoader = reflectTest.class.getClassLoader();</span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">"pro.properties"</span>);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取配置文件中的数据</span></span><br><span class="line">        String className = pro.getProperty(<span class="string">"className"</span>);</span><br><span class="line">        String methodName = pro.getProperty(<span class="string">"methodName"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><blockquote><ul><li>概念：说明程序的。给计算机看的</li><li>注释：用文字描述程序的。给程序员看的</li><li>定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</li><li>作用分类：<br>①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】<br>②代码分析：通过代码里标识的注解对代码进行分析【使用反射】<br>③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】</li></ul></blockquote><h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><ul><li>@Override：检测被该注解标注的方法是否是继承自父类（接口）的。</li><li>@Deprecated：该注解标注的内容，已过时</li><li>@SuppressWarnings：压制警告<ul><li>@SuppressWarnings(“all”)：压制所有警告</li></ul></li></ul><h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><ul><li><p>格式：</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元注解</span><br><span class="line">  <span class="keyword">public</span> <span class="meta">@interface</span> 注解名&#123;</span><br><span class="line">属性列表</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>本质：</p><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAnno</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其本质上就是一个接口，该接口默认继承Annotation接口</p></li></ul></li><li><p>属性：接口中可以定义的成员方法</p><ul><li><p>要求：</p><ul><li>属性的返回值类型：<ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li>定义了属性，使用时需要给属性赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> "张三"</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    Person <span class="title">person</span><span class="params">()</span></span>;<span class="comment">//此处为枚举类型</span></span><br><span class="line">    <span class="function">MyAnno2 <span class="title">anno2</span><span class="params">()</span></span>;<span class="comment">//此处为另一个注解</span></span><br><span class="line"></span><br><span class="line">    String[] strs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用，有默认值的不需要赋值</span></span><br><span class="line"><span class="meta">@MyAnno</span>(show1 = <span class="number">1</span>, person = Person.P1, anno2 = <span class="meta">@MyAnno</span>, strs = &#123;<span class="string">"aaa"</span>,<span class="string">"bbb"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoDemo1</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>特殊情况</strong>：如果只有一个属性需要赋值且属性名是<strong>value</strong>时，可以省略value，即MyAnno(1)。</li></ul></li></ul></li><li><p>元注解：解释注解的注解</p><ul><li>@Target：描述注解能够作用的位置<ul><li>ElementType取值：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li></ul></li><li>@Retention：描述注解被保留的阶段<ul><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li><li></li></ul></li><li>@Documented：描述直接是否被抽取到API文档中</li><li>@Inherited：描述注解是否被子类继承</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(value=&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnno3 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h3><ul><li><p>解析注解：获取注解中定义的属性值，可以不再使用配置文件</p><ul><li>1.获取注解定义的位置的对象（Class，Method，Field）</li><li>2.获取指定的注解<ul><li>getAnnotation(Class)</li></ul></li></ul><p>​        </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解定义</span></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述需要执行的类名和方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">    <span class="function">String <span class="title">classname</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">methodname</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pro</span>(classname = <span class="string">"top.wnghillin.annotation.Student"</span>, methodname = <span class="string">"study"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">reflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.解析注解</span></span><br><span class="line">        <span class="comment">//1.1获取该类的字节码文件对象</span></span><br><span class="line">        Class&lt;reflectTest&gt; reflectTestClass = reflectTest.class;</span><br><span class="line">        <span class="comment">//2获取注解对象</span></span><br><span class="line">        Pro an = reflectTestClass.getAnnotation(Pro.class);</span><br><span class="line">        <span class="comment">//3.调用注解对象中定义的抽象方法，获取返回值</span></span><br><span class="line">        String classname = an.classname();</span><br><span class="line">        String methodname= an.methodname();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.加载该类进内存</span></span><br><span class="line">        Class cls = Class.forName(classname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建对象</span></span><br><span class="line">        Object obj = cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.获取方法对象</span></span><br><span class="line">        Method method = cls.getMethod(methodname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.执行方法</span></span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>附：isAnnotationPresent(MyAnno.class)：判断该方法（对象、属性）是否被MyAnno注解</li></ul><hr><p>资料：<a href="黑马JavaWeb入门到精通(idea版)">黑马JavaWeb入门到精通(idea版)</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
            <tag> 反射 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Junit进行单元测试</title>
      <link href="/Junit/"/>
      <url>/Junit/</url>
      
        <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ul><li><p>黑箱测试：不需要输入代码，只看输入输出</p></li><li><p>白箱测试：需要输入代码进行测试</p><p>（其中，使用Junit进行测试是白箱测试 ）</p></li></ul><h2 id="Junit使用"><a href="#Junit使用" class="headerlink" title="Junit使用"></a>Junit使用</h2><ul><li><p>步骤：</p></li><li><ol><li>定义一个测试类</li></ol><ul><li>​    建议使用被测试的类名+Test命名</li><li>​    可以建立一个新的test包储存测试类</li></ul></li><li><ol start="2"><li><p>定义测试方法，该测试方法可以独立运行：</p><ul><li>​    加上@Test，如下方代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>导入Junit依赖环境</p></li><li><p>使用断言来判断结果: </p><ul><li>判定结果：红色：失败    绿色：成功</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Calculator c = <span class="keyword">new</span> Calculator();</span><br><span class="line">    <span class="keyword">int</span> result = c.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    Assert.assertEquals(期望结果，运算结果)(<span class="number">2</span>, result); </span><br><span class="line">    <span class="comment">//Assert.assertEquals(期望结果，运算结果)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>失败结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.AssertionError: </span><br><span class="line">Expected :2</span><br><span class="line">Actual   :3</span><br></pre></td></tr></table></figure></li></ul><h3 id="Before-After方法"><a href="#Before-After方法" class="headerlink" title="@Before @After方法"></a>@Before @After方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始化方法</span></span><br><span class="line"><span class="comment">    * 所有测试方法执行之前都将执行这个方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Before</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"init..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 释放资源方法</span></span><br><span class="line"><span class="comment">    * 所有测试方法执行之后都会自动执行这个方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@After</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"close..."</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章 树</title>
      <link href="/%E7%AC%AC4%E7%AB%A0%E6%A0%91/"/>
      <url>/%E7%AC%AC4%E7%AB%A0%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><blockquote><p><strong>树</strong>（tree）是一些节点的集合，其可以为空集；若它不为空集，则一棵树由<strong>根</strong>（root）节点 r 以及0个或多个非空的子树T<sub>1</sub>、T<sub>2</sub>……组成，其中每一刻的根都被来自根 r 的一条有向的<strong>边</strong>（edge）所连接。  </p></blockquote><h3 id="树的实现"><a href="#树的实现" class="headerlink" title="树的实现"></a>树的实现</h3><p>实现树的一种方法可以是在每一个节点除数据外还要有一些指针，使得该节点的每一个儿子都有一个指针指向它。但由于节点的儿子个数未知且可能变化很大，因此只能通过将每个节点的所有儿子都放在树节点的链表中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">PtrToNode</span></span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">  ElementType Element;</span><br><span class="line">  PtrToNode FirstChild;</span><br><span class="line">  PtrToNode NextSibling;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如图所示：</p><p><img src="https://i.loli.net/2019/07/27/5d3beaf49ac3561782.png" alt="image1"></p><h3 id="树的遍历及应用"><a href="#树的遍历及应用" class="headerlink" title="树的遍历及应用"></a>树的遍历及应用</h3><ul><li><p>先序遍历（preorder traversal）：在先序遍历中，对节点的处理工作是在它的诸儿子节点被处理之前（pre）进行的。其每个节点总的工作量为常数。其时间复杂度为O(N)。例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算机中的文件系统可以用一个树来表示</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ListDir</span><span class="params">(DirectoryOrFile D, <span class="keyword">int</span> Depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(D is a legitimate entry)</span><br><span class="line">    &#123;</span><br><span class="line">        PrintName(D, Depth);</span><br><span class="line">        <span class="keyword">if</span>(D is a Directory)</span><br><span class="line">            <span class="keyword">for</span> each child, C, of D</span><br><span class="line">                ListDir(C, Depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListDirectory</span><span class="params">(DirectoryOrFile D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ListDir(D, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>列出分级文件系统中目录的例程</center></li><li><p>后序遍历（postorder traversal）：在后序遍历中，在一个节点处的工作实在它的诸儿子节点被计算后（post）进行的。例子如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SizeDirectory</span><span class="params">(DirectoryOrFile D)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TotalSize;</span><br><span class="line">    </span><br><span class="line">    TotalSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(D is a legitimate entry)</span><br><span class="line">    &#123;</span><br><span class="line">        TotalSize = FileSize(D);</span><br><span class="line">        <span class="keyword">if</span>(D is a directory)</span><br><span class="line">            <span class="keyword">for</span> each child, C, of D</span><br><span class="line">                TotalSize += SizeDirectory(C);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TotalSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>计算一个目录大小的例程</center>## 二叉树</li><li><blockquote><p>二叉树（binary tree）是一棵树，其中每个节点都不能有多于两个的儿子。</p></blockquote></li></ul><p>二叉树的深度可以远小于N，而其平均深度可以达到：$O(\sqrt(N))$，而二叉树的特殊情况，<strong>二叉查找树</strong>的深度平均值可以达到O(logN)。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>二叉树的一个节点就是由<strong>Key</strong>(关键字)信息加上两个指向其他节点的指针(Left和Right)组成的结构。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PtrToNode</span> <span class="title">Tree</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElementType Element;</span><br><span class="line">    Tree Left;</span><br><span class="line">    Tree Right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="表达式树"><a href="#表达式树" class="headerlink" title="表达式树"></a>表达式树</h3><p><strong>表达式</strong>树的树叶是<strong>操作数</strong>，如常数或变量，而其他节点为<strong>操作符</strong>（需要所有操作都是二元的）。</p><p><img src="https://img2018.cnblogs.com/blog/567389/201811/567389-20181116090647050-1700454715.png" alt="image2"></p><p>这种先读左儿子，再读节点，再读右儿子得到中缀表达式的方法，称为<strong>中序遍历</strong>，而采用后序遍历将会得到后缀表达式。</p><h4 id="构造一颗表达式树"><a href="#构造一颗表达式树" class="headerlink" title="构造一颗表达式树"></a>构造一颗表达式树</h4><p>设输入为<br>$$<br>a b + c d e + * *<br>$$<br>前两个符号式操作数，因此我们创建两颗单节点树并把指向它们的指针压入栈中：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf57523e0951358.png" alt="image3"></p><p>接着，“ + ”被读入，指向这两棵树的指针被弹出，形成一棵新的树：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf64b089d343785.png" alt="image4"></p><p>随后，c、d、e被读入，同理，压入栈中：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf6d7aa8d725258.png" alt="image5"></p><p>接下来读入“ + ”号，d、e弹出并合并。继续读读到“ * ”号，再将两棵树合并，结果为：</p><p><img src="https://i.loli.net/2019/07/27/5d3bf75eec45351009.png" alt="image5"></p><p><img src="https://i.loli.net/2019/07/27/5d3bf7dad68f544499.png" alt="image5"></p><p>随后同理，即可得到最终结果。</p><h2 id="查找树ADT——二叉查找树"><a href="#查找树ADT——二叉查找树" class="headerlink" title="查找树ADT——二叉查找树"></a>查找树ADT——二叉查找树</h2><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><blockquote><p>对于树中的每个节点X，它的左子树中的所有关键字值小于X的关键字值，而它的右子树中所有关键字值大于X的关键字值。这意味着，该树所有的元素都可以用某种统一的方式排序。</p></blockquote><h4 id="MakeEmpty"><a href="#MakeEmpty" class="headerlink" title="MakeEmpty"></a>MakeEmpty</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> SearchTree *Node;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> element;</span><br><span class="line">SearchTree left;</span><br><span class="line">SearchTree right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">SearchTree <span class="title">MakeEmpty</span><span class="params">(SearchTree tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tree != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">MakeEmpty(tree-&gt;left);</span><br><span class="line">MakeEmpty(tree-&gt;right);</span><br><span class="line"><span class="built_in">free</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h4 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(X &lt; T-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (X &gt; T-&gt;Element)</span><br><span class="line">        <span class="keyword">return</span> Find(X, T-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FindMin-和-FindMax"><a href="#FindMin-和-FindMax" class="headerlink" title="FindMin 和 FindMax"></a>FindMin 和 FindMax</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下分别采用了递归和非递归的方法来实现</span></span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> FindMin(T-&gt;Left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">while</span>(T -&gt; <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SearchTree <span class="title">Insert</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//建立并返回一个单节点树</span></span><br><span class="line">        T = (SearchTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TreeNode));</span><br><span class="line">        <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!!"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            T-&gt;Element = X;</span><br><span class="line">            T-&gt;Left = T-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;Element)</span><br><span class="line">        T-&gt;Left = Insert(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; T-&gt;Element)</span><br><span class="line">        T-&gt;Right = Insert(X, T-&gt;Right);</span><br><span class="line">    <span class="comment">//如果X已经在树里面，则不进行操作</span></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>删除是最困难的操作。如果节点是一片树叶，那么它可以被立即删除。如果节点有一个儿子，则该节点可以在其父节点跳帧指针绕过该节点后被删除。如图：</p><p><img src="C:%5CUsers%5CNier%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20190730144849.png" alt="QQ截图20190730144849"></p><p>删除具有两个儿子的节点，一般的策略是用其右子树的最小的数据代替该节点的数据并递归地删除那个节点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SearchTree <span class="title">Delete</span><span class="params">(ElementType X, SearchTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Position TmpCell;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(T == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">"Element Not Found"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(X &lt; T-&gt;Element)</span><br><span class="line">        T-&gt;Left = Delete(X, T-&gt;Left);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; T-&gt;Element)</span><br><span class="line">        T-&gt;Right = Delete(X, T-&gt;Right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Left &amp;&amp; T-&gt;Right)</span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = FindMin(T-&gt;Right);</span><br><span class="line">        T-&gt;Element = TmpCell-&gt;Element;</span><br><span class="line">        T-&gt;Right = Delete(T-&gt;Element, T-&gt;Right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//1个或0个儿子</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell = T;</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;Left == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Right;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(T-&gt;Right == <span class="literal">NULL</span>)</span><br><span class="line">            T = T-&gt;Left;</span><br><span class="line">        <span class="built_in">free</span>(TmpCell);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ul><li><strong>AVL树</strong>是带有平衡条件的二叉查找树。这个平衡条件必须容易保持，且它须保证树的深度是O(logN).</li><li>一颗AVL树是其每个节点的左子树和右子树的高度最多差1的二叉查找树（空树的高度定义为-1。）</li></ul><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p>在插入一个节点后，可能会破坏AVL树的特性，如果发生这种情况，那么就要把性质恢复以后才认为这一步插入完成。事实上，这总可以通过<strong>旋转</strong>（rotation）做到。</p><p>不平衡可能出现的情况：</p><ul><li>对$\alpha$的左儿子的左子树进行一次插入。</li><li>对$\alpha$的左儿子的右子树进行一次插入。</li><li>对$\alpha$的右儿子的左子树进行一次插入。</li><li>对$\alpha$的右儿子的右子树进行一次插入。</li></ul><p>左-左（或右-右）的情况需要进行一次<em>单旋转</em>（single rotation）而完成调整，另外两种需要进行一次<em>双旋转</em>（double rotation）。</p><h4 id="单旋转"><a href="#单旋转" class="headerlink" title="单旋转"></a>单旋转</h4><p>左子树的左子树变为节点的左子树，在将原来的左子树变为右子树，原来的右子树变为右子树的右子树。</p><p><img src="https://i.postimg.cc/xjByp3f5/QQ-20190731123727.png" alt="单旋转修复情形1"></p><center>单旋转修复情形1</center>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第3章 表、栈和队列</title>
      <link href="/%E7%AC%AC3%E7%AB%A0%E8%A1%A8%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>/%E7%AC%AC3%E7%AB%A0%E8%A1%A8%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="表ADT"><a href="#表ADT" class="headerlink" title="表ADT"></a>表ADT</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>​    空表（empty list）：大小为0的表。</p><p>​    前驱元、后继元。</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><em>函数原型</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode List;</span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Position;</span><br><span class="line"></span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLast</span><span class="params">(Position P, List L)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(<span class="keyword">int</span> X, List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> X, List L, Position P)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Header</span><span class="params">(List L)</span></span>;</span><br></pre></td></tr></table></figure><p>具体实现：略</p><h3 id="常见的错误"><a href="#常见的错误" class="headerlink" title="常见的错误"></a>常见的错误</h3><p>链表一般会出现指针变量包含了伪地址的问题。删除表时，需要一个中间量来储存上一个节点。同时，使用malloc之后记得将该节点初始化。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="多项式ADT"><a href="#多项式ADT" class="headerlink" title="多项式ADT"></a>多项式ADT</h4><p>令F(X) = ∑<sub>i=0</sub><sup>N</sup> A<sub>i</sub>X<sup>i</sup>。如果多项式的次数过大，使用普通方法的运行时间就难以接受了。于是可以采用多项式ADT来实现多项式的加减乘等操作。</p><p><em>多项式ADT的数组实现的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> CoeffArray[MaxDegree + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> HighPower;</span><br><span class="line">&#125; * Polynomial;</span><br></pre></td></tr></table></figure><p><em>将多项式初始化为零的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZeroPolynomial</span><span class="params">(Polynomial Poly)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= MaxDegree; i++)</span><br><span class="line">        Poly-&gt;CoeffArray[i] = <span class="number">0</span>;</span><br><span class="line">    Poly-&gt;HighPower = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>两个多项式相加的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddPolynomial</span><span class="params">(<span class="keyword">const</span> Plynomial Poly1, <span class="keyword">const</span> Polynomial Poly2, Polynomial PolySum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    ZeroPolynomial(PolySum);</span><br><span class="line">    PolySum-&gt;HighPower = Max(Poly1-&gt;HighPower, Poly2-&gt;HighPower);</span><br><span class="line">    <span class="keyword">for</span>(i = PolySum-&gt;HighPower; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        PolySum-&gt;CoeffArray[i] = Poly1-&gt;CoeffArray[i] + Poly2-&gt;CoeffArray[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>两个多项式相乘的过程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MultPolynomial</span><span class="params">(<span class="keyword">const</span> Plynomial Poly1, <span class="keyword">const</span> Polynomial Poly2, Polynomial PolyProd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">ZeroPolynomial(PolyProd);</span><br><span class="line">PolySum-&gt;HighPower = Poly1-&gt;HighPower + Poly2-&gt;HighPower;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(PolyProd-&gt;HighPower &gt; MaxDegree)</span><br><span class="line">Error(<span class="string">"Exceeded array size"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= Poly1-&gt;HighPower; i++)</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt;= Poly2-&gt;HighPower; j++)</span><br><span class="line">                PolyProd-&gt;CoeffArray[i + j] += Poly1-&gt;CoeffArray[i] * Poly2-&gt;CoeffArray[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="栈ADT"><a href="#栈ADT" class="headerlink" title="栈ADT"></a>栈ADT</h2><h3 id="栈模型"><a href="#栈模型" class="headerlink" title="栈模型"></a>栈模型</h3><p><strong>栈</strong>（stack）是限制插入和删除只能在一个位置上进行的表，该位置是表的末端，即<strong>顶</strong>（top）。对栈的基本操作有<strong>Push</strong>和<strong>Pop</strong>。</p><p>栈有时又叫LIFO(后进先出)表。</p><h3 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h3><h4 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h4><p><em>栈ADT链表实现的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> PtrToNode Stack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span>;</span><br></pre></td></tr></table></figure><p>测试栈是否空栈的例程*</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>创建一个空栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    S = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!"</span>);</span><br><span class="line">    S-&gt;Next == <span class="literal">NULL</span>;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MakeEmpty设置Next指针指向NULL</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        Error(<span class="string">"Must use CreateStack First"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">while</span>(!IsEmpty(S))</span><br><span class="line">            Pop(S);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Push进栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToNode TmpCell;</span><br><span class="line"></span><br><span class="line">    TmpCell - <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Node));</span><br><span class="line">    <span class="keyword">if</span>(TmpCell == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        TmpCell-&gt;Element = X;</span><br><span class="line">        TmpCell-&gt;Next = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = TmpCell;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>返回栈顶元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Next-&gt;Element;</span><br><span class="line">    Error(<span class="string">"Empty Stack"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>从栈弹出元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PtrToNode FirstCell;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">"Empty Stack!"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        FirstCell = S-&gt;Next;</span><br><span class="line">        S-&gt;Next = S-&gt;Next-&gt;Next;</span><br><span class="line">        <span class="built_in">free</span>(FirstCell);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    所有操作均花费常数时间，但对于malloc和free的调用是非常昂贵的。有的缺点可以通过使用第二个栈避免，该第二个栈初始时为空栈。当一个单元栋第一个栈弹出时，它只是被放到了第二个栈中，此后当第一个栈需要新单元时，它首先去检查第二个栈</p><h4 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h4><p>数组实现的栈可以避免指针的操作。其惟一潜在危害就是我们需要提前声明一个数组的大小。但通常来说声明一个足够大而不至于浪费太多空间的数组并不是太过困难，因此数组实现是一种比较流行的做法。</p><p><em>栈的声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EmptyTOS (-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MinStackSize (5)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackRecord</span> *<span class="title">Stack</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TopAndPop</span><span class="params">(Stack S)</span></span>;</span><br></pre></td></tr></table></figure><p><em>栈的创建</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stack <span class="title">CreateStack</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack S;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(MaxElements &lt; MinStackSize)</span><br><span class="line">        Error(<span class="string">"Stack size is too small"</span>);</span><br><span class="line">    S = (Stack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(strct StackRecord));</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of Space!!!"</span>);</span><br><span class="line">    S-&gt;Array = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * MaxElements);</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;Array == <span class="literal">NULL</span>)</span><br><span class="line">        FatalError(<span class="string">"Out of space!!!"</span>);</span><br><span class="line">    S-&gt;Capacity = MaxElements;</span><br><span class="line">    MakeEmpty(S);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>栈的释放</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeStack</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(S-&gt;Array);</span><br><span class="line">        <span class="built_in">free</span>(S);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>检测是否空栈</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;TopOfStack == EmptyTOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>创建一个空栈</em> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S-&gt;TopOfStack = EmptyTOS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>进栈的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> X, Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(S))</span><br><span class="line">        Error(<span class="string">"Full stack"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        S-&gt;Array[++S-&gt;TopOfStack] = X;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>将栈顶返回的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!IsEmpty(S))</span><br><span class="line">        <span class="keyword">return</span> S-&gt;Array[S-&gt;TopOfStack];</span><br><span class="line">    Error(<span class="string">"Empty stack"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>从栈弹出元素的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">(Stack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(S))</span><br><span class="line">        Error(<span class="string">"Empty stack"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        S-&gt;TopOfStack--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="平衡符号"><a href="#平衡符号" class="headerlink" title="平衡符号"></a>平衡符号</h4><p>做一个空栈。读入字符知道文件尾。如果字符时一个开放符号，则将其推入栈中。如果字符是一个封闭符号，则当栈空时报错。否则，将栈元素弹出，如果弹出的符号不是对应的开放符号，则报错。在文件尾，如果栈非空则报错。</p><h4 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h4><p><strong>中缀表达式</strong>：4.99 + 5.99 + 6.99 * 1.06</p><p><strong>后缀表达式</strong>：4.99 1.06 * 5.99 + 6.99 1.06 * + （<strong>后缀</strong>（postfix）或<strong>逆波兰</strong>（reverse Polish）记法）</p><p>计算后缀表达式的方法是使用一个栈，当见到一个数字时就把它推入到栈中；遇到一个运算符时该运算符就作用于从该栈弹出的两个数（符号）上，将所得结果推入栈中。</p><p>如，计算 *<em>6 5 3 2 + 8 * + 3 + * *</em>：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">TopOfStack-&gt;</td><td align="center">3</td></tr><tr><td align="center"></td><td align="center">2</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>下面读到一个‘+’，所以3和2被弹出，其结果5被压入栈中：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">TopOfStack-&gt;</td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>接着，8进栈：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">TopOfStack-&gt;</td><td align="center">8</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>然后，8和5弹出，相乘，再将40压入栈中：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">TopOfStack-&gt;</td><td align="center">40</td></tr><tr><td align="center"></td><td align="center">5</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>接着又遇到‘+’号，因此40和5被弹出，并且40 + 5 = 45进栈：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">TopOfStack-&gt;</td><td align="center">45</td></tr><tr><td align="center"></td><td align="center">6</td></tr></tbody></table><p>随后操作同上，得到结果288。</p><h4 id="中缀到后缀的转换"><a href="#中缀到后缀的转换" class="headerlink" title="中缀到后缀的转换"></a>中缀到后缀的转换</h4><p>设我们想将中缀表达式：</p><center> a + b * c + (d * e + f) * g  </center>转换成后缀表达式，其答案为<center>a b c * + d e * f + g * +</center>首先，a被读入，于是它流向输出。然后，“+”被读入并被放入栈中。接着b读入并流向输出：<table><thead><tr><th align="center">Stack</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">a b</td></tr></tbody></table><p>这时“ * ”读入。操作符栈顶元素比较低，故没有输出，“ * ”进栈。接着c被读入并输出：</p><table><thead><tr><th align="center">Stack</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center">*</td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">a b c</td></tr></tbody></table><p>后面是一个“ + ”号。其优先级比“ * ”低，因此将“ * ”从栈弹出并放入输出中；弹出剩下的“ + ”，因为其不比“ + ”优先级低，而是具有相同的优先级，然后将“ + ”压入栈中。</p><table><thead><tr><th align="center">Stack</th><th align="center">Output</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">a b c * +</td></tr></tbody></table><p>随后操作同上，需要注意的是“ （ ”的优先级最高，遇到“ ）”时要将所有符号弹出，直到遇到” （ “。</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>​    <strong>尾递归</strong>（tail recursion）是使用递归极端不当的例子。尾递归可以通过将递归调用变成goto语句并在其前加上对每个函数的赋值语句而手动消除。很多编译器都能自动消除尾递归，但最好还是通过手动进行消除。</p><hr><h2 id="队列ADT"><a href="#队列ADT" class="headerlink" title="队列ADT"></a>队列ADT</h2><h3 id="队列模型"><a href="#队列模型" class="headerlink" title="队列模型"></a>队列模型</h3><p>​    队列的基本操作是<em>Enqueue</em>和<em>Dequeue</em>。</p><h3 id="队列的数组实现"><a href="#队列的数组实现" class="headerlink" title="队列的数组实现"></a>队列的数组实现</h3><p>​    对于每一个队列数据结构，我们保留一个数组<em>Queue[ ]</em>以及<em>Front</em>和<em>Rear</em>，还有记录实际存在于队列中的元素的个数<em>Size</em>。</p><p>​    为使一个元素X入队，我们让<em>Size<em>和</em>Rear<em>都增加1，然后置</em>Queue[ Rear]</em> = X。若使一个元素出队，我们置返回值为<em>Queue[front]</em>，<em>Size</em>减1，然后让<em>Front</em>增加1。</p><p>​    为了防止不出界，该操作需要使用<strong>循环数组</strong>（circular array）实现。</p><p><em>队列的类型声明</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QueueRecord</span> *<span class="title">Queue</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsFull</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function">Queue <span class="title">CreateQueue</span><span class="params">(<span class="keyword">int</span> MaxElements)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisposeQueue</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(<span class="keyword">int</span> X, Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Front</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue Q)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FrotAndDequeue</span><span class="params">(Queue Q)</span></span>;</span><br></pre></td></tr></table></figure><p><em>测试队列是否为空的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Q-&gt;Size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>构造空队列的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeEmpty</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q-&gt;Size = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;Front = <span class="number">1</span>;</span><br><span class="line">    Q-&gt;Rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>入队的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Succ</span><span class="params">(<span class="keyword">int</span> Value, Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(++Value == Q-&gt;Capacity)</span><br><span class="line">        Value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enqueue</span><span class="params">(<span class="keyword">int</span> X, Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsFull(Q))</span><br><span class="line">        Error(<span class="string">"Full queue"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Q-&gt;Size++;</span><br><span class="line">        Q-&gt;Rear = Succ(Q-&gt;Rear, Q);</span><br><span class="line">        Q-&gt;Array[Q-&gt;Rear] = X;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>出队的例程</em></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dequeue</span><span class="params">(Queue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> returnNum;</span><br><span class="line">    <span class="keyword">if</span>(IsEmpty(Q))</span><br><span class="line">        Error(<span class="string">"Empty Queue"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        returnNum = Q-&gt;Array[Q-&gt;Front];</span><br><span class="line">        Q-&gt;Front = Succ(Q-&gt;Front, Q);</span><br><span class="line">        Q-&gt;Size--;</span><br><span class="line">        <span class="keyword">return</span> returnNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纪念船新SI单位——&quot;陈俊鹏&quot;的诞生</title>
      <link href="/test/"/>
      <url>/test/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么是“陈俊鹏”？"><a href="#为什么是“陈俊鹏”？" class="headerlink" title="为什么是“陈俊鹏”？"></a>为什么是“陈俊鹏”？</h2><p>事情还得从2000年2月31日一个婴儿的出生说起……</p><h3 id="出生"><a href="#出生" class="headerlink" title="出生"></a>出生</h3><p>  2000年2月31日，在成都市的一处郊区，一个婴儿出生了。2月31日，那是10000000000000年都难得一遇的日子，由此可见，在这一天出生的那个婴儿，其身份也并不一般。原来，他是天上的火爆龙神，由于长得太过帅气，惹得天帝嫉妒，将其贬下凡间，投胎在一户富贵人家。那一天，风雨大作，紫气东来，连天上的云都连成了一个“帅”字。地球有史以来最帅的人————陈俊鹏，出生了。</p><h3 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h3><p>  陈俊鹏出生在富贵人家，每天从两万平米的床上醒来，由四万个女仆照顾他的生活起居，吃的是天山万年雪莲，喝的是珠穆朗玛峰上的万年寒冰化成的水，他的颜值自然越来越高。到5岁时，就已经帅得天怒人怨。在18岁时，更是超过了当时的世界第一美男子————蔡徐鲲。每一个见到他的人，都被他那帅气的脸庞直接帅晕了过去。自此，世界各国都被这样一个帅气的人给惊动了。</p><h3 id="创立新的SI单位"><a href="#创立新的SI单位" class="headerlink" title="创立新的SI单位"></a>创立新的SI单位</h3><p>  “帅”是一个抽象的概念，人们一直没法量化。直到陈俊鹏为世界所知，科学家们一致认为，可以用陈俊鹏作为单位，来量化“帅”这个概念，而恰好“俊”又是“帅”的意思，不得不说，陈俊鹏真实造物者赐给科学界的无上宝物。于是，继长度（米）、质量（千克）、时间（秒）、电流（安培）、热力学温度（开尔文）、物质的量（摩尔）和发光强度（坎德拉）之后，新的SI单位————颜值高度（陈俊鹏）诞生了。</p><hr><h2 id="简述“陈俊鹏”"><a href="#简述“陈俊鹏”" class="headerlink" title="简述“陈俊鹏”"></a>简述“陈俊鹏”</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>  1陈俊鹏被定义为在常温常压下，能见度一般（10到20公里）的情况下，能够使至少一个身体健康的（无特殊疾病）人因为你的颜值而激动至昏迷的颜值。简称俊，写作cjp。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>  由于陈俊鹏是很大的单位，除了陈俊鹏本人以外没人能够达到，于是我们常常使用微陈俊鹏（μcjp），纳陈俊鹏（ncjp），皮陈俊鹏（pcjp）来表示颜值，一个正常人的颜值大约为5pcjp，能达到μcjp的人，就已经算帅得惊天地泣鬼神了。（注：蔡徐鲲的颜值为5μcjp）</p><hr><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>最后附上几张陈俊鹏的帅照（请读者克制住自己犯罪的欲望）</p><p><img src="https://i.loli.net/2019/07/24/5d3806bbb10ed78098.jpg" alt="1"><img src="https://i.loli.net/2019/07/24/5d3806d0a2b6022473.jpg" alt="2"><img src="https://i.loli.net/2019/07/24/5d3806d0bd97d86393.jpg" alt="3"><img src="https://i.loli.net/2019/07/24/5d3806d0d0a2e47987.jpg" alt="4"><img src="https://i.loli.net/2019/07/24/5d3806d0e034d71967.jpg" alt="5"></p>]]></content>
      
      
      <categories>
          
          <category> CJP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -SI -陈俊鹏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 1 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
